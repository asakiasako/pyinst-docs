{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyInst \u00a4 PyInst is a python package in order to control measurement devices and test equipments via GPIB, RS232, Ethernet or USB, covering commonly used instruments in optical communication test and measurement. Description \u00a4 The programming of measurement instruments can be real pain. There are many different protocols, sent over many different interfaces and bus systems (GPIB, RS232, USB). In addition, even for the same type of instrument, the commands of different manufacturers are also different. In order to ease this unfortunate situation, PyInst came into being. It defines a common interface for instruments of the same type or with similar functionality, so that the code remains compatible with different instrument models. You no longer need to focus on the underlying communication protocols or commands. This allows you to focus on top-level logic. User guide Installation Tutorial Background knowledge Communicating with your instrument Getting the instrument configuration right Use common interfaces for versatility Use *OPC query to synchronize (VISA instruments) What next Migration guide Instrument Resource Names References API Reference Instrument Models Abstract Base Classes Constants Functions Development Class Hierarchy Extension Changelog","title":"Overview"},{"location":"#pyinst","text":"PyInst is a python package in order to control measurement devices and test equipments via GPIB, RS232, Ethernet or USB, covering commonly used instruments in optical communication test and measurement.","title":"PyInst"},{"location":"#description","text":"The programming of measurement instruments can be real pain. There are many different protocols, sent over many different interfaces and bus systems (GPIB, RS232, USB). In addition, even for the same type of instrument, the commands of different manufacturers are also different. In order to ease this unfortunate situation, PyInst came into being. It defines a common interface for instruments of the same type or with similar functionality, so that the code remains compatible with different instrument models. You no longer need to focus on the underlying communication protocols or commands. This allows you to focus on top-level logic. User guide Installation Tutorial Background knowledge Communicating with your instrument Getting the instrument configuration right Use common interfaces for versatility Use *OPC query to synchronize (VISA instruments) What next Migration guide Instrument Resource Names References API Reference Instrument Models Abstract Base Classes Constants Functions Development Class Hierarchy Extension Changelog","title":"Description"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"api/abc/","text":"Abstract Base Classes \u00a4 This module provides abstract base classes to describe different kinds of instruments. BaseInstrument is the base class of all the Instrument Model classes. VisaInstrument and RawSerialInstrument are classes based on BaseInstrument to describe VISA compatible instruments and serial-port based instruments. There are many other abstract classes to describe a kind of instrument that has some particular functions. For example, OpticalFrequencySetter defines the interfaces of an instrument which has optical frequency/wavelength setting function. Among these ABCs are Instrument Type classes. An Instrument Type class defines the interfaces of a specific instrument type. It always starts with a prefix Type , for example, TypeVOA or TypeOPM . An Instrument Model class will inherit at least one of these Instrument Type classes, and implement the abstract methods inherited. So the interfaces of the same type of instruments can be unified. Besides the standard methods defined by the Instrument Type class, a Instrument Model class may also define its unique methods. InstrumentMeta \u00a4 Bases: ABCMeta The meta class of BaseInstrument. ins_type () property \u00a4 The instrument type flag of the specific instrument model. Source code in pyinst\\abc.py 50 51 52 53 54 55 56 @property def ins_type ( cls : type ) -> InstrumentType : \"\"\"The instrument type flag of the specific instrument model.\"\"\" value = 0 for base in cls . mro ()[ 2 :]: value |= getattr ( base , 'ins_type' , 0 ) return value BaseInstrument ( resource_name ) \u00a4 ABC of all the instrument model classes. Parameters: Name Type Description Default resource_name str The instrument resource name. Please refer to resource_name property for more information. required Source code in pyinst\\abc.py 117 118 119 120 121 122 123 124 def __init__ ( self , resource_name : str ): \"\"\" Args: resource_name: The instrument resource name. Please refer to `resource_name` property for more information. \"\"\" self . __resource_name = resource_name super ( BaseInstrument , self ) . __init__ () brand () abstractmethod property \u00a4 The brand/manufactory of the instrument. Source code in pyinst\\abc.py 62 63 64 65 @property @abstractmethod def brand ( self ) -> str : \"\"\"The brand/manufactory of the instrument.\"\"\" model () abstractmethod property \u00a4 The model name of the instrument. Source code in pyinst\\abc.py 67 68 69 70 @property @abstractmethod def model ( self ) -> str : \"\"\"The model name of the instrument.\"\"\" details () property \u00a4 A map of information to describe the instrument. Source code in pyinst\\abc.py 72 73 74 75 76 77 @property def details ( self ) -> Mapping [ str , str ]: \"\"\" A map of information to describe the instrument. \"\"\" return {} params () property \u00a4 A list of dict to define parameters required for object creation. This is mainly used for upper level (e.g. GUI) to render options. dict fields: name (str) : Required. The name of the param, exactly the same in __init__ method. type (str) : Required. options: int | str | bool . options (list) : Optional. Valid options. min (int) : Optional. For type int only. max (int) : Optional. For type int only. Examples: [ { \"name\" : \"slot\" , \"type\" : \"int\" , \"min\" : 1 , \"max\" : 10 }, { \"name\" : \"range_level\" , \"type\" : \"str\" , \"options\" : [ \"HIGH\" , \"LOW\" ] } ] Source code in pyinst\\abc.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @property def params ( self ) -> List [ dict ]: \"\"\" A list of dict to define parameters required for object creation. This is mainly used for upper level (e.g. GUI) to render options. dict fields: - `name (str)`: Required. The name of the param, exactly the same in `__init__` method. - `type (str)`: Required. options: `int` | `str` | `bool`. - `options (list)`: Optional. Valid options. + `min (int)`: Optional. For type `int` only. + `max (int)`: Optional. For type `int` only. Examples: ``` python [ { \"name\": \"slot\", \"type\": \"int\", \"min\": 1, \"max\": 10 }, { \"name\": \"range_level\", \"type\": \"str\", \"options\": [\"HIGH\", \"LOW\"] } ] ``` \"\"\" close () abstractmethod \u00a4 Release the instrument resource. Source code in pyinst\\abc.py 135 136 137 @abstractmethod def close ( self ) -> None : \"\"\"Release the instrument resource.\"\"\" resource_name () property \u00a4 For VISA compatible instruments, it is the resource name or alias of the VISA resource. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument or USB chip. Source code in pyinst\\abc.py 139 140 141 142 143 144 145 146 147 148 149 @property def resource_name ( self ) -> str : \"\"\" - For VISA compatible instruments, it is the resource name or alias of the VISA resource. - For other instruments connected with serial port, it is the port name. - For other instruments connected with USB, it is the S/N of the instrument or USB chip. \"\"\" return self . __resource_name create ( * args , ** kwargs ) classmethod \u00a4 Create an instance of the instrument model. If an exception is raised during the instance creation, return None. Parameters: Name Type Description Default *args Any Directly passed to the __init__ method. () **kwargs Any Directly passed to the __init__ method. {} Returns: Type Description Optional [ Self ] The created instrument model instance, or None if the creation failed. Source code in pyinst\\abc.py 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 @classmethod def create ( cls , * args : Any , ** kwargs : Any ) -> Optional [ Self ]: \"\"\"Create an instance of the instrument model. If an exception is raised during the instance creation, return None. Args: *args: Directly passed to the `__init__` method. **kwargs: Directly passed to the `__init__` method. Returns: The created instrument model instance, or None if the creation failed. \"\"\" try : instance = cls ( * args , ** kwargs ) except : instance = None return instance VisaInstrument ( resource_name , read_termination = VI_READ_TERMINATION , write_termination = VI_WRITE_TERMINATION , timeout = VI_TIMEOUT , open_timeout = VI_OPEN_TIMEOUT , query_delay = VI_QUERY_DELAY , encoding = 'ascii' , ** kwargs ) \u00a4 Bases: BaseInstrument Base class of VISA compatible instruments that use message based communication. VisaInstrument creates a proxy object with pyvisa to communicate with VISA compatible instruments. Refer to PyVISA Documents for more information. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. VI_READ_TERMINATION write_termination str Write termination character. VI_WRITE_TERMINATION timeout int Timeout in milliseconds for all resource I/O operations. VI_TIMEOUT open_timeout int If the access_mode parameter requests a lock, then this parameter specifies the absolute time period (in milliseconds) that the resource waits to get unlocked before this operation returns an error. VI_OPEN_TIMEOUT query_delay float Delay in seconds between write and read operations. VI_QUERY_DELAY encoding str Encoding used for read and write operations. 'ascii' **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\abc.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 def __init__ ( self , resource_name : str , read_termination : str = VI_READ_TERMINATION , write_termination : str = VI_WRITE_TERMINATION , timeout : int = VI_TIMEOUT , open_timeout : int = VI_OPEN_TIMEOUT , query_delay : float = VI_QUERY_DELAY , encoding : str = \"ascii\" , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. timeout: Timeout in milliseconds for all resource I/O operations. open_timeout: If the access_mode parameter requests a lock, then this parameter specifies the absolute time period (in milliseconds) that the resource waits to get unlocked before this operation returns an error. query_delay: Delay in seconds between write and read operations. encoding: Encoding used for read and write operations. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super () . __init__ ( resource_name = resource_name ) rm = pyvisa . ResourceManager () self . _inst : pyvisa . resources . MessageBasedResource = rm . open_resource ( resource_name , read_termination = read_termination , write_termination = write_termination , open_timeout = open_timeout , timeout = timeout , query_delay = query_delay , encoding = encoding , ** kwargs ) self . _check_communication () resource_info () property \u00a4 Get the (extended) information of the VISA resource. Source code in pyinst\\abc.py 233 234 235 236 @property def resource_info ( self ) -> pyvisa . highlevel . ResourceInfo : \"\"\"Get the (extended) information of the VISA resource.\"\"\" return self . _inst . resource_info idn () property \u00a4 Returns a string that uniquely identifies the instrument. Source code in pyinst\\abc.py 238 239 240 241 @property def idn ( self ) -> str : \"\"\"Returns a string that uniquely identifies the instrument.\"\"\" return self . query ( '*IDN?' ) opc () property \u00a4 Operation complete query. Source code in pyinst\\abc.py 243 244 245 246 @property def opc ( self ) -> str : \"\"\"Operation complete query.\"\"\" return self . query ( '*OPC?' ) close () \u00a4 Closes the VISA session and marks the handle as invalid. Source code in pyinst\\abc.py 248 249 250 251 252 def close ( self ) -> None : \"\"\" Closes the VISA session and marks the handle as invalid. \"\"\" self . _inst . close () command ( message ) \u00a4 Write a VISA command without read back. Alias of write(message). Parameters: Name Type Description Default message str The message to be sent. required Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 267 268 269 270 271 272 273 274 275 276 277 278 279 def command ( self , message : str ) -> int : \"\"\" Write a VISA command without read back. Alias of write(message). Args: message: The message to be sent. Returns: Number of bytes written. \"\"\" return self . write ( message ) write ( message , termination = None , encoding = None ) \u00a4 Write a string message to the device. The write_termination is always appended to it. Parameters: Name Type Description Default message str The message to be sent. required termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def write ( self , message : str , termination : Optional [ str ] = None , encoding : Optional [ str ] = None , ) -> int : \"\"\"Write a string message to the device. The write_termination is always appended to it. Args: message: The message to be sent. termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Number of bytes written. \"\"\" return self . _inst . write ( message , termination , encoding ) read ( termination = None , encoding = None ) \u00a4 Read a string from the device. Reading stops when the device stops sending (e.g. by setting appropriate bus lines), or the termination characters sequence was detected. Attention: Only the last character of the termination characters is really used to stop reading, however, the whole sequence is compared to the ending of the read string message. If they don't match, a warning is issued. Parameters: Name Type Description Default termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description str Message read from the instrument and decoded. Source code in pyinst\\abc.py 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 def read ( self , termination : Optional [ str ] = None , encoding : Optional [ str ] = None ) -> str : \"\"\"Read a string from the device. Reading stops when the device stops sending (e.g. by setting appropriate bus lines), or the termination characters sequence was detected. Attention: Only the last character of the termination characters is really used to stop reading, however, the whole sequence is compared to the ending of the read string message. If they don't match, a warning is issued. Args: termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Message read from the instrument and decoded. \"\"\" return self . _inst . read ( termination , encoding ) query ( message , delay = None ) \u00a4 A combination of write(message) and read() Parameters: Name Type Description Default message str The message to send. required delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None Returns: Type Description str Answer from the device. Source code in pyinst\\abc.py 330 331 332 333 334 335 336 337 338 339 340 341 342 def query ( self , message : str , delay : Optional [ float ] = None ) -> str : \"\"\"A combination of write(message) and read() Args: message: The message to send. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. Returns: Answer from the device. \"\"\" return self . _inst . query ( message , delay ) read_binary_values ( datatype = 'f' , is_big_endian = False , container = list , header_fmt = 'ieee' , expect_termination = True , data_points = 0 , chunk_size = None ) \u00a4 Read values from the device in binary format returning an iterable of values. Parameters: Name Type Description Default datatype pyvisa . util . BINARY_DATATYPES Format string for a single element. See struct module. 'f' by default. 'f' is_big_endian bool Are the data in big or little endian order. Defaults to False. False container Type | Callable [[ Iterable ], Sequence ] Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. list header_fmt pyvisa . util . BINARY_HEADERS Format of the header prefixing the data. Defaults to 'ieee'. 'ieee' expect_termination bool When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. True data_points int Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. 0 chunk_size Optional [ int ] Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. None Returns: Type Description Sequence [ int | float ] Data read from the device. Source code in pyinst\\abc.py 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 def read_binary_values ( self , datatype : pyvisa . util . BINARY_DATATYPES = \"f\" , is_big_endian : bool = False , container : Type | Callable [[ Iterable ], Sequence ] = list , header_fmt : pyvisa . util . BINARY_HEADERS = \"ieee\" , expect_termination : bool = True , data_points : int = 0 , chunk_size : Optional [ int ] = None , ) -> Sequence [ int | float ]: \"\"\"Read values from the device in binary format returning an iterable of values. Args: datatype: Format string for a single element. See struct module. 'f' by default. is_big_endian: Are the data in big or little endian order. Defaults to False. container: Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. header_fmt: Format of the header prefixing the data. Defaults to 'ieee'. expect_termination: When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. data_points: Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. chunk_size: Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. Returns: Data read from the device. \"\"\" return self . _inst . read_binary_values ( datatype , is_big_endian , container , header_fmt , expect_termination , data_points , chunk_size ) query_binary_values ( message , datatype = 'f' , is_big_endian = False , container = list , delay = None , header_fmt = 'ieee' , expect_termination = True , data_points = 0 , chunk_size = None ) \u00a4 Query the device for values in binary format returning an iterable of values. Parameters: Name Type Description Default message str The message to send. required datatype pyvisa . util . BINARY_DATATYPES Format string for a single element. See struct module. 'f' by default. 'f' is_big_endian bool Are the data in big or little endian order. Defaults to False. False container Type | Callable [[ Iterable ], Sequence ] Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. list delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None header_fmt pyvisa . util . BINARY_HEADERS Format of the header prefixing the data. Defaults to 'ieee'. 'ieee' expect_termination bool When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. True data_points int Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. 0 chunk_size Optional [ int ] Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. None Returns: Type Description Sequence [ int | float ] Data read from the device. Source code in pyinst\\abc.py 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 def query_binary_values ( self , message : str , datatype : pyvisa . util . BINARY_DATATYPES = \"f\" , is_big_endian : bool = False , container : Type | Callable [[ Iterable ], Sequence ] = list , delay : Optional [ float ] = None , header_fmt : pyvisa . util . BINARY_HEADERS = \"ieee\" , expect_termination : bool = True , data_points : int = 0 , chunk_size : Optional [ int ] = None , ) -> Sequence [ int | float ]: \"\"\"Query the device for values in binary format returning an iterable of values. Args: message: The message to send. datatype: Format string for a single element. See struct module. 'f' by default. is_big_endian: Are the data in big or little endian order. Defaults to False. container: Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. header_fmt: Format of the header prefixing the data. Defaults to 'ieee'. expect_termination: When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. data_points: Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. chunk_size: Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. Returns: Data read from the device. \"\"\" return self . _inst . query_binary_values ( message , datatype , is_big_endian , container , delay , header_fmt , expect_termination , data_points , chunk_size ) set_visa_attribute ( name , state ) \u00a4 Set the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Parameters: Name Type Description Default name pyvisa . constants . ResourceAttribute Attribute for which the state is to be modified. required state Any The state of the attribute to be set for the specified object. required Returns: Type Description pyvisa . constants . StatusCode Return value of the library call. Source code in pyinst\\abc.py 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 def set_visa_attribute ( self , name : pyvisa . constants . ResourceAttribute , state : Any ) -> pyvisa . constants . StatusCode : \"\"\"Set the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Args: name: Attribute for which the state is to be modified. state: The state of the attribute to be set for the specified object. Returns: Return value of the library call. \"\"\" return self . _inst . set_visa_attribute ( name , state ) get_visa_attribute ( name ) \u00a4 Retrieves the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Parameters: Name Type Description Default name pyvisa . constants . ResourceAttribute Resource attribute for which the state query is made. required Returns: Type Description Any The state of the queried attribute for a specified resource. Source code in pyinst\\abc.py 445 446 447 448 449 450 451 452 453 454 455 456 457 def get_visa_attribute ( self , name : pyvisa . constants . ResourceAttribute ) -> Any : \"\"\"Retrieves the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Args: name: Resource attribute for which the state query is made. Returns: The state of the queried attribute for a specified resource. \"\"\" return self . _inst . get_visa_attribute ( name ) RawSerialInstrument ( resource_name , baudrate , bytesize = SerialByteSize . EIGHTBITS , parity = SerialParity . NONE , stopbits = SerialStopBits . ONE , read_termination = SERIAL_READ_TERMINATION , write_termination = SERIAL_WRITE_TERMINATION , read_timeout = SERIAL_READ_TIMEOUT , write_timeout = SERIAL_WRITE_TIMEOUT , query_delay = SERIAL_QUERY_DELAY , encoding = 'ascii' , ** kwargs ) \u00a4 Bases: BaseInstrument Instrument based on raw serial communication. Compared to VISA compatible instruments, SerialRawInstrument do not have a common application architecture. It depends on the manufactory. SerialRawInstrument creates a proxy object using pySerial to communicate with instruments. Refer to pySerial Documents for more information. Parameters: Name Type Description Default resource_name str Serial port name. required baudrate int Baud rate such as 9600 or 115200 etc.. required bytesize SerialByteSize Number of data bits. SerialByteSize.EIGHTBITS parity SerialParity Parity checking. SerialParity.NONE stopbits SerialStopBits Number of stop bits. SerialStopBits.ONE read_termination str Read termination character. SERIAL_READ_TERMINATION write_termination str Write termination character. SERIAL_WRITE_TERMINATION read_timeout int Timeout in milliseconds for read operations. SERIAL_READ_TIMEOUT write_timeout int Timeout in milliseconds for write operations. SERIAL_WRITE_TIMEOUT query_delay float Delay in seconds between write and read operations. SERIAL_QUERY_DELAY encoding str Encoding used for read and write operations. 'ascii' Source code in pyinst\\abc.py 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 def __init__ ( self , resource_name : str , baudrate : int , bytesize : SerialByteSize = SerialByteSize . EIGHTBITS , parity : SerialParity = SerialParity . NONE , stopbits : SerialStopBits = SerialStopBits . ONE , read_termination : str = SERIAL_READ_TERMINATION , write_termination : str = SERIAL_WRITE_TERMINATION , read_timeout : int = SERIAL_READ_TIMEOUT , write_timeout : int = SERIAL_WRITE_TIMEOUT , query_delay : float = SERIAL_QUERY_DELAY , encoding : str = \"ascii\" , ** kwargs ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. bytesize: Number of data bits. parity: Parity checking. stopbits: Number of stop bits. read_termination: Read termination character. write_termination: Write termination character. read_timeout: Timeout in milliseconds for read operations. write_timeout: Timeout in milliseconds for write operations. query_delay: Delay in seconds between write and read operations. encoding: Encoding used for read and write operations. \"\"\" __serial = serial . Serial ( port = resource_name , baudrate = baudrate , bytesize = bytesize . value , parity = parity . value , stopbits = stopbits . value , timeout = read_timeout , write_timeout = write_timeout , ) self . __serial = __serial self . __read_termination = read_termination self . __write_termination = write_termination self . __encoding = encoding self . __query_delay = query_delay super () . __init__ ( resource_name = resource_name ) close () \u00a4 Close the serial port immediately. Source code in pyinst\\abc.py 523 524 525 def close ( self ) -> None : \"\"\"Close the serial port immediately.\"\"\" self . __serial . close () command ( message ) \u00a4 Write a serial command without read back. Alias of write(message). Parameters: Name Type Description Default message str message to be sent. required Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 527 528 529 530 531 532 533 534 535 536 537 538 539 def command ( self , message : str ) -> int : \"\"\" Write a serial command without read back. Alias of write(message). Args: message: message to be sent. Returns: Number of bytes written. \"\"\" return self . write ( message ) write ( message , termination = None , encoding = None ) \u00a4 Write a string message to the device. The write_termination is always appended to it. Parameters: Name Type Description Default message str message to be sent. required termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 def write ( self , message : str , termination : Optional [ str ] = None , encoding : Optional [ str ] = None , ) -> int : \"\"\"Write a string message to the device. The write_termination is always appended to it. Args: message: message to be sent. termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Number of bytes written. \"\"\" tx_str = ' {message}{term} ' . format ( message = message , term = termination or self . __write_termination ) tx_bytes = tx_str . encode ( encoding or self . __encoding ) # clear input buffer so the data buffered before command is cleared self . __serial . reset_input_buffer () return self . __serial . write ( tx_bytes ) read ( termination = None , encoding = None ) \u00a4 Read a string from the device. Reading stops when the device stops sending, or the termination characters sequence was detected. Parameters: Name Type Description Default termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description str Message read from the instrument and decoded. Source code in pyinst\\abc.py 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 def read ( self , termination : Optional [ str ] = None , encoding : Optional [ str ] = None ) -> str : \"\"\"Read a string from the device. Reading stops when the device stops sending, or the termination characters sequence was detected. Args: termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Message read from the instrument and decoded. \"\"\" buffer = bytes () term = termination or self . __read_termination encoding = encoding or self . __encoding while True : rx = self . __serial . read () if not rx : raise InstrIOError ( 'Timeout before read_termination received.' ) buffer += rx if buffer . endswith ( term . encode ( encoding )): break return buffer . decode ( encoding ) . rstrip ( term ) query ( message , delay = None ) \u00a4 A combination of write(message) and read() Parameters: Name Type Description Default message str The message to send. required delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None Returns: Type Description str Answer from the device. Source code in pyinst\\abc.py 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 def query ( self , message : str , delay : Optional [ float ] = None ) -> str : \"\"\"A combination of write(message) and read() Args: message: The message to send. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. Returns: Answer from the device. \"\"\" self . write ( message ) time . sleep ( delay or self . __query_delay ) return self . read () OpticalFrequencySetter \u00a4 Bases: ABC Instrument with optical frequency/wavelength setting. min_frequency () abstractmethod property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\abc.py 626 627 628 629 630 @property @abstractmethod def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return LIGHTSPEED / self . max_wavelength max_frequency () abstractmethod property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\abc.py 632 633 634 635 636 @property @abstractmethod def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return LIGHTSPEED / self . min_wavelength min_wavelength () abstractmethod property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\abc.py 638 639 640 641 642 @property @abstractmethod def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return LIGHTSPEED / self . max_frequency max_wavelength () abstractmethod property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\abc.py 644 645 646 647 648 @property @abstractmethod def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return LIGHTSPEED / self . min_frequency get_frequency () abstractmethod \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\abc.py 650 651 652 653 654 655 656 657 658 @abstractmethod def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return round ( LIGHTSPEED / self . get_wavelength (), 6 ) set_frequency ( frequency ) abstractmethod \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\abc.py 660 661 662 663 664 665 666 667 668 @abstractmethod def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" wavelength = round ( LIGHTSPEED / frequency , 6 ) self . set_wavelength ( wavelength ) get_wavelength () abstractmethod \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\abc.py 670 671 672 673 674 675 676 677 @abstractmethod def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return round ( LIGHTSPEED / self . get_frequency (), 6 ) set_wavelength ( wavelength ) abstractmethod \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\abc.py 679 680 681 682 683 684 685 686 687 @abstractmethod def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" frequency = round ( LIGHTSPEED / wavelength , 6 ) self . set_frequency ( frequency ) TypeOPM \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Power Meter. ins_type = InstrumentType . OPM class-attribute \u00a4 min_avg_time () abstractmethod property \u00a4 The minimum averaging time in ms. Source code in pyinst\\abc.py 695 696 697 698 @property @abstractmethod def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" max_avg_time () abstractmethod property \u00a4 The maximum averaging time in ms. Source code in pyinst\\abc.py 700 701 702 703 @property @abstractmethod def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" min_pow_cal () abstractmethod property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\abc.py 705 706 707 708 @property @abstractmethod def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" max_pow_cal () abstractmethod property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\abc.py 710 711 712 713 @property @abstractmethod def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" get_power_value () abstractmethod \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Note It is possible that some OPM models defined the power calibration opposite in sign, but it is normalized in pyinst. Please refer to the math function above. Returns: Type Description float The value of the optical power. Source code in pyinst\\abc.py 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 @abstractmethod def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Note: It is possible that some OPM models defined the power calibration opposite in sign, but it is normalized in pyinst. Please refer to the math function above. Returns: The value of the optical power. \"\"\" get_power_unit () abstractmethod \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\abc.py 734 735 736 737 738 739 740 @abstractmethod def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" set_power_unit ( unit ) abstractmethod \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\abc.py 742 743 744 745 746 747 748 @abstractmethod def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" get_power () \u00a4 Queries the measured optical power value and unit. Returns: Name Type Description value float The value of the optical power. unit OpticalPowerUnit The unit of the optical power. Source code in pyinst\\abc.py 750 751 752 753 754 755 756 757 def get_power ( self ) -> Tuple [ float , OpticalPowerUnit ]: \"\"\"Queries the measured optical power value and unit. Returns: value: The value of the optical power. unit: The unit of the optical power. \"\"\" return self . get_power_value (), self . get_power_unit () get_dbm_value () \u00a4 Returns the optical power value measured in dBm. If the power unit setting is W, a math conversion will be performed. Returns: Type Description float The value of the optical power in dBm. Source code in pyinst\\abc.py 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 def get_dbm_value ( self ) -> float : \"\"\"Returns the optical power value measured in dBm. If the power unit setting is W, a math conversion will be performed. Returns: The value of the optical power in dBm. \"\"\" unit = self . get_power_unit () value = self . get_power_value () if unit == OpticalPowerUnit . DBM : return value else : return w_to_dbm ( value ) get_w_value () \u00a4 Returns the optical power value measured in W. If the power unit setting is dBm, a math conversion will be performed. Returns: Type Description float The value of the optical power in W. Source code in pyinst\\abc.py 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 def get_w_value ( self ) -> float : \"\"\"Returns the optical power value measured in W. If the power unit setting is dBm, a math conversion will be performed. Returns: The value of the optical power in W. \"\"\" unit = self . get_power_unit () value = self . get_power_value () if unit == OpticalPowerUnit . W : return value else : return dbm_to_w ( value ) get_pow_cal () abstractmethod \u00a4 Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\abc.py 791 792 793 794 795 796 797 798 @abstractmethod def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" set_pow_cal ( value ) abstractmethod \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\abc.py 800 801 802 803 804 805 806 807 @abstractmethod def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" get_avg_time () abstractmethod \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\abc.py 809 810 811 812 813 814 815 816 @abstractmethod def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" set_avg_time ( value ) abstractmethod \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\abc.py 818 819 820 821 822 823 824 825 @abstractmethod def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" TypeVOA \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of a Variable Optical Attenuator. ins_type = InstrumentType . VOA class-attribute \u00a4 min_att () abstractmethod property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\abc.py 835 836 837 838 839 840 841 842 @property @abstractmethod def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" max_att () abstractmethod property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\abc.py 844 845 846 847 848 849 850 851 @property @abstractmethod def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" min_att_offset () abstractmethod property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\abc.py 853 854 855 856 @property @abstractmethod def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" max_att_offset () abstractmethod property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\abc.py 858 859 860 861 @property @abstractmethod def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" enable ( en = True ) abstractmethod \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 863 864 865 866 867 868 869 870 @abstractmethod def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" disable () abstractmethod \u00a4 Disable the optical output. Source code in pyinst\\abc.py 872 873 874 @abstractmethod def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" is_enabled () abstractmethod \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\abc.py 876 877 878 879 880 881 @abstractmethod def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" get_att () abstractmethod \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Note It is possible that some VOA models defined the attenuation offset opposite in sign. But it is normalized in pyinst to align with the math function above. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\abc.py 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 @abstractmethod def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Note: It is possible that some VOA models defined the attenuation offset opposite in sign. But it is normalized in pyinst to align with the math function above. Returns: The attenuation value in dB. \"\"\" set_att ( att ) abstractmethod \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\abc.py 904 905 906 907 908 909 910 911 912 913 914 @abstractmethod def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" get_att_offset () abstractmethod \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\abc.py 916 917 918 919 920 921 922 923 @abstractmethod def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" set_att_offset ( offset ) abstractmethod \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\abc.py 925 926 927 928 929 930 931 932 @abstractmethod def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" TypeOMA \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Modulation Analyzer. The operating logic is different between vendors/models, so limited methods are defined here. ins_type = InstrumentType . OMA class-attribute \u00a4 run ( _run = True ) abstractmethod \u00a4 Run (or stop) OMA. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 944 945 946 947 948 949 950 951 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Run (or stop) OMA. Args: _run: True = run, False = stop. \"\"\" stop () abstractmethod \u00a4 Stop OMA. Source code in pyinst\\abc.py 953 954 955 @abstractmethod def stop ( self ) -> None : \"\"\"Stop OMA.\"\"\" TypeOSA \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Spectrum Analyzer. The operating logic is different between vendors/models, so no common methods are defined here. ins_type = InstrumentType . OSA class-attribute \u00a4 run ( _run = True ) abstractmethod \u00a4 Start repeat sweep. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 967 968 969 970 971 972 973 974 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Start repeat sweep. Args: _run: True = run, False = stop. \"\"\" stop () abstractmethod \u00a4 Stop sweep. Source code in pyinst\\abc.py 976 977 978 @abstractmethod def stop ( self ) -> None : \"\"\"Stop sweep.\"\"\" single () abstractmethod \u00a4 Perform single sweep. Source code in pyinst\\abc.py 980 981 982 @abstractmethod def single ( self ) -> None : \"\"\"Perform single sweep.\"\"\" get_osnr () abstractmethod \u00a4 Get the measured OSNR in dB. Returns: Type Description float The OSNR value in dB. Source code in pyinst\\abc.py 984 985 986 987 988 989 990 @abstractmethod def get_osnr ( self ) -> float : \"\"\"Get the measured OSNR in dB. Returns: The OSNR value in dB. \"\"\" TypeWM \u00a4 Bases: ABC ABC to define the interfaces of an Optical Wavelength Meter. ins_type = InstrumentType . WM class-attribute \u00a4 get_frequency () abstractmethod \u00a4 Queries the measured optical frequency in THz. Returns: Type Description float The measured optical frequency value. Source code in pyinst\\abc.py 1000 1001 1002 1003 1004 1005 1006 1007 1008 @abstractmethod def get_frequency ( self ) -> float : \"\"\" Queries the measured optical frequency in THz. Returns: The measured optical frequency value. \"\"\" return round ( LIGHTSPEED / self . get_wavelength (), 6 ) get_wavelength () abstractmethod \u00a4 Queries the mearured optical wavelength in nm. Returns: Type Description float The measured optical wavelength value. Source code in pyinst\\abc.py 1010 1011 1012 1013 1014 1015 1016 1017 @abstractmethod def get_wavelength ( self ) -> float : \"\"\"Queries the mearured optical wavelength in nm. Returns: The measured optical wavelength value. \"\"\" return round ( LIGHTSPEED / self . get_frequency (), 6 ) run ( _run = True ) abstractmethod \u00a4 Start repeat measurement. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 1019 1020 1021 1022 1023 1024 1025 1026 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Start repeat measurement. Args: _run: True = run, False = stop. \"\"\" stop () abstractmethod \u00a4 Stop repeat measurement. Source code in pyinst\\abc.py 1028 1029 1030 @abstractmethod def stop ( self ) -> None : \"\"\"Stop repeat measurement.\"\"\" single () abstractmethod \u00a4 Perform single measurement. Source code in pyinst\\abc.py 1032 1033 1034 @abstractmethod def single ( self ) -> None : \"\"\"Perform single measurement.\"\"\" is_running () abstractmethod \u00a4 Get the measurement state of the wavemeter. Returns: Type Description bool True = reapeat measurement, False = stopped. Source code in pyinst\\abc.py 1036 1037 1038 1039 1040 1041 1042 1043 @abstractmethod def is_running ( self ) -> bool : \"\"\" Get the measurement state of the wavemeter. Returns: True = reapeat measurement, False = stopped. \"\"\" TypeOTF \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Tunable Filter. ins_type = InstrumentType . OTF class-attribute \u00a4 min_bandwidth_in_nm () abstractmethod property \u00a4 The minimum bandwidth in nm. Source code in pyinst\\abc.py 1051 1052 1053 1054 1055 @property @abstractmethod def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" return bw_in_ghz_to_nm ( self . min_bandwidth_in_ghz , self . get_frequency ()) max_bandwidth_in_nm () abstractmethod property \u00a4 The maximum bandwidth in nm. Source code in pyinst\\abc.py 1057 1058 1059 1060 1061 @property @abstractmethod def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" return bw_in_ghz_to_nm ( self . max_bandwidth_in_ghz , self . get_frequency ()) min_bandwidth_in_ghz () abstractmethod property \u00a4 The minimum bandwidth in GHz. Source code in pyinst\\abc.py 1063 1064 1065 1066 1067 @property @abstractmethod def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return bw_in_nm_to_ghz ( self . min_bandwidth_in_nm , self . get_wavelength ()) max_bandwidth_in_ghz () abstractmethod property \u00a4 The maximum bandwidth in GHz. Source code in pyinst\\abc.py 1069 1070 1071 1072 1073 @property @abstractmethod def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return bw_in_nm_to_ghz ( self . max_bandwidth_in_nm , self . get_wavelength ()) get_bandwidth ( unit ) \u00a4 Get the filter bandwidth value in specified unit. Parameters: Name Type Description Default unit OpticalBandwidthUnit The unit for the bandwidth value. required Returns: Type Description float The bandwidth value in specified unit. Source code in pyinst\\abc.py 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 def get_bandwidth ( self , unit : OpticalBandwidthUnit ) -> float : \"\"\" Get the filter bandwidth value in specified unit. Args: unit: The unit for the bandwidth value. Returns: The bandwidth value in specified unit. \"\"\" unit = OpticalBandwidthUnit ( unit ) if unit == OpticalBandwidthUnit . GHZ : return self . get_bandwidth_in_ghz () else : return self . get_bandwidth_in_nm () set_bandwidth ( value , unit ) \u00a4 Set the filter bandwidth in specified unit. Parameters: Name Type Description Default value int | float The bandwidth value in specified unit. required unit OpticalBandwidthUnit The unit of the bandwidth value. required Source code in pyinst\\abc.py 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 def set_bandwidth ( self , value : int | float , unit : OpticalBandwidthUnit ) -> None : \"\"\" Set the filter bandwidth in specified unit. Args: value: The bandwidth value in specified unit. unit: The unit of the bandwidth value. \"\"\" unit = OpticalBandwidthUnit ( unit ) if unit == OpticalBandwidthUnit . GHZ : return self . set_bandwidth_in_ghz ( value ) else : return self . set_bandwidth_in_nm ( value ) get_bandwidth_in_nm () abstractmethod \u00a4 Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\abc.py 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 @abstractmethod def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" bw_ghz = self . get_bandwidth_in_ghz () return round ( bw_in_ghz_to_nm ( bw_ghz , self . get_frequency ()), 6 ) set_bandwidth_in_nm ( value ) abstractmethod \u00a4 Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\abc.py 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 @abstractmethod def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" bw_ghz = round ( bw_in_nm_to_ghz ( value , self . get_wavelength ()), 6 ) self . set_bandwidth_in_ghz ( bw_ghz ) get_bandwidth_in_ghz () abstractmethod \u00a4 Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\abc.py 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 @abstractmethod def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" bw_nm = self . get_bandwidth_in_nm () return round ( bw_in_nm_to_ghz ( bw_nm , self . get_wavelength ()), 6 ) set_bandwidth_in_ghz ( value ) abstractmethod \u00a4 Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\abc.py 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 @abstractmethod def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" bw_nm = round ( bw_in_ghz_to_nm ( value , self . get_frequency ()), 6 ) self . set_bandwidth_in_nm ( bw_nm ) TypeTS \u00a4 Bases: ABC ABC to define the interfaces of a Temperature Source. A temperature source is an instrument that has the ability to control environment temperature, including chamber, TEC (Thermo Electric Cooler), thermo-stream, and so on. Each TypeTS class has a ts_type property to indicate the type of the thermostream. It is a member of TemperatureSourceType enum. ins_type = InstrumentType . TS class-attribute \u00a4 ts_type () property \u00a4 The type of the temperature source. Source code in pyinst\\abc.py 1163 1164 1165 1166 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The type of the temperature source.\"\"\" return TemperatureSourceType . UNDEFINED set_target_temp ( value ) abstractmethod \u00a4 Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\abc.py 1168 1169 1170 1171 1172 1173 1174 1175 @abstractmethod def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" get_target_temp () abstractmethod \u00a4 Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\abc.py 1177 1178 1179 1180 1181 1182 1183 1184 @abstractmethod def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" get_current_temp () abstractmethod \u00a4 Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\abc.py 1186 1187 1188 1189 1190 1191 1192 1193 @abstractmethod def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" set_temp_unit ( unit ) abstractmethod \u00a4 Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\abc.py 1195 1196 1197 1198 1199 1200 1201 1202 @abstractmethod def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" get_temp_unit () abstractmethod \u00a4 Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\abc.py 1204 1205 1206 1207 1208 1209 1210 1211 @abstractmethod def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" TypeSW \u00a4 Bases: ABC ABC to define the interfaces of an Optical Switch. ins_type = InstrumentType . SW class-attribute \u00a4 set_channel ( channel ) abstractmethod \u00a4 Switch to the specified channel route. Parameters: Name Type Description Default channel int The channel number. required Source code in pyinst\\abc.py 1219 1220 1221 1222 1223 1224 1225 1226 @abstractmethod def set_channel ( self , channel : int ) -> None : \"\"\" Switch to the specified channel route. Args: channel: The channel number. \"\"\" get_channel () abstractmethod \u00a4 Queries the current channel route of the switch. Returns: Type Description int The channel number of current route. Source code in pyinst\\abc.py 1228 1229 1230 1231 1232 1233 1234 1235 @abstractmethod def get_channel ( self ) -> int : \"\"\" Queries the current channel route of the switch. Returns: The channel number of current route. \"\"\" TypeMSW \u00a4 Bases: ABC ABC to define the interfaces of an Optical Matrix Switch. ins_type = InstrumentType . MSW class-attribute \u00a4 connect ( port1 , port2 , enable = True ) abstractmethod \u00a4 Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use check to confirm whether either port is already in use. Parameters: Name Type Description Default port1 int The valid port at one end of the path. required port2 int The valid port at the other end of the path. required enable bool Whether to enable the connection. True Source code in pyinst\\abc.py 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 @abstractmethod def connect ( self , port1 : int , port2 : int , enable : bool = True ) -> None : \"\"\" Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use `check` to confirm whether either port is already in use. Args: port1: The valid port at one end of the path. port2: The valid port at the other end of the path. enable: Whether to enable the connection. \"\"\" connected_with ( port ) abstractmethod \u00a4 Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Parameters: Name Type Description Default port int The port number to check connection information. required Returns: Type Description Optional [ int ] Connection information for the specified port. Optional [ int ] None = No connection exists. Optional [ int ] Optional [ int ] int N = Port number at other end of the connection. Source code in pyinst\\abc.py 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 @abstractmethod def connected_with ( self , port : int ) -> Optional [ int ]: \"\"\" Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Args: port: The port number to check connection information. Returns: Connection information for the specified port. None = No connection exists. int N = Port number at other end of the connection. \"\"\" clear ( port ) abstractmethod \u00a4 Clears a configured optical connection connected to the specified port. Parameters: Name Type Description Default port int The port at either end of the configured connection. required Source code in pyinst\\abc.py 1278 1279 1280 1281 1282 1283 1284 1285 @abstractmethod def clear ( self , port : int ) -> None : \"\"\" Clears a configured optical connection connected to the specified port. Args: port: The port at either end of the configured connection. \"\"\" clear_all () abstractmethod \u00a4 Clears all configured optical connections. Source code in pyinst\\abc.py 1287 1288 1289 @abstractmethod def clear_all ( self ) -> None : \"\"\"Clears all configured optical connections.\"\"\" check ( port1 , port2 ) abstractmethod \u00a4 To check if port1 and port2 are both not in use. Parameters: Name Type Description Default port1 int The port at one end of the path. required port2 int The port at the other end of the path. required Returns: Type Description bool True = Both ports available (not in use). bool False = Conflict; one or both ports already in use. Source code in pyinst\\abc.py 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 @abstractmethod def check ( self , port1 : int , port2 : int ) -> bool : \"\"\" To check if port1 and port2 are both not in use. Args: port1: The port at one end of the path. port2: The port at the other end of the path. Returns: True = Both ports available (not in use). False = Conflict; one or both ports already in use. \"\"\" enable ( port , enable = True ) abstractmethod \u00a4 Sets the connection state of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required enable bool True = Enable | False = Disable. True Source code in pyinst\\abc.py 1306 1307 1308 1309 1310 1311 1312 1313 1314 @abstractmethod def enable ( self , port : int , enable : bool = True ) -> None : \"\"\" Sets the connection state of a configured optical connection. Args: port: The port at either end of the connection. enable: True = Enable | False = Disable. \"\"\" disable ( port ) abstractmethod \u00a4 Disable the connection of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required Source code in pyinst\\abc.py 1316 1317 1318 1319 1320 1321 1322 1323 @abstractmethod def disable ( self , port : int ) -> None : \"\"\" Disable the connection of a configured optical connection. Args: port: The port at either end of the connection. \"\"\" is_enabled ( port ) abstractmethod \u00a4 Returns the connection state of a configured optical connection. Returns: Type Description bool True = Enabled | False = Disabled Source code in pyinst\\abc.py 1325 1326 1327 1328 1329 1330 1331 1332 @abstractmethod def is_enabled ( self , port : int ) -> bool : \"\"\" Returns the connection state of a configured optical connection. Returns: True = Enabled | False = Disabled \"\"\" TypePS \u00a4 Bases: ABC ABC to define the interfaces of a Power Supply. ins_type = InstrumentType . PS class-attribute \u00a4 min_voltage () abstractmethod property \u00a4 The minimum programmable voltage level in V. Source code in pyinst\\abc.py 1340 1341 1342 1343 @property @abstractmethod def min_voltage ( self ) -> float : \"\"\"The minimum programmable voltage level in V.\"\"\" max_voltage () abstractmethod property \u00a4 The maximum programmable voltage level in V. Source code in pyinst\\abc.py 1345 1346 1347 1348 @property @abstractmethod def max_voltage ( self ) -> float : \"\"\"The maximum programmable voltage level in V.\"\"\" min_current () abstractmethod property \u00a4 The minimum programmable current level in A. Source code in pyinst\\abc.py 1350 1351 1352 1353 @property @abstractmethod def min_current ( self ) -> float : \"\"\"The minimum programmable current level in A.\"\"\" max_current () abstractmethod property \u00a4 The maximum programmable current level in A. Source code in pyinst\\abc.py 1355 1356 1357 1358 @property @abstractmethod def max_current ( self ) -> float : \"\"\"The maximum programmable current level in A.\"\"\" enable ( en = True ) abstractmethod \u00a4 Enables (or disables) the outputs of the power supply. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1360 1361 1362 1363 1364 1365 1366 1367 @abstractmethod def enable ( self , en : bool = True ) -> None : \"\"\" Enables (or disables) the outputs of the power supply. Args: en: `True` = Enable, `False` = Disable. \"\"\" disable () abstractmethod \u00a4 Disables the output of the power supply. Source code in pyinst\\abc.py 1369 1370 1371 @abstractmethod def disable ( self ) -> None : \"\"\"Disables the output of the power supply.\"\"\" is_enabled () abstractmethod \u00a4 Queries whether the output of the power supply is enabled. Returns: Type Description bool True = Enabled, False = Disabled Source code in pyinst\\abc.py 1373 1374 1375 1376 1377 1378 1379 1380 @abstractmethod def is_enabled ( self ) -> bool : \"\"\" Queries whether the output of the power supply is enabled. Returns: `True` = Enabled, `False` = Disabled \"\"\" set_voltage_limit ( value ) abstractmethod \u00a4 Sets the immediate voltage level of the power supply. Parameters: Name Type Description Default value int | float The voltage level in V. required Source code in pyinst\\abc.py 1382 1383 1384 1385 1386 1387 1388 1389 @abstractmethod def set_voltage_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate voltage level of the power supply. Args: value: The voltage level in V. \"\"\" get_voltage_limit () abstractmethod \u00a4 Queries the immediate voltage level of the power supply. Returns: Type Description float The voltage level in V. Source code in pyinst\\abc.py 1391 1392 1393 1394 1395 1396 1397 1398 @abstractmethod def get_voltage_limit ( self ) -> float : \"\"\" Queries the immediate voltage level of the power supply. Returns: The voltage level in V. \"\"\" measure_voltage () abstractmethod \u00a4 Queries the voltage measured at the sense terminals of the power supply. Returns: Type Description float The voltage measured in V. Source code in pyinst\\abc.py 1400 1401 1402 1403 1404 1405 1406 1407 @abstractmethod def measure_voltage ( self ) -> float : \"\"\"Queries the voltage measured at the sense terminals of the power supply. Returns: The voltage measured in V. \"\"\" set_current_limit ( value ) abstractmethod \u00a4 Sets the immediate current level of the power supply. Parameters: Name Type Description Default value int | float The current level in A. required Source code in pyinst\\abc.py 1409 1410 1411 1412 1413 1414 1415 1416 @abstractmethod def set_current_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate current level of the power supply. Args: value: The current level in A. \"\"\" get_current_limit () abstractmethod \u00a4 Queries the immediate current level of the power supply. Returns: Type Description float The current level in A. Source code in pyinst\\abc.py 1418 1419 1420 1421 1422 1423 1424 1425 @abstractmethod def get_current_limit ( self ) -> float : \"\"\" Queries the immediate current level of the power supply. Returns: The current level in A. \"\"\" measure_current () abstractmethod \u00a4 Queries the current measured across the current sense resistor inside the power supply. Returns: Type Description float The current measured in A. Source code in pyinst\\abc.py 1427 1428 1429 1430 1431 1432 1433 1434 @abstractmethod def measure_current ( self ) -> float : \"\"\"Queries the current measured across the current sense resistor inside the power supply. Returns: The current measured in A. \"\"\" TypePSwithOvpOcpFunctions \u00a4 Bases: TypePS ABC to define the interfaces of a Power Supply with OCP & OVP functions. set_ocp_level ( level ) abstractmethod \u00a4 Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use is_ocp_tripped() to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the clear_ocp() method after the condition that caused the OCP trip is removed. Parameters: Name Type Description Default level int | float The OCP level in A. required Source code in pyinst\\abc.py 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 @abstractmethod def set_ocp_level ( self , level : int | float ) -> None : \"\"\" Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use `is_ocp_tripped()` to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the `clear_ocp()` method after the condition that caused the OCP trip is removed. Args: level: The OCP level in A. \"\"\" get_ocp_level () abstractmethod \u00a4 Returns the overcurrent protection trip level presently programmed. See set_ocp_level() for more details. Returns: Type Description float The OCP level in A. Source code in pyinst\\abc.py 1457 1458 1459 1460 1461 1462 1463 1464 1465 @abstractmethod def get_ocp_level ( self ) -> float : \"\"\"Returns the overcurrent protection trip level presently programmed. See `set_ocp_level()` for more details. Returns: The OCP level in A. \"\"\" enable_ocp ( enable = True ) abstractmethod \u00a4 Enables (or disables) the overcurrent protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1467 1468 1469 1470 1471 1472 1473 1474 @abstractmethod def enable_ocp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overcurrent protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\" disable_ocp () abstractmethod \u00a4 Disables the overcurrent protection function of the power supply. Source code in pyinst\\abc.py 1476 1477 1478 1479 @abstractmethod def disable_ocp ( self ) -> None : \"\"\"Disables the overcurrent protection function of the power supply. \"\"\" is_ocp_enabled () abstractmethod \u00a4 Queries whether the overcurrent protection function of the power supply is enabled. Returns: Type Description bool Whether the OCP function is enabled. Source code in pyinst\\abc.py 1481 1482 1483 1484 1485 1486 1487 1488 @abstractmethod def is_ocp_enabled ( self ) -> bool : \"\"\"Queries whether the overcurrent protection function of the power supply is enabled. Returns: Whether the OCP function is enabled. \"\"\" is_ocp_tripped () abstractmethod \u00a4 Queries if the overcurrent protection circuit is tripped and not cleared. Returns: Type Description bool If the overcurrent protection circuit is tripped and not cleared. Source code in pyinst\\abc.py 1490 1491 1492 1493 1494 1495 1496 1497 @abstractmethod def is_ocp_tripped ( self ) -> bool : \"\"\"Queries if the overcurrent protection circuit is tripped and not cleared. Returns: If the overcurrent protection circuit is tripped and not cleared. \"\"\" clear_ocp () abstractmethod \u00a4 This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\abc.py 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 @abstractmethod def clear_ocp ( self ) -> None : \"\"\"This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note: Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. \"\"\" set_ovp_level ( level ) abstractmethod \u00a4 Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use is_ovp_tripped() to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the clear_ovp() method after the condition that caused the OVP trip is removed. Parameters: Name Type Description Default level int | float The OVP level in V. required Source code in pyinst\\abc.py 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 @abstractmethod def set_ovp_level ( self , level : int | float ) -> None : \"\"\" Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use `is_ovp_tripped()` to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the `clear_ovp()` method after the condition that caused the OVP trip is removed. Args: level: The OVP level in V. \"\"\" get_ovp_level () abstractmethod \u00a4 Returns the overvoltage protection trip level presently programmed. See set_ovp_level() for more details. Returns: Type Description float The OVP level in V. Source code in pyinst\\abc.py 1525 1526 1527 1528 1529 1530 1531 1532 1533 @abstractmethod def get_ovp_level ( self ) -> float : \"\"\"Returns the overvoltage protection trip level presently programmed. See `set_ovp_level()` for more details. Returns: The OVP level in V. \"\"\" enable_ovp ( enable = True ) abstractmethod \u00a4 Enables (or disables) the overvoltage protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1535 1536 1537 1538 1539 1540 1541 1542 @abstractmethod def enable_ovp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overvoltage protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\" disable_ovp () abstractmethod \u00a4 Disables the overvoltage protection function of the power supply. Source code in pyinst\\abc.py 1544 1545 1546 1547 @abstractmethod def disable_ovp ( self ) -> None : \"\"\"Disables the overvoltage protection function of the power supply. \"\"\" is_ovp_enabled () abstractmethod \u00a4 Queries whether the overvoltage protection function of the power supply is enabled. Returns: Type Description bool Whether the OVP function is enabled. Source code in pyinst\\abc.py 1549 1550 1551 1552 1553 1554 1555 1556 @abstractmethod def is_ovp_enabled ( self ) -> bool : \"\"\"Queries whether the overvoltage protection function of the power supply is enabled. Returns: Whether the OVP function is enabled. \"\"\" is_ovp_tripped () abstractmethod \u00a4 Queries if the overvoltage protection circuit is tripped and not cleared. Returns: Type Description bool If the overvoltage protection circuit is tripped and not cleared. Source code in pyinst\\abc.py 1558 1559 1560 1561 1562 1563 1564 1565 @abstractmethod def is_ovp_tripped ( self ) -> bool : \"\"\"Queries if the overvoltage protection circuit is tripped and not cleared. Returns: If the overvoltage protection circuit is tripped and not cleared. \"\"\" clear_ovp () abstractmethod \u00a4 This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\abc.py 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 @abstractmethod def clear_ovp ( self ) -> None : \"\"\"This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note: Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. \"\"\" TypePDLE \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of a PDL Emulator. ins_type = InstrumentType . PDLE class-attribute \u00a4 min_pdl () abstractmethod property \u00a4 The minimum settable PDL value. Source code in pyinst\\abc.py 1585 1586 1587 1588 @property @abstractmethod def min_pdl ( self ) -> float : \"\"\"The minimum settable PDL value.\"\"\" max_pdl () abstractmethod property \u00a4 The maximum settable PDL value. Source code in pyinst\\abc.py 1590 1591 1592 1593 @property @abstractmethod def max_pdl ( self ) -> float : \"\"\"The maximum settable PDL value.\"\"\" get_pdl_value () abstractmethod \u00a4 Returns: Type Description float The PDL setting value in dB. Source code in pyinst\\abc.py 1595 1596 1597 1598 1599 1600 @abstractmethod def get_pdl_value ( self ) -> float : \"\"\" Returns: The PDL setting value in dB. \"\"\" set_pdl_value ( value ) abstractmethod \u00a4 Parameters: Name Type Description Default value int | float The PDL setting value in dB. required Source code in pyinst\\abc.py 1602 1603 1604 1605 1606 1607 @abstractmethod def set_pdl_value ( self , value : int | float ) -> None : \"\"\" Args: value: The PDL setting value in dB. \"\"\" TypePOLC \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of a Polarization Controller/Scrambler. ins_type = InstrumentType . POLC class-attribute \u00a4 start_scrambling ( mode , rate , ** params ) abstractmethod \u00a4 Start scrambling with the specified mode and rate. Parameters: Name Type Description Default mode str Scrambling mode. Valid options depends on specific model. required rate int | float Scrambling rate. Different mode may have different units. required **params Any Additional scrambling params if any. {} Source code in pyinst\\abc.py 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 @abstractmethod def start_scrambling ( self , mode : str , rate : int | float , ** params : Any ) -> None : \"\"\" Start scrambling with the specified mode and rate. Args: mode: Scrambling mode. Valid options depends on specific model. rate: Scrambling rate. Different mode may have different units. **params: Additional scrambling params if any. \"\"\" stop_scrambling () abstractmethod \u00a4 Stop scrambling. Source code in pyinst\\abc.py 1626 1627 1628 @abstractmethod def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" TypePMDE \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of a PMD Emulator. ins_type = InstrumentType . PMDE class-attribute \u00a4 set_pmd_value ( pmd , sopmd ) abstractmethod \u00a4 Set PMD (DGD) and SOPMD (Second Order PMD) target value. Parameters: Name Type Description Default pmd int | float The DGD value in ps. required sopmd int | float The 2nd order pmd in ps**2. required Source code in pyinst\\abc.py 1636 1637 1638 1639 1640 1641 1642 1643 1644 @abstractmethod def set_pmd_value ( self , pmd : int | float , sopmd : int | float ) -> None : \"\"\" Set PMD (DGD) and SOPMD (Second Order PMD) target value. Args: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\" get_pmd_value () abstractmethod \u00a4 Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: Name Type Description pmd float The DGD value in ps. sopmd float The 2nd order pmd in ps**2. Source code in pyinst\\abc.py 1646 1647 1648 1649 1650 1651 1652 1653 1654 @abstractmethod def get_pmd_value ( self ) -> Tuple [ float , float ]: \"\"\" Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\"","title":"Abstract Base Classes"},{"location":"api/abc/#abstract-base-classes","text":"This module provides abstract base classes to describe different kinds of instruments. BaseInstrument is the base class of all the Instrument Model classes. VisaInstrument and RawSerialInstrument are classes based on BaseInstrument to describe VISA compatible instruments and serial-port based instruments. There are many other abstract classes to describe a kind of instrument that has some particular functions. For example, OpticalFrequencySetter defines the interfaces of an instrument which has optical frequency/wavelength setting function. Among these ABCs are Instrument Type classes. An Instrument Type class defines the interfaces of a specific instrument type. It always starts with a prefix Type , for example, TypeVOA or TypeOPM . An Instrument Model class will inherit at least one of these Instrument Type classes, and implement the abstract methods inherited. So the interfaces of the same type of instruments can be unified. Besides the standard methods defined by the Instrument Type class, a Instrument Model class may also define its unique methods.","title":"Abstract Base Classes"},{"location":"api/abc/#pyinst.abc.InstrumentMeta","text":"Bases: ABCMeta The meta class of BaseInstrument.","title":"InstrumentMeta"},{"location":"api/abc/#pyinst.abc.InstrumentMeta.ins_type","text":"The instrument type flag of the specific instrument model. Source code in pyinst\\abc.py 50 51 52 53 54 55 56 @property def ins_type ( cls : type ) -> InstrumentType : \"\"\"The instrument type flag of the specific instrument model.\"\"\" value = 0 for base in cls . mro ()[ 2 :]: value |= getattr ( base , 'ins_type' , 0 ) return value","title":"ins_type()"},{"location":"api/abc/#pyinst.abc.BaseInstrument","text":"ABC of all the instrument model classes. Parameters: Name Type Description Default resource_name str The instrument resource name. Please refer to resource_name property for more information. required Source code in pyinst\\abc.py 117 118 119 120 121 122 123 124 def __init__ ( self , resource_name : str ): \"\"\" Args: resource_name: The instrument resource name. Please refer to `resource_name` property for more information. \"\"\" self . __resource_name = resource_name super ( BaseInstrument , self ) . __init__ ()","title":"BaseInstrument"},{"location":"api/abc/#pyinst.abc.BaseInstrument.brand","text":"The brand/manufactory of the instrument. Source code in pyinst\\abc.py 62 63 64 65 @property @abstractmethod def brand ( self ) -> str : \"\"\"The brand/manufactory of the instrument.\"\"\"","title":"brand()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.model","text":"The model name of the instrument. Source code in pyinst\\abc.py 67 68 69 70 @property @abstractmethod def model ( self ) -> str : \"\"\"The model name of the instrument.\"\"\"","title":"model()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.details","text":"A map of information to describe the instrument. Source code in pyinst\\abc.py 72 73 74 75 76 77 @property def details ( self ) -> Mapping [ str , str ]: \"\"\" A map of information to describe the instrument. \"\"\" return {}","title":"details()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.params","text":"A list of dict to define parameters required for object creation. This is mainly used for upper level (e.g. GUI) to render options. dict fields: name (str) : Required. The name of the param, exactly the same in __init__ method. type (str) : Required. options: int | str | bool . options (list) : Optional. Valid options. min (int) : Optional. For type int only. max (int) : Optional. For type int only. Examples: [ { \"name\" : \"slot\" , \"type\" : \"int\" , \"min\" : 1 , \"max\" : 10 }, { \"name\" : \"range_level\" , \"type\" : \"str\" , \"options\" : [ \"HIGH\" , \"LOW\" ] } ] Source code in pyinst\\abc.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @property def params ( self ) -> List [ dict ]: \"\"\" A list of dict to define parameters required for object creation. This is mainly used for upper level (e.g. GUI) to render options. dict fields: - `name (str)`: Required. The name of the param, exactly the same in `__init__` method. - `type (str)`: Required. options: `int` | `str` | `bool`. - `options (list)`: Optional. Valid options. + `min (int)`: Optional. For type `int` only. + `max (int)`: Optional. For type `int` only. Examples: ``` python [ { \"name\": \"slot\", \"type\": \"int\", \"min\": 1, \"max\": 10 }, { \"name\": \"range_level\", \"type\": \"str\", \"options\": [\"HIGH\", \"LOW\"] } ] ``` \"\"\"","title":"params()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.close","text":"Release the instrument resource. Source code in pyinst\\abc.py 135 136 137 @abstractmethod def close ( self ) -> None : \"\"\"Release the instrument resource.\"\"\"","title":"close()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.resource_name","text":"For VISA compatible instruments, it is the resource name or alias of the VISA resource. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument or USB chip. Source code in pyinst\\abc.py 139 140 141 142 143 144 145 146 147 148 149 @property def resource_name ( self ) -> str : \"\"\" - For VISA compatible instruments, it is the resource name or alias of the VISA resource. - For other instruments connected with serial port, it is the port name. - For other instruments connected with USB, it is the S/N of the instrument or USB chip. \"\"\" return self . __resource_name","title":"resource_name()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.create","text":"Create an instance of the instrument model. If an exception is raised during the instance creation, return None. Parameters: Name Type Description Default *args Any Directly passed to the __init__ method. () **kwargs Any Directly passed to the __init__ method. {} Returns: Type Description Optional [ Self ] The created instrument model instance, or None if the creation failed. Source code in pyinst\\abc.py 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 @classmethod def create ( cls , * args : Any , ** kwargs : Any ) -> Optional [ Self ]: \"\"\"Create an instance of the instrument model. If an exception is raised during the instance creation, return None. Args: *args: Directly passed to the `__init__` method. **kwargs: Directly passed to the `__init__` method. Returns: The created instrument model instance, or None if the creation failed. \"\"\" try : instance = cls ( * args , ** kwargs ) except : instance = None return instance","title":"create()"},{"location":"api/abc/#pyinst.abc.VisaInstrument","text":"Bases: BaseInstrument Base class of VISA compatible instruments that use message based communication. VisaInstrument creates a proxy object with pyvisa to communicate with VISA compatible instruments. Refer to PyVISA Documents for more information. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. VI_READ_TERMINATION write_termination str Write termination character. VI_WRITE_TERMINATION timeout int Timeout in milliseconds for all resource I/O operations. VI_TIMEOUT open_timeout int If the access_mode parameter requests a lock, then this parameter specifies the absolute time period (in milliseconds) that the resource waits to get unlocked before this operation returns an error. VI_OPEN_TIMEOUT query_delay float Delay in seconds between write and read operations. VI_QUERY_DELAY encoding str Encoding used for read and write operations. 'ascii' **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\abc.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 def __init__ ( self , resource_name : str , read_termination : str = VI_READ_TERMINATION , write_termination : str = VI_WRITE_TERMINATION , timeout : int = VI_TIMEOUT , open_timeout : int = VI_OPEN_TIMEOUT , query_delay : float = VI_QUERY_DELAY , encoding : str = \"ascii\" , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. timeout: Timeout in milliseconds for all resource I/O operations. open_timeout: If the access_mode parameter requests a lock, then this parameter specifies the absolute time period (in milliseconds) that the resource waits to get unlocked before this operation returns an error. query_delay: Delay in seconds between write and read operations. encoding: Encoding used for read and write operations. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super () . __init__ ( resource_name = resource_name ) rm = pyvisa . ResourceManager () self . _inst : pyvisa . resources . MessageBasedResource = rm . open_resource ( resource_name , read_termination = read_termination , write_termination = write_termination , open_timeout = open_timeout , timeout = timeout , query_delay = query_delay , encoding = encoding , ** kwargs ) self . _check_communication ()","title":"VisaInstrument"},{"location":"api/abc/#pyinst.abc.VisaInstrument.resource_info","text":"Get the (extended) information of the VISA resource. Source code in pyinst\\abc.py 233 234 235 236 @property def resource_info ( self ) -> pyvisa . highlevel . ResourceInfo : \"\"\"Get the (extended) information of the VISA resource.\"\"\" return self . _inst . resource_info","title":"resource_info()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.idn","text":"Returns a string that uniquely identifies the instrument. Source code in pyinst\\abc.py 238 239 240 241 @property def idn ( self ) -> str : \"\"\"Returns a string that uniquely identifies the instrument.\"\"\" return self . query ( '*IDN?' )","title":"idn()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.opc","text":"Operation complete query. Source code in pyinst\\abc.py 243 244 245 246 @property def opc ( self ) -> str : \"\"\"Operation complete query.\"\"\" return self . query ( '*OPC?' )","title":"opc()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.close","text":"Closes the VISA session and marks the handle as invalid. Source code in pyinst\\abc.py 248 249 250 251 252 def close ( self ) -> None : \"\"\" Closes the VISA session and marks the handle as invalid. \"\"\" self . _inst . close ()","title":"close()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.command","text":"Write a VISA command without read back. Alias of write(message). Parameters: Name Type Description Default message str The message to be sent. required Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 267 268 269 270 271 272 273 274 275 276 277 278 279 def command ( self , message : str ) -> int : \"\"\" Write a VISA command without read back. Alias of write(message). Args: message: The message to be sent. Returns: Number of bytes written. \"\"\" return self . write ( message )","title":"command()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.write","text":"Write a string message to the device. The write_termination is always appended to it. Parameters: Name Type Description Default message str The message to be sent. required termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def write ( self , message : str , termination : Optional [ str ] = None , encoding : Optional [ str ] = None , ) -> int : \"\"\"Write a string message to the device. The write_termination is always appended to it. Args: message: The message to be sent. termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Number of bytes written. \"\"\" return self . _inst . write ( message , termination , encoding )","title":"write()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.read","text":"Read a string from the device. Reading stops when the device stops sending (e.g. by setting appropriate bus lines), or the termination characters sequence was detected. Attention: Only the last character of the termination characters is really used to stop reading, however, the whole sequence is compared to the ending of the read string message. If they don't match, a warning is issued. Parameters: Name Type Description Default termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description str Message read from the instrument and decoded. Source code in pyinst\\abc.py 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 def read ( self , termination : Optional [ str ] = None , encoding : Optional [ str ] = None ) -> str : \"\"\"Read a string from the device. Reading stops when the device stops sending (e.g. by setting appropriate bus lines), or the termination characters sequence was detected. Attention: Only the last character of the termination characters is really used to stop reading, however, the whole sequence is compared to the ending of the read string message. If they don't match, a warning is issued. Args: termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Message read from the instrument and decoded. \"\"\" return self . _inst . read ( termination , encoding )","title":"read()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.query","text":"A combination of write(message) and read() Parameters: Name Type Description Default message str The message to send. required delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None Returns: Type Description str Answer from the device. Source code in pyinst\\abc.py 330 331 332 333 334 335 336 337 338 339 340 341 342 def query ( self , message : str , delay : Optional [ float ] = None ) -> str : \"\"\"A combination of write(message) and read() Args: message: The message to send. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. Returns: Answer from the device. \"\"\" return self . _inst . query ( message , delay )","title":"query()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.read_binary_values","text":"Read values from the device in binary format returning an iterable of values. Parameters: Name Type Description Default datatype pyvisa . util . BINARY_DATATYPES Format string for a single element. See struct module. 'f' by default. 'f' is_big_endian bool Are the data in big or little endian order. Defaults to False. False container Type | Callable [[ Iterable ], Sequence ] Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. list header_fmt pyvisa . util . BINARY_HEADERS Format of the header prefixing the data. Defaults to 'ieee'. 'ieee' expect_termination bool When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. True data_points int Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. 0 chunk_size Optional [ int ] Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. None Returns: Type Description Sequence [ int | float ] Data read from the device. Source code in pyinst\\abc.py 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 def read_binary_values ( self , datatype : pyvisa . util . BINARY_DATATYPES = \"f\" , is_big_endian : bool = False , container : Type | Callable [[ Iterable ], Sequence ] = list , header_fmt : pyvisa . util . BINARY_HEADERS = \"ieee\" , expect_termination : bool = True , data_points : int = 0 , chunk_size : Optional [ int ] = None , ) -> Sequence [ int | float ]: \"\"\"Read values from the device in binary format returning an iterable of values. Args: datatype: Format string for a single element. See struct module. 'f' by default. is_big_endian: Are the data in big or little endian order. Defaults to False. container: Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. header_fmt: Format of the header prefixing the data. Defaults to 'ieee'. expect_termination: When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. data_points: Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. chunk_size: Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. Returns: Data read from the device. \"\"\" return self . _inst . read_binary_values ( datatype , is_big_endian , container , header_fmt , expect_termination , data_points , chunk_size )","title":"read_binary_values()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.query_binary_values","text":"Query the device for values in binary format returning an iterable of values. Parameters: Name Type Description Default message str The message to send. required datatype pyvisa . util . BINARY_DATATYPES Format string for a single element. See struct module. 'f' by default. 'f' is_big_endian bool Are the data in big or little endian order. Defaults to False. False container Type | Callable [[ Iterable ], Sequence ] Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. list delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None header_fmt pyvisa . util . BINARY_HEADERS Format of the header prefixing the data. Defaults to 'ieee'. 'ieee' expect_termination bool When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. True data_points int Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. 0 chunk_size Optional [ int ] Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. None Returns: Type Description Sequence [ int | float ] Data read from the device. Source code in pyinst\\abc.py 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 def query_binary_values ( self , message : str , datatype : pyvisa . util . BINARY_DATATYPES = \"f\" , is_big_endian : bool = False , container : Type | Callable [[ Iterable ], Sequence ] = list , delay : Optional [ float ] = None , header_fmt : pyvisa . util . BINARY_HEADERS = \"ieee\" , expect_termination : bool = True , data_points : int = 0 , chunk_size : Optional [ int ] = None , ) -> Sequence [ int | float ]: \"\"\"Query the device for values in binary format returning an iterable of values. Args: message: The message to send. datatype: Format string for a single element. See struct module. 'f' by default. is_big_endian: Are the data in big or little endian order. Defaults to False. container: Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. header_fmt: Format of the header prefixing the data. Defaults to 'ieee'. expect_termination: When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. data_points: Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. chunk_size: Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. Returns: Data read from the device. \"\"\" return self . _inst . query_binary_values ( message , datatype , is_big_endian , container , delay , header_fmt , expect_termination , data_points , chunk_size )","title":"query_binary_values()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.set_visa_attribute","text":"Set the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Parameters: Name Type Description Default name pyvisa . constants . ResourceAttribute Attribute for which the state is to be modified. required state Any The state of the attribute to be set for the specified object. required Returns: Type Description pyvisa . constants . StatusCode Return value of the library call. Source code in pyinst\\abc.py 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 def set_visa_attribute ( self , name : pyvisa . constants . ResourceAttribute , state : Any ) -> pyvisa . constants . StatusCode : \"\"\"Set the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Args: name: Attribute for which the state is to be modified. state: The state of the attribute to be set for the specified object. Returns: Return value of the library call. \"\"\" return self . _inst . set_visa_attribute ( name , state )","title":"set_visa_attribute()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.get_visa_attribute","text":"Retrieves the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Parameters: Name Type Description Default name pyvisa . constants . ResourceAttribute Resource attribute for which the state query is made. required Returns: Type Description Any The state of the queried attribute for a specified resource. Source code in pyinst\\abc.py 445 446 447 448 449 450 451 452 453 454 455 456 457 def get_visa_attribute ( self , name : pyvisa . constants . ResourceAttribute ) -> Any : \"\"\"Retrieves the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Args: name: Resource attribute for which the state query is made. Returns: The state of the queried attribute for a specified resource. \"\"\" return self . _inst . get_visa_attribute ( name )","title":"get_visa_attribute()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument","text":"Bases: BaseInstrument Instrument based on raw serial communication. Compared to VISA compatible instruments, SerialRawInstrument do not have a common application architecture. It depends on the manufactory. SerialRawInstrument creates a proxy object using pySerial to communicate with instruments. Refer to pySerial Documents for more information. Parameters: Name Type Description Default resource_name str Serial port name. required baudrate int Baud rate such as 9600 or 115200 etc.. required bytesize SerialByteSize Number of data bits. SerialByteSize.EIGHTBITS parity SerialParity Parity checking. SerialParity.NONE stopbits SerialStopBits Number of stop bits. SerialStopBits.ONE read_termination str Read termination character. SERIAL_READ_TERMINATION write_termination str Write termination character. SERIAL_WRITE_TERMINATION read_timeout int Timeout in milliseconds for read operations. SERIAL_READ_TIMEOUT write_timeout int Timeout in milliseconds for write operations. SERIAL_WRITE_TIMEOUT query_delay float Delay in seconds between write and read operations. SERIAL_QUERY_DELAY encoding str Encoding used for read and write operations. 'ascii' Source code in pyinst\\abc.py 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 def __init__ ( self , resource_name : str , baudrate : int , bytesize : SerialByteSize = SerialByteSize . EIGHTBITS , parity : SerialParity = SerialParity . NONE , stopbits : SerialStopBits = SerialStopBits . ONE , read_termination : str = SERIAL_READ_TERMINATION , write_termination : str = SERIAL_WRITE_TERMINATION , read_timeout : int = SERIAL_READ_TIMEOUT , write_timeout : int = SERIAL_WRITE_TIMEOUT , query_delay : float = SERIAL_QUERY_DELAY , encoding : str = \"ascii\" , ** kwargs ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. bytesize: Number of data bits. parity: Parity checking. stopbits: Number of stop bits. read_termination: Read termination character. write_termination: Write termination character. read_timeout: Timeout in milliseconds for read operations. write_timeout: Timeout in milliseconds for write operations. query_delay: Delay in seconds between write and read operations. encoding: Encoding used for read and write operations. \"\"\" __serial = serial . Serial ( port = resource_name , baudrate = baudrate , bytesize = bytesize . value , parity = parity . value , stopbits = stopbits . value , timeout = read_timeout , write_timeout = write_timeout , ) self . __serial = __serial self . __read_termination = read_termination self . __write_termination = write_termination self . __encoding = encoding self . __query_delay = query_delay super () . __init__ ( resource_name = resource_name )","title":"RawSerialInstrument"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.close","text":"Close the serial port immediately. Source code in pyinst\\abc.py 523 524 525 def close ( self ) -> None : \"\"\"Close the serial port immediately.\"\"\" self . __serial . close ()","title":"close()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.command","text":"Write a serial command without read back. Alias of write(message). Parameters: Name Type Description Default message str message to be sent. required Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 527 528 529 530 531 532 533 534 535 536 537 538 539 def command ( self , message : str ) -> int : \"\"\" Write a serial command without read back. Alias of write(message). Args: message: message to be sent. Returns: Number of bytes written. \"\"\" return self . write ( message )","title":"command()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.write","text":"Write a string message to the device. The write_termination is always appended to it. Parameters: Name Type Description Default message str message to be sent. required termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 def write ( self , message : str , termination : Optional [ str ] = None , encoding : Optional [ str ] = None , ) -> int : \"\"\"Write a string message to the device. The write_termination is always appended to it. Args: message: message to be sent. termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Number of bytes written. \"\"\" tx_str = ' {message}{term} ' . format ( message = message , term = termination or self . __write_termination ) tx_bytes = tx_str . encode ( encoding or self . __encoding ) # clear input buffer so the data buffered before command is cleared self . __serial . reset_input_buffer () return self . __serial . write ( tx_bytes )","title":"write()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.read","text":"Read a string from the device. Reading stops when the device stops sending, or the termination characters sequence was detected. Parameters: Name Type Description Default termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description str Message read from the instrument and decoded. Source code in pyinst\\abc.py 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 def read ( self , termination : Optional [ str ] = None , encoding : Optional [ str ] = None ) -> str : \"\"\"Read a string from the device. Reading stops when the device stops sending, or the termination characters sequence was detected. Args: termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Message read from the instrument and decoded. \"\"\" buffer = bytes () term = termination or self . __read_termination encoding = encoding or self . __encoding while True : rx = self . __serial . read () if not rx : raise InstrIOError ( 'Timeout before read_termination received.' ) buffer += rx if buffer . endswith ( term . encode ( encoding )): break return buffer . decode ( encoding ) . rstrip ( term )","title":"read()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.query","text":"A combination of write(message) and read() Parameters: Name Type Description Default message str The message to send. required delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None Returns: Type Description str Answer from the device. Source code in pyinst\\abc.py 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 def query ( self , message : str , delay : Optional [ float ] = None ) -> str : \"\"\"A combination of write(message) and read() Args: message: The message to send. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. Returns: Answer from the device. \"\"\" self . write ( message ) time . sleep ( delay or self . __query_delay ) return self . read ()","title":"query()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter","text":"Bases: ABC Instrument with optical frequency/wavelength setting.","title":"OpticalFrequencySetter"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\abc.py 626 627 628 629 630 @property @abstractmethod def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return LIGHTSPEED / self . max_wavelength","title":"min_frequency()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\abc.py 632 633 634 635 636 @property @abstractmethod def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return LIGHTSPEED / self . min_wavelength","title":"max_frequency()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\abc.py 638 639 640 641 642 @property @abstractmethod def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return LIGHTSPEED / self . max_frequency","title":"min_wavelength()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\abc.py 644 645 646 647 648 @property @abstractmethod def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return LIGHTSPEED / self . min_frequency","title":"max_wavelength()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\abc.py 650 651 652 653 654 655 656 657 658 @abstractmethod def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return round ( LIGHTSPEED / self . get_wavelength (), 6 )","title":"get_frequency()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\abc.py 660 661 662 663 664 665 666 667 668 @abstractmethod def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" wavelength = round ( LIGHTSPEED / frequency , 6 ) self . set_wavelength ( wavelength )","title":"set_frequency()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\abc.py 670 671 672 673 674 675 676 677 @abstractmethod def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return round ( LIGHTSPEED / self . get_frequency (), 6 )","title":"get_wavelength()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\abc.py 679 680 681 682 683 684 685 686 687 @abstractmethod def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" frequency = round ( LIGHTSPEED / wavelength , 6 ) self . set_frequency ( frequency )","title":"set_wavelength()"},{"location":"api/abc/#pyinst.abc.TypeOPM","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Power Meter.","title":"TypeOPM"},{"location":"api/abc/#pyinst.abc.TypeOPM.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypeOPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\abc.py 695 696 697 698 @property @abstractmethod def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\"","title":"min_avg_time()"},{"location":"api/abc/#pyinst.abc.TypeOPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\abc.py 700 701 702 703 @property @abstractmethod def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\"","title":"max_avg_time()"},{"location":"api/abc/#pyinst.abc.TypeOPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\abc.py 705 706 707 708 @property @abstractmethod def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\"","title":"min_pow_cal()"},{"location":"api/abc/#pyinst.abc.TypeOPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\abc.py 710 711 712 713 @property @abstractmethod def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\"","title":"max_pow_cal()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Note It is possible that some OPM models defined the power calibration opposite in sign, but it is normalized in pyinst. Please refer to the math function above. Returns: Type Description float The value of the optical power. Source code in pyinst\\abc.py 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 @abstractmethod def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Note: It is possible that some OPM models defined the power calibration opposite in sign, but it is normalized in pyinst. Please refer to the math function above. Returns: The value of the optical power. \"\"\"","title":"get_power_value()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\abc.py 734 735 736 737 738 739 740 @abstractmethod def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\"","title":"get_power_unit()"},{"location":"api/abc/#pyinst.abc.TypeOPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\abc.py 742 743 744 745 746 747 748 @abstractmethod def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\"","title":"set_power_unit()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_power","text":"Queries the measured optical power value and unit. Returns: Name Type Description value float The value of the optical power. unit OpticalPowerUnit The unit of the optical power. Source code in pyinst\\abc.py 750 751 752 753 754 755 756 757 def get_power ( self ) -> Tuple [ float , OpticalPowerUnit ]: \"\"\"Queries the measured optical power value and unit. Returns: value: The value of the optical power. unit: The unit of the optical power. \"\"\" return self . get_power_value (), self . get_power_unit ()","title":"get_power()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_dbm_value","text":"Returns the optical power value measured in dBm. If the power unit setting is W, a math conversion will be performed. Returns: Type Description float The value of the optical power in dBm. Source code in pyinst\\abc.py 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 def get_dbm_value ( self ) -> float : \"\"\"Returns the optical power value measured in dBm. If the power unit setting is W, a math conversion will be performed. Returns: The value of the optical power in dBm. \"\"\" unit = self . get_power_unit () value = self . get_power_value () if unit == OpticalPowerUnit . DBM : return value else : return w_to_dbm ( value )","title":"get_dbm_value()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_w_value","text":"Returns the optical power value measured in W. If the power unit setting is dBm, a math conversion will be performed. Returns: Type Description float The value of the optical power in W. Source code in pyinst\\abc.py 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 def get_w_value ( self ) -> float : \"\"\"Returns the optical power value measured in W. If the power unit setting is dBm, a math conversion will be performed. Returns: The value of the optical power in W. \"\"\" unit = self . get_power_unit () value = self . get_power_value () if unit == OpticalPowerUnit . W : return value else : return dbm_to_w ( value )","title":"get_w_value()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_pow_cal","text":"Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\abc.py 791 792 793 794 795 796 797 798 @abstractmethod def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\"","title":"get_pow_cal()"},{"location":"api/abc/#pyinst.abc.TypeOPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\abc.py 800 801 802 803 804 805 806 807 @abstractmethod def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\"","title":"set_pow_cal()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\abc.py 809 810 811 812 813 814 815 816 @abstractmethod def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\"","title":"get_avg_time()"},{"location":"api/abc/#pyinst.abc.TypeOPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\abc.py 818 819 820 821 822 823 824 825 @abstractmethod def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\"","title":"set_avg_time()"},{"location":"api/abc/#pyinst.abc.TypeVOA","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of a Variable Optical Attenuator.","title":"TypeVOA"},{"location":"api/abc/#pyinst.abc.TypeVOA.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypeVOA.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\abc.py 835 836 837 838 839 840 841 842 @property @abstractmethod def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\"","title":"min_att()"},{"location":"api/abc/#pyinst.abc.TypeVOA.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\abc.py 844 845 846 847 848 849 850 851 @property @abstractmethod def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\"","title":"max_att()"},{"location":"api/abc/#pyinst.abc.TypeVOA.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\abc.py 853 854 855 856 @property @abstractmethod def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\"","title":"min_att_offset()"},{"location":"api/abc/#pyinst.abc.TypeVOA.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\abc.py 858 859 860 861 @property @abstractmethod def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\"","title":"max_att_offset()"},{"location":"api/abc/#pyinst.abc.TypeVOA.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 863 864 865 866 867 868 869 870 @abstractmethod def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\"","title":"enable()"},{"location":"api/abc/#pyinst.abc.TypeVOA.disable","text":"Disable the optical output. Source code in pyinst\\abc.py 872 873 874 @abstractmethod def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\"","title":"disable()"},{"location":"api/abc/#pyinst.abc.TypeVOA.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\abc.py 876 877 878 879 880 881 @abstractmethod def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\"","title":"is_enabled()"},{"location":"api/abc/#pyinst.abc.TypeVOA.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Note It is possible that some VOA models defined the attenuation offset opposite in sign. But it is normalized in pyinst to align with the math function above. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\abc.py 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 @abstractmethod def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Note: It is possible that some VOA models defined the attenuation offset opposite in sign. But it is normalized in pyinst to align with the math function above. Returns: The attenuation value in dB. \"\"\"","title":"get_att()"},{"location":"api/abc/#pyinst.abc.TypeVOA.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\abc.py 904 905 906 907 908 909 910 911 912 913 914 @abstractmethod def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\"","title":"set_att()"},{"location":"api/abc/#pyinst.abc.TypeVOA.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\abc.py 916 917 918 919 920 921 922 923 @abstractmethod def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\"","title":"get_att_offset()"},{"location":"api/abc/#pyinst.abc.TypeVOA.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\abc.py 925 926 927 928 929 930 931 932 @abstractmethod def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\"","title":"set_att_offset()"},{"location":"api/abc/#pyinst.abc.TypeOMA","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Modulation Analyzer. The operating logic is different between vendors/models, so limited methods are defined here.","title":"TypeOMA"},{"location":"api/abc/#pyinst.abc.TypeOMA.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypeOMA.run","text":"Run (or stop) OMA. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 944 945 946 947 948 949 950 951 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Run (or stop) OMA. Args: _run: True = run, False = stop. \"\"\"","title":"run()"},{"location":"api/abc/#pyinst.abc.TypeOMA.stop","text":"Stop OMA. Source code in pyinst\\abc.py 953 954 955 @abstractmethod def stop ( self ) -> None : \"\"\"Stop OMA.\"\"\"","title":"stop()"},{"location":"api/abc/#pyinst.abc.TypeOSA","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Spectrum Analyzer. The operating logic is different between vendors/models, so no common methods are defined here.","title":"TypeOSA"},{"location":"api/abc/#pyinst.abc.TypeOSA.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypeOSA.run","text":"Start repeat sweep. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 967 968 969 970 971 972 973 974 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Start repeat sweep. Args: _run: True = run, False = stop. \"\"\"","title":"run()"},{"location":"api/abc/#pyinst.abc.TypeOSA.stop","text":"Stop sweep. Source code in pyinst\\abc.py 976 977 978 @abstractmethod def stop ( self ) -> None : \"\"\"Stop sweep.\"\"\"","title":"stop()"},{"location":"api/abc/#pyinst.abc.TypeOSA.single","text":"Perform single sweep. Source code in pyinst\\abc.py 980 981 982 @abstractmethod def single ( self ) -> None : \"\"\"Perform single sweep.\"\"\"","title":"single()"},{"location":"api/abc/#pyinst.abc.TypeOSA.get_osnr","text":"Get the measured OSNR in dB. Returns: Type Description float The OSNR value in dB. Source code in pyinst\\abc.py 984 985 986 987 988 989 990 @abstractmethod def get_osnr ( self ) -> float : \"\"\"Get the measured OSNR in dB. Returns: The OSNR value in dB. \"\"\"","title":"get_osnr()"},{"location":"api/abc/#pyinst.abc.TypeWM","text":"Bases: ABC ABC to define the interfaces of an Optical Wavelength Meter.","title":"TypeWM"},{"location":"api/abc/#pyinst.abc.TypeWM.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypeWM.get_frequency","text":"Queries the measured optical frequency in THz. Returns: Type Description float The measured optical frequency value. Source code in pyinst\\abc.py 1000 1001 1002 1003 1004 1005 1006 1007 1008 @abstractmethod def get_frequency ( self ) -> float : \"\"\" Queries the measured optical frequency in THz. Returns: The measured optical frequency value. \"\"\" return round ( LIGHTSPEED / self . get_wavelength (), 6 )","title":"get_frequency()"},{"location":"api/abc/#pyinst.abc.TypeWM.get_wavelength","text":"Queries the mearured optical wavelength in nm. Returns: Type Description float The measured optical wavelength value. Source code in pyinst\\abc.py 1010 1011 1012 1013 1014 1015 1016 1017 @abstractmethod def get_wavelength ( self ) -> float : \"\"\"Queries the mearured optical wavelength in nm. Returns: The measured optical wavelength value. \"\"\" return round ( LIGHTSPEED / self . get_frequency (), 6 )","title":"get_wavelength()"},{"location":"api/abc/#pyinst.abc.TypeWM.run","text":"Start repeat measurement. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 1019 1020 1021 1022 1023 1024 1025 1026 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Start repeat measurement. Args: _run: True = run, False = stop. \"\"\"","title":"run()"},{"location":"api/abc/#pyinst.abc.TypeWM.stop","text":"Stop repeat measurement. Source code in pyinst\\abc.py 1028 1029 1030 @abstractmethod def stop ( self ) -> None : \"\"\"Stop repeat measurement.\"\"\"","title":"stop()"},{"location":"api/abc/#pyinst.abc.TypeWM.single","text":"Perform single measurement. Source code in pyinst\\abc.py 1032 1033 1034 @abstractmethod def single ( self ) -> None : \"\"\"Perform single measurement.\"\"\"","title":"single()"},{"location":"api/abc/#pyinst.abc.TypeWM.is_running","text":"Get the measurement state of the wavemeter. Returns: Type Description bool True = reapeat measurement, False = stopped. Source code in pyinst\\abc.py 1036 1037 1038 1039 1040 1041 1042 1043 @abstractmethod def is_running ( self ) -> bool : \"\"\" Get the measurement state of the wavemeter. Returns: True = reapeat measurement, False = stopped. \"\"\"","title":"is_running()"},{"location":"api/abc/#pyinst.abc.TypeOTF","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Tunable Filter.","title":"TypeOTF"},{"location":"api/abc/#pyinst.abc.TypeOTF.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypeOTF.min_bandwidth_in_nm","text":"The minimum bandwidth in nm. Source code in pyinst\\abc.py 1051 1052 1053 1054 1055 @property @abstractmethod def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" return bw_in_ghz_to_nm ( self . min_bandwidth_in_ghz , self . get_frequency ())","title":"min_bandwidth_in_nm()"},{"location":"api/abc/#pyinst.abc.TypeOTF.max_bandwidth_in_nm","text":"The maximum bandwidth in nm. Source code in pyinst\\abc.py 1057 1058 1059 1060 1061 @property @abstractmethod def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" return bw_in_ghz_to_nm ( self . max_bandwidth_in_ghz , self . get_frequency ())","title":"max_bandwidth_in_nm()"},{"location":"api/abc/#pyinst.abc.TypeOTF.min_bandwidth_in_ghz","text":"The minimum bandwidth in GHz. Source code in pyinst\\abc.py 1063 1064 1065 1066 1067 @property @abstractmethod def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return bw_in_nm_to_ghz ( self . min_bandwidth_in_nm , self . get_wavelength ())","title":"min_bandwidth_in_ghz()"},{"location":"api/abc/#pyinst.abc.TypeOTF.max_bandwidth_in_ghz","text":"The maximum bandwidth in GHz. Source code in pyinst\\abc.py 1069 1070 1071 1072 1073 @property @abstractmethod def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return bw_in_nm_to_ghz ( self . max_bandwidth_in_nm , self . get_wavelength ())","title":"max_bandwidth_in_ghz()"},{"location":"api/abc/#pyinst.abc.TypeOTF.get_bandwidth","text":"Get the filter bandwidth value in specified unit. Parameters: Name Type Description Default unit OpticalBandwidthUnit The unit for the bandwidth value. required Returns: Type Description float The bandwidth value in specified unit. Source code in pyinst\\abc.py 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 def get_bandwidth ( self , unit : OpticalBandwidthUnit ) -> float : \"\"\" Get the filter bandwidth value in specified unit. Args: unit: The unit for the bandwidth value. Returns: The bandwidth value in specified unit. \"\"\" unit = OpticalBandwidthUnit ( unit ) if unit == OpticalBandwidthUnit . GHZ : return self . get_bandwidth_in_ghz () else : return self . get_bandwidth_in_nm ()","title":"get_bandwidth()"},{"location":"api/abc/#pyinst.abc.TypeOTF.set_bandwidth","text":"Set the filter bandwidth in specified unit. Parameters: Name Type Description Default value int | float The bandwidth value in specified unit. required unit OpticalBandwidthUnit The unit of the bandwidth value. required Source code in pyinst\\abc.py 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 def set_bandwidth ( self , value : int | float , unit : OpticalBandwidthUnit ) -> None : \"\"\" Set the filter bandwidth in specified unit. Args: value: The bandwidth value in specified unit. unit: The unit of the bandwidth value. \"\"\" unit = OpticalBandwidthUnit ( unit ) if unit == OpticalBandwidthUnit . GHZ : return self . set_bandwidth_in_ghz ( value ) else : return self . set_bandwidth_in_nm ( value )","title":"set_bandwidth()"},{"location":"api/abc/#pyinst.abc.TypeOTF.get_bandwidth_in_nm","text":"Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\abc.py 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 @abstractmethod def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" bw_ghz = self . get_bandwidth_in_ghz () return round ( bw_in_ghz_to_nm ( bw_ghz , self . get_frequency ()), 6 )","title":"get_bandwidth_in_nm()"},{"location":"api/abc/#pyinst.abc.TypeOTF.set_bandwidth_in_nm","text":"Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\abc.py 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 @abstractmethod def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" bw_ghz = round ( bw_in_nm_to_ghz ( value , self . get_wavelength ()), 6 ) self . set_bandwidth_in_ghz ( bw_ghz )","title":"set_bandwidth_in_nm()"},{"location":"api/abc/#pyinst.abc.TypeOTF.get_bandwidth_in_ghz","text":"Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\abc.py 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 @abstractmethod def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" bw_nm = self . get_bandwidth_in_nm () return round ( bw_in_nm_to_ghz ( bw_nm , self . get_wavelength ()), 6 )","title":"get_bandwidth_in_ghz()"},{"location":"api/abc/#pyinst.abc.TypeOTF.set_bandwidth_in_ghz","text":"Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\abc.py 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 @abstractmethod def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" bw_nm = round ( bw_in_ghz_to_nm ( value , self . get_frequency ()), 6 ) self . set_bandwidth_in_nm ( bw_nm )","title":"set_bandwidth_in_ghz()"},{"location":"api/abc/#pyinst.abc.TypeTS","text":"Bases: ABC ABC to define the interfaces of a Temperature Source. A temperature source is an instrument that has the ability to control environment temperature, including chamber, TEC (Thermo Electric Cooler), thermo-stream, and so on. Each TypeTS class has a ts_type property to indicate the type of the thermostream. It is a member of TemperatureSourceType enum.","title":"TypeTS"},{"location":"api/abc/#pyinst.abc.TypeTS.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypeTS.ts_type","text":"The type of the temperature source. Source code in pyinst\\abc.py 1163 1164 1165 1166 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The type of the temperature source.\"\"\" return TemperatureSourceType . UNDEFINED","title":"ts_type()"},{"location":"api/abc/#pyinst.abc.TypeTS.set_target_temp","text":"Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\abc.py 1168 1169 1170 1171 1172 1173 1174 1175 @abstractmethod def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\"","title":"set_target_temp()"},{"location":"api/abc/#pyinst.abc.TypeTS.get_target_temp","text":"Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\abc.py 1177 1178 1179 1180 1181 1182 1183 1184 @abstractmethod def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\"","title":"get_target_temp()"},{"location":"api/abc/#pyinst.abc.TypeTS.get_current_temp","text":"Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\abc.py 1186 1187 1188 1189 1190 1191 1192 1193 @abstractmethod def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\"","title":"get_current_temp()"},{"location":"api/abc/#pyinst.abc.TypeTS.set_temp_unit","text":"Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\abc.py 1195 1196 1197 1198 1199 1200 1201 1202 @abstractmethod def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\"","title":"set_temp_unit()"},{"location":"api/abc/#pyinst.abc.TypeTS.get_temp_unit","text":"Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\abc.py 1204 1205 1206 1207 1208 1209 1210 1211 @abstractmethod def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\"","title":"get_temp_unit()"},{"location":"api/abc/#pyinst.abc.TypeSW","text":"Bases: ABC ABC to define the interfaces of an Optical Switch.","title":"TypeSW"},{"location":"api/abc/#pyinst.abc.TypeSW.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypeSW.set_channel","text":"Switch to the specified channel route. Parameters: Name Type Description Default channel int The channel number. required Source code in pyinst\\abc.py 1219 1220 1221 1222 1223 1224 1225 1226 @abstractmethod def set_channel ( self , channel : int ) -> None : \"\"\" Switch to the specified channel route. Args: channel: The channel number. \"\"\"","title":"set_channel()"},{"location":"api/abc/#pyinst.abc.TypeSW.get_channel","text":"Queries the current channel route of the switch. Returns: Type Description int The channel number of current route. Source code in pyinst\\abc.py 1228 1229 1230 1231 1232 1233 1234 1235 @abstractmethod def get_channel ( self ) -> int : \"\"\" Queries the current channel route of the switch. Returns: The channel number of current route. \"\"\"","title":"get_channel()"},{"location":"api/abc/#pyinst.abc.TypeMSW","text":"Bases: ABC ABC to define the interfaces of an Optical Matrix Switch.","title":"TypeMSW"},{"location":"api/abc/#pyinst.abc.TypeMSW.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypeMSW.connect","text":"Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use check to confirm whether either port is already in use. Parameters: Name Type Description Default port1 int The valid port at one end of the path. required port2 int The valid port at the other end of the path. required enable bool Whether to enable the connection. True Source code in pyinst\\abc.py 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 @abstractmethod def connect ( self , port1 : int , port2 : int , enable : bool = True ) -> None : \"\"\" Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use `check` to confirm whether either port is already in use. Args: port1: The valid port at one end of the path. port2: The valid port at the other end of the path. enable: Whether to enable the connection. \"\"\"","title":"connect()"},{"location":"api/abc/#pyinst.abc.TypeMSW.connected_with","text":"Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Parameters: Name Type Description Default port int The port number to check connection information. required Returns: Type Description Optional [ int ] Connection information for the specified port. Optional [ int ] None = No connection exists. Optional [ int ] Optional [ int ] int N = Port number at other end of the connection. Source code in pyinst\\abc.py 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 @abstractmethod def connected_with ( self , port : int ) -> Optional [ int ]: \"\"\" Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Args: port: The port number to check connection information. Returns: Connection information for the specified port. None = No connection exists. int N = Port number at other end of the connection. \"\"\"","title":"connected_with()"},{"location":"api/abc/#pyinst.abc.TypeMSW.clear","text":"Clears a configured optical connection connected to the specified port. Parameters: Name Type Description Default port int The port at either end of the configured connection. required Source code in pyinst\\abc.py 1278 1279 1280 1281 1282 1283 1284 1285 @abstractmethod def clear ( self , port : int ) -> None : \"\"\" Clears a configured optical connection connected to the specified port. Args: port: The port at either end of the configured connection. \"\"\"","title":"clear()"},{"location":"api/abc/#pyinst.abc.TypeMSW.clear_all","text":"Clears all configured optical connections. Source code in pyinst\\abc.py 1287 1288 1289 @abstractmethod def clear_all ( self ) -> None : \"\"\"Clears all configured optical connections.\"\"\"","title":"clear_all()"},{"location":"api/abc/#pyinst.abc.TypeMSW.check","text":"To check if port1 and port2 are both not in use. Parameters: Name Type Description Default port1 int The port at one end of the path. required port2 int The port at the other end of the path. required Returns: Type Description bool True = Both ports available (not in use). bool False = Conflict; one or both ports already in use. Source code in pyinst\\abc.py 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 @abstractmethod def check ( self , port1 : int , port2 : int ) -> bool : \"\"\" To check if port1 and port2 are both not in use. Args: port1: The port at one end of the path. port2: The port at the other end of the path. Returns: True = Both ports available (not in use). False = Conflict; one or both ports already in use. \"\"\"","title":"check()"},{"location":"api/abc/#pyinst.abc.TypeMSW.enable","text":"Sets the connection state of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required enable bool True = Enable | False = Disable. True Source code in pyinst\\abc.py 1306 1307 1308 1309 1310 1311 1312 1313 1314 @abstractmethod def enable ( self , port : int , enable : bool = True ) -> None : \"\"\" Sets the connection state of a configured optical connection. Args: port: The port at either end of the connection. enable: True = Enable | False = Disable. \"\"\"","title":"enable()"},{"location":"api/abc/#pyinst.abc.TypeMSW.disable","text":"Disable the connection of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required Source code in pyinst\\abc.py 1316 1317 1318 1319 1320 1321 1322 1323 @abstractmethod def disable ( self , port : int ) -> None : \"\"\" Disable the connection of a configured optical connection. Args: port: The port at either end of the connection. \"\"\"","title":"disable()"},{"location":"api/abc/#pyinst.abc.TypeMSW.is_enabled","text":"Returns the connection state of a configured optical connection. Returns: Type Description bool True = Enabled | False = Disabled Source code in pyinst\\abc.py 1325 1326 1327 1328 1329 1330 1331 1332 @abstractmethod def is_enabled ( self , port : int ) -> bool : \"\"\" Returns the connection state of a configured optical connection. Returns: True = Enabled | False = Disabled \"\"\"","title":"is_enabled()"},{"location":"api/abc/#pyinst.abc.TypePS","text":"Bases: ABC ABC to define the interfaces of a Power Supply.","title":"TypePS"},{"location":"api/abc/#pyinst.abc.TypePS.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypePS.min_voltage","text":"The minimum programmable voltage level in V. Source code in pyinst\\abc.py 1340 1341 1342 1343 @property @abstractmethod def min_voltage ( self ) -> float : \"\"\"The minimum programmable voltage level in V.\"\"\"","title":"min_voltage()"},{"location":"api/abc/#pyinst.abc.TypePS.max_voltage","text":"The maximum programmable voltage level in V. Source code in pyinst\\abc.py 1345 1346 1347 1348 @property @abstractmethod def max_voltage ( self ) -> float : \"\"\"The maximum programmable voltage level in V.\"\"\"","title":"max_voltage()"},{"location":"api/abc/#pyinst.abc.TypePS.min_current","text":"The minimum programmable current level in A. Source code in pyinst\\abc.py 1350 1351 1352 1353 @property @abstractmethod def min_current ( self ) -> float : \"\"\"The minimum programmable current level in A.\"\"\"","title":"min_current()"},{"location":"api/abc/#pyinst.abc.TypePS.max_current","text":"The maximum programmable current level in A. Source code in pyinst\\abc.py 1355 1356 1357 1358 @property @abstractmethod def max_current ( self ) -> float : \"\"\"The maximum programmable current level in A.\"\"\"","title":"max_current()"},{"location":"api/abc/#pyinst.abc.TypePS.enable","text":"Enables (or disables) the outputs of the power supply. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1360 1361 1362 1363 1364 1365 1366 1367 @abstractmethod def enable ( self , en : bool = True ) -> None : \"\"\" Enables (or disables) the outputs of the power supply. Args: en: `True` = Enable, `False` = Disable. \"\"\"","title":"enable()"},{"location":"api/abc/#pyinst.abc.TypePS.disable","text":"Disables the output of the power supply. Source code in pyinst\\abc.py 1369 1370 1371 @abstractmethod def disable ( self ) -> None : \"\"\"Disables the output of the power supply.\"\"\"","title":"disable()"},{"location":"api/abc/#pyinst.abc.TypePS.is_enabled","text":"Queries whether the output of the power supply is enabled. Returns: Type Description bool True = Enabled, False = Disabled Source code in pyinst\\abc.py 1373 1374 1375 1376 1377 1378 1379 1380 @abstractmethod def is_enabled ( self ) -> bool : \"\"\" Queries whether the output of the power supply is enabled. Returns: `True` = Enabled, `False` = Disabled \"\"\"","title":"is_enabled()"},{"location":"api/abc/#pyinst.abc.TypePS.set_voltage_limit","text":"Sets the immediate voltage level of the power supply. Parameters: Name Type Description Default value int | float The voltage level in V. required Source code in pyinst\\abc.py 1382 1383 1384 1385 1386 1387 1388 1389 @abstractmethod def set_voltage_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate voltage level of the power supply. Args: value: The voltage level in V. \"\"\"","title":"set_voltage_limit()"},{"location":"api/abc/#pyinst.abc.TypePS.get_voltage_limit","text":"Queries the immediate voltage level of the power supply. Returns: Type Description float The voltage level in V. Source code in pyinst\\abc.py 1391 1392 1393 1394 1395 1396 1397 1398 @abstractmethod def get_voltage_limit ( self ) -> float : \"\"\" Queries the immediate voltage level of the power supply. Returns: The voltage level in V. \"\"\"","title":"get_voltage_limit()"},{"location":"api/abc/#pyinst.abc.TypePS.measure_voltage","text":"Queries the voltage measured at the sense terminals of the power supply. Returns: Type Description float The voltage measured in V. Source code in pyinst\\abc.py 1400 1401 1402 1403 1404 1405 1406 1407 @abstractmethod def measure_voltage ( self ) -> float : \"\"\"Queries the voltage measured at the sense terminals of the power supply. Returns: The voltage measured in V. \"\"\"","title":"measure_voltage()"},{"location":"api/abc/#pyinst.abc.TypePS.set_current_limit","text":"Sets the immediate current level of the power supply. Parameters: Name Type Description Default value int | float The current level in A. required Source code in pyinst\\abc.py 1409 1410 1411 1412 1413 1414 1415 1416 @abstractmethod def set_current_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate current level of the power supply. Args: value: The current level in A. \"\"\"","title":"set_current_limit()"},{"location":"api/abc/#pyinst.abc.TypePS.get_current_limit","text":"Queries the immediate current level of the power supply. Returns: Type Description float The current level in A. Source code in pyinst\\abc.py 1418 1419 1420 1421 1422 1423 1424 1425 @abstractmethod def get_current_limit ( self ) -> float : \"\"\" Queries the immediate current level of the power supply. Returns: The current level in A. \"\"\"","title":"get_current_limit()"},{"location":"api/abc/#pyinst.abc.TypePS.measure_current","text":"Queries the current measured across the current sense resistor inside the power supply. Returns: Type Description float The current measured in A. Source code in pyinst\\abc.py 1427 1428 1429 1430 1431 1432 1433 1434 @abstractmethod def measure_current ( self ) -> float : \"\"\"Queries the current measured across the current sense resistor inside the power supply. Returns: The current measured in A. \"\"\"","title":"measure_current()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions","text":"Bases: TypePS ABC to define the interfaces of a Power Supply with OCP & OVP functions.","title":"TypePSwithOvpOcpFunctions"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.set_ocp_level","text":"Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use is_ocp_tripped() to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the clear_ocp() method after the condition that caused the OCP trip is removed. Parameters: Name Type Description Default level int | float The OCP level in A. required Source code in pyinst\\abc.py 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 @abstractmethod def set_ocp_level ( self , level : int | float ) -> None : \"\"\" Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use `is_ocp_tripped()` to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the `clear_ocp()` method after the condition that caused the OCP trip is removed. Args: level: The OCP level in A. \"\"\"","title":"set_ocp_level()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.get_ocp_level","text":"Returns the overcurrent protection trip level presently programmed. See set_ocp_level() for more details. Returns: Type Description float The OCP level in A. Source code in pyinst\\abc.py 1457 1458 1459 1460 1461 1462 1463 1464 1465 @abstractmethod def get_ocp_level ( self ) -> float : \"\"\"Returns the overcurrent protection trip level presently programmed. See `set_ocp_level()` for more details. Returns: The OCP level in A. \"\"\"","title":"get_ocp_level()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.enable_ocp","text":"Enables (or disables) the overcurrent protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1467 1468 1469 1470 1471 1472 1473 1474 @abstractmethod def enable_ocp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overcurrent protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\"","title":"enable_ocp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.disable_ocp","text":"Disables the overcurrent protection function of the power supply. Source code in pyinst\\abc.py 1476 1477 1478 1479 @abstractmethod def disable_ocp ( self ) -> None : \"\"\"Disables the overcurrent protection function of the power supply. \"\"\"","title":"disable_ocp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.is_ocp_enabled","text":"Queries whether the overcurrent protection function of the power supply is enabled. Returns: Type Description bool Whether the OCP function is enabled. Source code in pyinst\\abc.py 1481 1482 1483 1484 1485 1486 1487 1488 @abstractmethod def is_ocp_enabled ( self ) -> bool : \"\"\"Queries whether the overcurrent protection function of the power supply is enabled. Returns: Whether the OCP function is enabled. \"\"\"","title":"is_ocp_enabled()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.is_ocp_tripped","text":"Queries if the overcurrent protection circuit is tripped and not cleared. Returns: Type Description bool If the overcurrent protection circuit is tripped and not cleared. Source code in pyinst\\abc.py 1490 1491 1492 1493 1494 1495 1496 1497 @abstractmethod def is_ocp_tripped ( self ) -> bool : \"\"\"Queries if the overcurrent protection circuit is tripped and not cleared. Returns: If the overcurrent protection circuit is tripped and not cleared. \"\"\"","title":"is_ocp_tripped()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.clear_ocp","text":"This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\abc.py 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 @abstractmethod def clear_ocp ( self ) -> None : \"\"\"This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note: Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. \"\"\"","title":"clear_ocp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.set_ovp_level","text":"Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use is_ovp_tripped() to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the clear_ovp() method after the condition that caused the OVP trip is removed. Parameters: Name Type Description Default level int | float The OVP level in V. required Source code in pyinst\\abc.py 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 @abstractmethod def set_ovp_level ( self , level : int | float ) -> None : \"\"\" Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use `is_ovp_tripped()` to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the `clear_ovp()` method after the condition that caused the OVP trip is removed. Args: level: The OVP level in V. \"\"\"","title":"set_ovp_level()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.get_ovp_level","text":"Returns the overvoltage protection trip level presently programmed. See set_ovp_level() for more details. Returns: Type Description float The OVP level in V. Source code in pyinst\\abc.py 1525 1526 1527 1528 1529 1530 1531 1532 1533 @abstractmethod def get_ovp_level ( self ) -> float : \"\"\"Returns the overvoltage protection trip level presently programmed. See `set_ovp_level()` for more details. Returns: The OVP level in V. \"\"\"","title":"get_ovp_level()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.enable_ovp","text":"Enables (or disables) the overvoltage protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1535 1536 1537 1538 1539 1540 1541 1542 @abstractmethod def enable_ovp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overvoltage protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\"","title":"enable_ovp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.disable_ovp","text":"Disables the overvoltage protection function of the power supply. Source code in pyinst\\abc.py 1544 1545 1546 1547 @abstractmethod def disable_ovp ( self ) -> None : \"\"\"Disables the overvoltage protection function of the power supply. \"\"\"","title":"disable_ovp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.is_ovp_enabled","text":"Queries whether the overvoltage protection function of the power supply is enabled. Returns: Type Description bool Whether the OVP function is enabled. Source code in pyinst\\abc.py 1549 1550 1551 1552 1553 1554 1555 1556 @abstractmethod def is_ovp_enabled ( self ) -> bool : \"\"\"Queries whether the overvoltage protection function of the power supply is enabled. Returns: Whether the OVP function is enabled. \"\"\"","title":"is_ovp_enabled()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.is_ovp_tripped","text":"Queries if the overvoltage protection circuit is tripped and not cleared. Returns: Type Description bool If the overvoltage protection circuit is tripped and not cleared. Source code in pyinst\\abc.py 1558 1559 1560 1561 1562 1563 1564 1565 @abstractmethod def is_ovp_tripped ( self ) -> bool : \"\"\"Queries if the overvoltage protection circuit is tripped and not cleared. Returns: If the overvoltage protection circuit is tripped and not cleared. \"\"\"","title":"is_ovp_tripped()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.clear_ovp","text":"This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\abc.py 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 @abstractmethod def clear_ovp ( self ) -> None : \"\"\"This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note: Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. \"\"\"","title":"clear_ovp()"},{"location":"api/abc/#pyinst.abc.TypePDLE","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of a PDL Emulator.","title":"TypePDLE"},{"location":"api/abc/#pyinst.abc.TypePDLE.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypePDLE.min_pdl","text":"The minimum settable PDL value. Source code in pyinst\\abc.py 1585 1586 1587 1588 @property @abstractmethod def min_pdl ( self ) -> float : \"\"\"The minimum settable PDL value.\"\"\"","title":"min_pdl()"},{"location":"api/abc/#pyinst.abc.TypePDLE.max_pdl","text":"The maximum settable PDL value. Source code in pyinst\\abc.py 1590 1591 1592 1593 @property @abstractmethod def max_pdl ( self ) -> float : \"\"\"The maximum settable PDL value.\"\"\"","title":"max_pdl()"},{"location":"api/abc/#pyinst.abc.TypePDLE.get_pdl_value","text":"Returns: Type Description float The PDL setting value in dB. Source code in pyinst\\abc.py 1595 1596 1597 1598 1599 1600 @abstractmethod def get_pdl_value ( self ) -> float : \"\"\" Returns: The PDL setting value in dB. \"\"\"","title":"get_pdl_value()"},{"location":"api/abc/#pyinst.abc.TypePDLE.set_pdl_value","text":"Parameters: Name Type Description Default value int | float The PDL setting value in dB. required Source code in pyinst\\abc.py 1602 1603 1604 1605 1606 1607 @abstractmethod def set_pdl_value ( self , value : int | float ) -> None : \"\"\" Args: value: The PDL setting value in dB. \"\"\"","title":"set_pdl_value()"},{"location":"api/abc/#pyinst.abc.TypePOLC","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of a Polarization Controller/Scrambler.","title":"TypePOLC"},{"location":"api/abc/#pyinst.abc.TypePOLC.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypePOLC.start_scrambling","text":"Start scrambling with the specified mode and rate. Parameters: Name Type Description Default mode str Scrambling mode. Valid options depends on specific model. required rate int | float Scrambling rate. Different mode may have different units. required **params Any Additional scrambling params if any. {} Source code in pyinst\\abc.py 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 @abstractmethod def start_scrambling ( self , mode : str , rate : int | float , ** params : Any ) -> None : \"\"\" Start scrambling with the specified mode and rate. Args: mode: Scrambling mode. Valid options depends on specific model. rate: Scrambling rate. Different mode may have different units. **params: Additional scrambling params if any. \"\"\"","title":"start_scrambling()"},{"location":"api/abc/#pyinst.abc.TypePOLC.stop_scrambling","text":"Stop scrambling. Source code in pyinst\\abc.py 1626 1627 1628 @abstractmethod def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\"","title":"stop_scrambling()"},{"location":"api/abc/#pyinst.abc.TypePMDE","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of a PMD Emulator.","title":"TypePMDE"},{"location":"api/abc/#pyinst.abc.TypePMDE.ins_type","text":"","title":"ins_type"},{"location":"api/abc/#pyinst.abc.TypePMDE.set_pmd_value","text":"Set PMD (DGD) and SOPMD (Second Order PMD) target value. Parameters: Name Type Description Default pmd int | float The DGD value in ps. required sopmd int | float The 2nd order pmd in ps**2. required Source code in pyinst\\abc.py 1636 1637 1638 1639 1640 1641 1642 1643 1644 @abstractmethod def set_pmd_value ( self , pmd : int | float , sopmd : int | float ) -> None : \"\"\" Set PMD (DGD) and SOPMD (Second Order PMD) target value. Args: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\"","title":"set_pmd_value()"},{"location":"api/abc/#pyinst.abc.TypePMDE.get_pmd_value","text":"Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: Name Type Description pmd float The DGD value in ps. sopmd float The 2nd order pmd in ps**2. Source code in pyinst\\abc.py 1646 1647 1648 1649 1650 1651 1652 1653 1654 @abstractmethod def get_pmd_value ( self ) -> Tuple [ float , float ]: \"\"\" Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\"","title":"get_pmd_value()"},{"location":"api/constants/","text":"Constants \u00a4 Provides user-friendly naming to values used in different functions. LIGHTSPEED = 299792.458 module-attribute \u00a4 VI_OPEN_TIMEOUT = 0 module-attribute \u00a4 VI_TIMEOUT = 2000 module-attribute \u00a4 VI_QUERY_DELAY = 0.001 module-attribute \u00a4 VI_READ_TERMINATION = ' \\n ' module-attribute \u00a4 VI_WRITE_TERMINATION = ' \\n ' module-attribute \u00a4 SERIAL_READ_TERMINATION = ' \\n ' module-attribute \u00a4 SERIAL_WRITE_TERMINATION = ' \\n ' module-attribute \u00a4 SERIAL_READ_TIMEOUT = 2000 module-attribute \u00a4 SERIAL_WRITE_TIMEOUT = 2000 module-attribute \u00a4 SERIAL_QUERY_DELAY = 0.1 module-attribute \u00a4 InstrumentType \u00a4 Bases: IntFlag The flags of instrument types. OPM = 1 << 0 class-attribute \u00a4 Optical Power Meter VOA = 1 << 1 class-attribute \u00a4 Variable Optical Attenuator OMA = 1 << 2 class-attribute \u00a4 Optical Modulation Analyzer OSA = 1 << 3 class-attribute \u00a4 Optical Spectrum Analyzer WM = 1 << 4 class-attribute \u00a4 Optical Wavelength Meter OTF = 1 << 5 class-attribute \u00a4 Optical Tunable Filter TS = 1 << 6 class-attribute \u00a4 Temperature Source SW = 1 << 7 class-attribute \u00a4 Optical Switch MSW = 1 << 8 class-attribute \u00a4 Optical Matrix Switch PS = 1 << 9 class-attribute \u00a4 Power Supply PDLE = 1 << 10 class-attribute \u00a4 PDL Emulator/Source POLC = 1 << 11 class-attribute \u00a4 Polarization Controller/Scrambler PMDE = 1 << 12 class-attribute \u00a4 PMD Emulator/Source TemperatureSourceType \u00a4 Bases: IntEnum UNDEFINED = 0 class-attribute \u00a4 CHAMBER = 1 class-attribute \u00a4 TEC = 2 class-attribute \u00a4 THERMO_STREAM = 3 class-attribute \u00a4 OpticalPowerUnit \u00a4 Bases: IntEnum DBM = 0 class-attribute \u00a4 W = 1 class-attribute \u00a4 TemperatureUnit \u00a4 Bases: IntEnum F = 0 class-attribute \u00a4 C = 1 class-attribute \u00a4 OpticalBandwidthUnit \u00a4 Bases: IntEnum GHZ = 0 class-attribute \u00a4 NM = 1 class-attribute \u00a4 SerialParity \u00a4 Bases: Enum NONE = 'N' class-attribute \u00a4 EVEN = 'E' class-attribute \u00a4 ODD = 'O' class-attribute \u00a4 MARK = 'M' class-attribute \u00a4 SPACE = 'S' class-attribute \u00a4 SerialStopBits \u00a4 Bases: Enum ONE = 1 class-attribute \u00a4 ONE_POINT_FIVE = 1.5 class-attribute \u00a4 TWO = 2 class-attribute \u00a4 SerialByteSize \u00a4 Bases: Enum FIVEBITS = 5 class-attribute \u00a4 SIXBITS = 6 class-attribute \u00a4 SEVENBITS = 7 class-attribute \u00a4 EIGHTBITS = 8 class-attribute \u00a4 ChamberOperatingMode \u00a4 Bases: IntEnum OFF = 0 class-attribute \u00a4 CONSTANT = 1 class-attribute \u00a4 PROGRAM = 2 class-attribute \u00a4","title":"Constants"},{"location":"api/constants/#constants","text":"Provides user-friendly naming to values used in different functions.","title":"Constants"},{"location":"api/constants/#pyinst.constants.LIGHTSPEED","text":"","title":"LIGHTSPEED"},{"location":"api/constants/#pyinst.constants.VI_OPEN_TIMEOUT","text":"","title":"VI_OPEN_TIMEOUT"},{"location":"api/constants/#pyinst.constants.VI_TIMEOUT","text":"","title":"VI_TIMEOUT"},{"location":"api/constants/#pyinst.constants.VI_QUERY_DELAY","text":"","title":"VI_QUERY_DELAY"},{"location":"api/constants/#pyinst.constants.VI_READ_TERMINATION","text":"","title":"VI_READ_TERMINATION"},{"location":"api/constants/#pyinst.constants.VI_WRITE_TERMINATION","text":"","title":"VI_WRITE_TERMINATION"},{"location":"api/constants/#pyinst.constants.SERIAL_READ_TERMINATION","text":"","title":"SERIAL_READ_TERMINATION"},{"location":"api/constants/#pyinst.constants.SERIAL_WRITE_TERMINATION","text":"","title":"SERIAL_WRITE_TERMINATION"},{"location":"api/constants/#pyinst.constants.SERIAL_READ_TIMEOUT","text":"","title":"SERIAL_READ_TIMEOUT"},{"location":"api/constants/#pyinst.constants.SERIAL_WRITE_TIMEOUT","text":"","title":"SERIAL_WRITE_TIMEOUT"},{"location":"api/constants/#pyinst.constants.SERIAL_QUERY_DELAY","text":"","title":"SERIAL_QUERY_DELAY"},{"location":"api/constants/#pyinst.constants.InstrumentType","text":"Bases: IntFlag The flags of instrument types.","title":"InstrumentType"},{"location":"api/constants/#pyinst.constants.InstrumentType.OPM","text":"Optical Power Meter","title":"OPM"},{"location":"api/constants/#pyinst.constants.InstrumentType.VOA","text":"Variable Optical Attenuator","title":"VOA"},{"location":"api/constants/#pyinst.constants.InstrumentType.OMA","text":"Optical Modulation Analyzer","title":"OMA"},{"location":"api/constants/#pyinst.constants.InstrumentType.OSA","text":"Optical Spectrum Analyzer","title":"OSA"},{"location":"api/constants/#pyinst.constants.InstrumentType.WM","text":"Optical Wavelength Meter","title":"WM"},{"location":"api/constants/#pyinst.constants.InstrumentType.OTF","text":"Optical Tunable Filter","title":"OTF"},{"location":"api/constants/#pyinst.constants.InstrumentType.TS","text":"Temperature Source","title":"TS"},{"location":"api/constants/#pyinst.constants.InstrumentType.SW","text":"Optical Switch","title":"SW"},{"location":"api/constants/#pyinst.constants.InstrumentType.MSW","text":"Optical Matrix Switch","title":"MSW"},{"location":"api/constants/#pyinst.constants.InstrumentType.PS","text":"Power Supply","title":"PS"},{"location":"api/constants/#pyinst.constants.InstrumentType.PDLE","text":"PDL Emulator/Source","title":"PDLE"},{"location":"api/constants/#pyinst.constants.InstrumentType.POLC","text":"Polarization Controller/Scrambler","title":"POLC"},{"location":"api/constants/#pyinst.constants.InstrumentType.PMDE","text":"PMD Emulator/Source","title":"PMDE"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType","text":"Bases: IntEnum","title":"TemperatureSourceType"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType.UNDEFINED","text":"","title":"UNDEFINED"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType.CHAMBER","text":"","title":"CHAMBER"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType.TEC","text":"","title":"TEC"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType.THERMO_STREAM","text":"","title":"THERMO_STREAM"},{"location":"api/constants/#pyinst.constants.OpticalPowerUnit","text":"Bases: IntEnum","title":"OpticalPowerUnit"},{"location":"api/constants/#pyinst.constants.OpticalPowerUnit.DBM","text":"","title":"DBM"},{"location":"api/constants/#pyinst.constants.OpticalPowerUnit.W","text":"","title":"W"},{"location":"api/constants/#pyinst.constants.TemperatureUnit","text":"Bases: IntEnum","title":"TemperatureUnit"},{"location":"api/constants/#pyinst.constants.TemperatureUnit.F","text":"","title":"F"},{"location":"api/constants/#pyinst.constants.TemperatureUnit.C","text":"","title":"C"},{"location":"api/constants/#pyinst.constants.OpticalBandwidthUnit","text":"Bases: IntEnum","title":"OpticalBandwidthUnit"},{"location":"api/constants/#pyinst.constants.OpticalBandwidthUnit.GHZ","text":"","title":"GHZ"},{"location":"api/constants/#pyinst.constants.OpticalBandwidthUnit.NM","text":"","title":"NM"},{"location":"api/constants/#pyinst.constants.SerialParity","text":"Bases: Enum","title":"SerialParity"},{"location":"api/constants/#pyinst.constants.SerialParity.NONE","text":"","title":"NONE"},{"location":"api/constants/#pyinst.constants.SerialParity.EVEN","text":"","title":"EVEN"},{"location":"api/constants/#pyinst.constants.SerialParity.ODD","text":"","title":"ODD"},{"location":"api/constants/#pyinst.constants.SerialParity.MARK","text":"","title":"MARK"},{"location":"api/constants/#pyinst.constants.SerialParity.SPACE","text":"","title":"SPACE"},{"location":"api/constants/#pyinst.constants.SerialStopBits","text":"Bases: Enum","title":"SerialStopBits"},{"location":"api/constants/#pyinst.constants.SerialStopBits.ONE","text":"","title":"ONE"},{"location":"api/constants/#pyinst.constants.SerialStopBits.ONE_POINT_FIVE","text":"","title":"ONE_POINT_FIVE"},{"location":"api/constants/#pyinst.constants.SerialStopBits.TWO","text":"","title":"TWO"},{"location":"api/constants/#pyinst.constants.SerialByteSize","text":"Bases: Enum","title":"SerialByteSize"},{"location":"api/constants/#pyinst.constants.SerialByteSize.FIVEBITS","text":"","title":"FIVEBITS"},{"location":"api/constants/#pyinst.constants.SerialByteSize.SIXBITS","text":"","title":"SIXBITS"},{"location":"api/constants/#pyinst.constants.SerialByteSize.SEVENBITS","text":"","title":"SEVENBITS"},{"location":"api/constants/#pyinst.constants.SerialByteSize.EIGHTBITS","text":"","title":"EIGHTBITS"},{"location":"api/constants/#pyinst.constants.ChamberOperatingMode","text":"Bases: IntEnum","title":"ChamberOperatingMode"},{"location":"api/constants/#pyinst.constants.ChamberOperatingMode.OFF","text":"","title":"OFF"},{"location":"api/constants/#pyinst.constants.ChamberOperatingMode.CONSTANT","text":"","title":"CONSTANT"},{"location":"api/constants/#pyinst.constants.ChamberOperatingMode.PROGRAM","text":"","title":"PROGRAM"},{"location":"api/functions/","text":"Functions \u00a4 InstrumentModelInfo \u00a4 Bases: NamedTuple Information of the instrument model. model : str class-attribute \u00a4 The model string of the instrument. brand : str class-attribute \u00a4 The brand of the instrument. class_name : str class-attribute \u00a4 The name of the instrument model class. ins_type : InstrumentType class-attribute \u00a4 The ins_type property of the instrument model class. params : List [ dict ] class-attribute \u00a4 A list of dict to define the parameters required to init the instrument model class. details : Dict [ str , str ] class-attribute \u00a4 A dict of details to describe the instrument. to_dict () \u00a4 Return the instrument model information as a dict. Source code in pyinst\\functions.py 79 80 81 def to_dict ( self ): \"\"\"Return the instrument model information as a dict.\"\"\" return { k : getattr ( self , k ) for k in self . _fields } get_visa_resource_manager () \u00a4 Get the VISA resource manager instance that is used globally by PyInst. Returns: Type Description pyvisa . highlevel . ResourceManager The VISA resource manager. Source code in pyinst\\functions.py 14 15 16 17 18 19 20 21 def get_visa_resource_manager () -> pyvisa . highlevel . ResourceManager : \"\"\" Get the VISA resource manager instance that is used globally by PyInst. Returns: The VISA resource manager. \"\"\" return rm list_visa_resources () \u00a4 List the resource names of all the connected VISA instruments. Returns: Type Description Tuple [ str , ...] A tuple of resource names of all the connected VISA instruments. Source code in pyinst\\functions.py 24 25 26 27 28 29 30 31 def list_visa_resources () -> Tuple [ str , ... ]: \"\"\" List the resource names of all the connected VISA instruments. Returns: A tuple of resource names of all the connected VISA instruments. \"\"\" return rm . list_resources () list_visa_resources_info () \u00a4 Returns a dictionary mapping resource names to resource extended information of all connected VISA instruments. Returns: Type Description Dict [ str , pyvisa . highlevel . ResourceInfo ] Mapping of resource name to ResourceInfo. Source code in pyinst\\functions.py 34 35 36 37 38 39 40 41 def list_visa_resources_info () -> Dict [ str , pyvisa . highlevel . ResourceInfo ]: \"\"\" Returns a dictionary mapping resource names to resource extended information of all connected VISA instruments. Returns: Mapping of resource name to ResourceInfo. \"\"\" return rm . list_resources_info () get_visa_resource_info ( resource_name , extended = True ) \u00a4 Get the (extended) information of a particular VISA resource. Parameters: Name Type Description Default resource_name str The resource name or alias of the VISA instrument. required extended bool Also get extended information (ie. resource_class, resource_name, alias) True Returns: Type Description pyvisa . highlevel . ResourceInfo The ResourceInfo. Source code in pyinst\\functions.py 44 45 46 47 48 49 50 51 52 53 54 55 def get_visa_resource_info ( resource_name : str , extended : bool = True ) -> pyvisa . highlevel . ResourceInfo : \"\"\" Get the (extended) information of a particular VISA resource. Args: resource_name: The resource name or alias of the VISA instrument. extended: Also get extended information (ie. resource_class, resource_name, alias) Returns: The ResourceInfo. \"\"\" return rm . resource_info ( resource_name , extended ) list_instrument_model_info ( ins_type = None ) \u00a4 List information all the instrument models. If the parameter ins_type is defined, only the instrument models of the same type will be listed. Parameters: Name Type Description Default ins_type Optional [ InstrumentType ] Only list the instrument models with the same type. None Returns: Type Description Tuple [ InstrumentModelInfo , ...] The information of instrument models. Source code in pyinst\\functions.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def list_instrument_model_info ( ins_type : Optional [ InstrumentType ] = None ) -> Tuple [ InstrumentModelInfo , ... ]: \"\"\" List information all the instrument models. If the parameter `ins_type` is defined, only the instrument models of the same type will be listed. Args: ins_type: Only list the instrument models with the same type. Returns: The information of instrument models. \"\"\" model_list = [] for i in models . __dict__ : model_cls = models . __dict__ [ i ] if i . startswith ( 'Model' ) and issubclass ( model_cls , BaseInstrument ): if ins_type is not None and ins_type not in model_cls . ins_type : continue else : model_list . append ( InstrumentModelInfo ( model = model_cls . model , brand = model_cls . brand , class_name = i , ins_type = model_cls . ins_type , params = model_cls . params , details = model_cls . details , )) return tuple ( model_list ) deprecated_monkey_patch () \u00a4 Add deprecated methods with monkey patch to make it compatible with the old legacy versions. Source code in pyinst\\functions.py 114 115 116 117 118 119 def deprecated_monkey_patch (): \"\"\"Add deprecated methods with monkey patch to make it compatible with the old legacy versions. \"\"\" from .deprecated import deprecated_monkey_patch deprecated_monkey_patch ()","title":"Functions"},{"location":"api/functions/#functions","text":"","title":"Functions"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo","text":"Bases: NamedTuple Information of the instrument model.","title":"InstrumentModelInfo"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.model","text":"The model string of the instrument.","title":"model"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.brand","text":"The brand of the instrument.","title":"brand"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.class_name","text":"The name of the instrument model class.","title":"class_name"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.ins_type","text":"The ins_type property of the instrument model class.","title":"ins_type"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.params","text":"A list of dict to define the parameters required to init the instrument model class.","title":"params"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.details","text":"A dict of details to describe the instrument.","title":"details"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.to_dict","text":"Return the instrument model information as a dict. Source code in pyinst\\functions.py 79 80 81 def to_dict ( self ): \"\"\"Return the instrument model information as a dict.\"\"\" return { k : getattr ( self , k ) for k in self . _fields }","title":"to_dict()"},{"location":"api/functions/#pyinst.functions.get_visa_resource_manager","text":"Get the VISA resource manager instance that is used globally by PyInst. Returns: Type Description pyvisa . highlevel . ResourceManager The VISA resource manager. Source code in pyinst\\functions.py 14 15 16 17 18 19 20 21 def get_visa_resource_manager () -> pyvisa . highlevel . ResourceManager : \"\"\" Get the VISA resource manager instance that is used globally by PyInst. Returns: The VISA resource manager. \"\"\" return rm","title":"get_visa_resource_manager()"},{"location":"api/functions/#pyinst.functions.list_visa_resources","text":"List the resource names of all the connected VISA instruments. Returns: Type Description Tuple [ str , ...] A tuple of resource names of all the connected VISA instruments. Source code in pyinst\\functions.py 24 25 26 27 28 29 30 31 def list_visa_resources () -> Tuple [ str , ... ]: \"\"\" List the resource names of all the connected VISA instruments. Returns: A tuple of resource names of all the connected VISA instruments. \"\"\" return rm . list_resources ()","title":"list_visa_resources()"},{"location":"api/functions/#pyinst.functions.list_visa_resources_info","text":"Returns a dictionary mapping resource names to resource extended information of all connected VISA instruments. Returns: Type Description Dict [ str , pyvisa . highlevel . ResourceInfo ] Mapping of resource name to ResourceInfo. Source code in pyinst\\functions.py 34 35 36 37 38 39 40 41 def list_visa_resources_info () -> Dict [ str , pyvisa . highlevel . ResourceInfo ]: \"\"\" Returns a dictionary mapping resource names to resource extended information of all connected VISA instruments. Returns: Mapping of resource name to ResourceInfo. \"\"\" return rm . list_resources_info ()","title":"list_visa_resources_info()"},{"location":"api/functions/#pyinst.functions.get_visa_resource_info","text":"Get the (extended) information of a particular VISA resource. Parameters: Name Type Description Default resource_name str The resource name or alias of the VISA instrument. required extended bool Also get extended information (ie. resource_class, resource_name, alias) True Returns: Type Description pyvisa . highlevel . ResourceInfo The ResourceInfo. Source code in pyinst\\functions.py 44 45 46 47 48 49 50 51 52 53 54 55 def get_visa_resource_info ( resource_name : str , extended : bool = True ) -> pyvisa . highlevel . ResourceInfo : \"\"\" Get the (extended) information of a particular VISA resource. Args: resource_name: The resource name or alias of the VISA instrument. extended: Also get extended information (ie. resource_class, resource_name, alias) Returns: The ResourceInfo. \"\"\" return rm . resource_info ( resource_name , extended )","title":"get_visa_resource_info()"},{"location":"api/functions/#pyinst.functions.list_instrument_model_info","text":"List information all the instrument models. If the parameter ins_type is defined, only the instrument models of the same type will be listed. Parameters: Name Type Description Default ins_type Optional [ InstrumentType ] Only list the instrument models with the same type. None Returns: Type Description Tuple [ InstrumentModelInfo , ...] The information of instrument models. Source code in pyinst\\functions.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def list_instrument_model_info ( ins_type : Optional [ InstrumentType ] = None ) -> Tuple [ InstrumentModelInfo , ... ]: \"\"\" List information all the instrument models. If the parameter `ins_type` is defined, only the instrument models of the same type will be listed. Args: ins_type: Only list the instrument models with the same type. Returns: The information of instrument models. \"\"\" model_list = [] for i in models . __dict__ : model_cls = models . __dict__ [ i ] if i . startswith ( 'Model' ) and issubclass ( model_cls , BaseInstrument ): if ins_type is not None and ins_type not in model_cls . ins_type : continue else : model_list . append ( InstrumentModelInfo ( model = model_cls . model , brand = model_cls . brand , class_name = i , ins_type = model_cls . ins_type , params = model_cls . params , details = model_cls . details , )) return tuple ( model_list )","title":"list_instrument_model_info()"},{"location":"api/functions/#pyinst.functions.deprecated_monkey_patch","text":"Add deprecated methods with monkey patch to make it compatible with the old legacy versions. Source code in pyinst\\functions.py 114 115 116 117 118 119 def deprecated_monkey_patch (): \"\"\"Add deprecated methods with monkey patch to make it compatible with the old legacy versions. \"\"\" from .deprecated import deprecated_monkey_patch deprecated_monkey_patch ()","title":"deprecated_monkey_patch()"},{"location":"api/models/","text":"Instrument Models \u00a4 Instrument Model classes are types to drive specific instrument models. An Instrument Model class always starts with a prefix Model , for example: ModelAQ6370 , ModelOTF980 . All Instrument Model classes can be directly imported from pyinst name space. The Instrument Model is immediately opened on object creation. The first parameter of the __init__ method is always resource_name : For VISA compatible instruments, it is the VISA resource name or alias. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument/USB chip. For more details, please refer to the specific Instrument Model class. Examples: >>> from pyinst import ModelN7744A >>> opm = ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) >>> opm . get_power_value () -10.85 >>> opm . close () # release the instrument resource Note An Instrument Model object is a function component in logic, does not correspond with the physical topography of the real-world instrument. For example, for OPM N7744A, it has 4 slots of OPM function components. Each slot can be considered as an independent ModelN7744A object. Instrument Model classes also support context management, so you can use the \"with\" statement to ensure that the instrument resource is closed after usage. Examples: >>> with ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) as opm : >>> opm . get_power_value () >>> -10.85 BaseModelN77xx ( resource_name , slot , ** kwargs ) \u00a4 Bases: VisaInstrument Base class for Keysight N77xx Series: N7744A, N7745A, N7747A and N7748A Optical Multiport Power Meters N7751A and N7752A Variable Optical Attenuators and 2-Channel Optical Power Meter N7761A, N7762A and N7764A Variable Optical Attenuators Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 82 83 84 85 86 87 88 89 90 91 92 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" if not 1 <= slot <= self . _max_slot : raise ValueError ( f 'Parameter slot is out of range: { slot !r} . The max slot number is { self . _max_slot } .' ) self . __slot = slot super () . __init__ ( resource_name , ** kwargs ) BaseModelN77xx_OPM \u00a4 Bases: BaseModelN77xx , TypeOPM min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 109 110 111 112 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 114 115 116 117 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 119 120 121 122 123 124 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :POW:WAV? MIN\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 126 127 128 129 130 131 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :POW:WAV? MAX\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 133 134 135 136 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.001 # 1us max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 138 139 140 141 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 143 144 145 146 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200.0 # dB max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 148 149 150 151 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0 # dB get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 153 154 155 156 157 158 159 160 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 162 163 164 165 166 167 168 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 170 171 172 173 174 175 176 177 178 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENS {slot:d} :POW:WAV?\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 180 181 182 183 184 185 186 187 188 189 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENS {slot:d} :POW:WAV {value:f} NM\" . format ( slot = self . _slot , value = wavelength ) self . command ( cmd ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot:d} :POW?\" . format ( slot = self . _slot ) power_value = float ( self . query ( cmd )) return power_value get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 207 208 209 210 211 212 213 214 215 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENS {slot:d} :POW:UNIT?\" . format ( slot = self . _slot ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 217 218 219 220 221 222 223 224 225 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENS {slot:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENS {slot:d} :CORR?\" . format ( slot = self . _slot ) cal = - float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 244 245 246 247 248 249 250 251 252 253 254 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( \"param value out of range: {value} \" . format ( value = value )) cmd = \":SENS {slot} :CORR {value} DB\" . format ( slot = self . _slot , value =- value ) self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 256 257 258 259 260 261 262 263 264 265 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENS {slot:d} :POW:ATIM?\" . format ( slot = self . _slot ) avg_t = float ( Decimal ( self . query ( cmd )) * 10 ** 3 ) return avg_t set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 267 268 269 270 271 272 273 274 275 276 277 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( \"param value out of range: {value} \" . format ( value = value )) cmd = \":SENS {slot} :POW:ATIM {value} MS\" . format ( slot = self . _slot , value = value ) self . command ( cmd ) BaseModelN77xx_VOA_with_OPM \u00a4 Bases: BaseModelN77xx , TypeVOA , TypeOPM min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 282 283 284 285 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 287 288 289 290 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 292 293 294 295 296 297 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :WAVelength? MIN\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 299 300 301 302 303 304 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :WAVelength? MAX\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 306 307 308 309 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 2.0 max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 311 312 313 314 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 316 317 318 319 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200.0 max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 321 322 323 324 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0 min_att () property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 326 327 328 329 330 331 332 333 334 335 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :ATT? MIN\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att max_att () property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 337 338 339 340 341 342 343 344 345 346 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :ATT? MAX\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att min_att_offset () property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\models.py 348 349 350 351 352 353 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INP {slot} :OFFS? MIN\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset max_att_offset () property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\models.py 355 356 357 358 359 360 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INP {slot} :OFFS? MAX\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 362 363 364 365 366 367 368 369 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 371 372 373 374 375 376 377 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 379 380 381 382 383 384 385 386 387 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INPut {slot:d} :WAVelength?\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 389 390 391 392 393 394 395 396 397 398 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength } \" ) cmd = \":INPut {slot:d} :WAVelength {wl} NM\" . format ( slot = self . _slot , wl = wavelength ) self . command ( cmd ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot:d} :POW?\" . format ( slot = self . _slot ) power_value = float ( self . query ( cmd )) return power_value get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 416 417 418 419 420 421 422 423 424 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":OUTPut {slot:d} :POWer:UNit?\" . format ( slot = self . _slot ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 426 427 428 429 430 431 432 433 434 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":OUTPut {slot:d} :POWer:UNit {unit:d} \" . format ( slot = self . _slot , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" cmd = \":OUTPut {slot:d} :POWer:OFFSet?\" . format ( slot = self . _slot ) cal = - float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 453 454 455 456 457 458 459 460 461 462 463 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTPut {slot:d} :POWer:OFFSet {value} DB\" . format ( slot = self . _slot , value =- value ) # opposite sign self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 465 466 467 468 469 470 471 472 473 474 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":OUTPut {slot:d} :ATIMe?\" . format ( slot = self . _slot ) atime = float ( Decimal ( self . query ( cmd )) * 10 ** 3 ) return atime set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 476 477 478 479 480 481 482 483 484 485 486 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTPut {slot:d} :ATIMe {value} MS\" . format ( slot = self . _slot , value = value ) self . command ( cmd ) enable ( en = True ) \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 488 489 490 491 492 493 494 495 496 497 498 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTP {slot:d} {status:d} \" . format ( slot = self . _slot , status = en ) self . command ( cmd ) disable () \u00a4 Disable the optical output. Source code in pyinst\\models.py 500 501 502 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False ) is_enabled () \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 504 505 506 507 508 509 510 511 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTP {slot:d} ?\" . format ( slot = self . _slot ) status = bool ( int ( self . query ( cmd ))) return status get_att () \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INP {slot:d} :ATT?\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att set_att ( att ) \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 531 532 533 534 535 536 537 538 539 540 541 542 543 544 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INP {slot:d} :ATT {value:.3f} DB\" . format ( slot = self . _slot , value = att ) self . command ( cmd ) get_att_offset () \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 546 547 548 549 550 551 552 553 554 555 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INP {slot:d} :OFFS?\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset set_att_offset ( offset ) \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 557 558 559 560 561 562 563 564 565 566 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) self . command ( \":INP {slot:d} :OFFS {value:.3f} DB\" . format ( slot = self . _slot , value = offset )) ModelN7744A \u00a4 Bases: BaseModelN77xx_OPM Keysight N7744A multi-channel optical power meter. brand = 'Keysight' class-attribute \u00a4 model = 'N7744A' class-attribute \u00a4 details = { 'Wavelength Range' : '1250 ~ 1625 nm' , 'Input Power Range' : '-80 ~ +10 dBm' , 'Safe Power' : '+16 dBm' , 'Averaging Time' : '1 us ~ 10 s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'options' : [ 1 , 2 , 3 , 4 ]}] class-attribute \u00a4 ModelN7752A ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelN77xx_VOA_with_OPM , BaseModelN77xx_OPM Keysight N7752A 2-channel optical attenuator and 2-channel power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelN7752A , self ) . __init__ ( resource_name , slot , ** kwargs ) __topology = { 1 : 'voa_with_opm' , 2 : 'voa_with_opm' , 3 : 'voa_with_opm' , 4 : 'voa_with_opm' , 5 : 'opm' , 6 : 'opm' , } self . __slot_type = __slot_type = __topology [ slot ] self . __Base = BaseModelN77xx_OPM if __slot_type == 'opm' else BaseModelN77xx_VOA_with_OPM brand = 'Keysight' class-attribute \u00a4 model = 'N7752A' class-attribute \u00a4 details = { 'Wavelength Range' : '1260~1640 nm' , '(slot 1~4) Att Range' : '0 ~ 45 dB' , '(slot 1~4) Safe Power' : '+23 dBm' , '(slot 5~6) Input Power Range' : '-80 ~ +10 dBm' , '(slot 5~6) Safe Power' : '+16 dBm' , 'Averaging Time' : '2 ms ~ 10 s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'options' : [ 1 , 3 , 5 , 6 ]}] class-attribute \u00a4 min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 649 650 651 652 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 654 655 656 657 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 659 660 661 662 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return self . __Base . min_wavelength . __get__ ( self ) max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 664 665 666 667 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return self . __Base . max_wavelength . __get__ ( self ) min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 669 670 671 672 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 2.0 # 2ms max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 674 675 676 677 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 679 680 681 682 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return self . __Base . min_pow_cal . __get__ ( self ) max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 684 685 686 687 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return self . __Base . max_pow_cal . __get__ ( self ) min_att () property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 689 690 691 692 693 694 695 696 697 698 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . min_att max_att () property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 700 701 702 703 704 705 706 707 708 709 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . max_att min_att_offset () property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\models.py 711 712 713 714 715 716 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . min_att_offset max_att_offset () property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\models.py 718 719 720 721 722 723 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . max_att_offset get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 725 726 727 728 729 730 731 732 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 734 735 736 737 738 739 740 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 742 743 744 745 746 747 748 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return self . __Base . get_wavelength ( self ) set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 750 751 752 753 754 755 756 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" return self . __Base . set_wavelength ( self , wavelength ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 758 759 760 761 762 763 764 765 766 767 768 769 770 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" return self . __Base . get_power_value ( self ) get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 772 773 774 775 776 777 778 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" return self . __Base . get_power_unit ( self ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 780 781 782 783 784 785 786 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" return self . __Base . set_power_unit ( self , unit ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 788 789 790 791 792 793 794 795 796 797 798 799 800 801 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" return self . __Base . get_pow_cal ( self ) set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 803 804 805 806 807 808 809 810 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" return self . __Base . set_pow_cal ( self , value ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 812 813 814 815 816 817 818 819 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" return self . __Base . get_avg_time ( self ) set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 821 822 823 824 825 826 827 828 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" return self . __Base . set_avg_time ( self , value ) enable ( en = True ) \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 830 831 832 833 834 835 836 837 838 839 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . enable ( en ) disable () \u00a4 Disable the optical output. Source code in pyinst\\models.py 841 842 843 844 845 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () self . enable ( False ) is_enabled () \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 847 848 849 850 851 852 853 854 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . is_enabled () get_att () \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . get_att () set_att ( att ) \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 874 875 876 877 878 879 880 881 882 883 884 885 886 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . set_att ( att ) get_att_offset () \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 888 889 890 891 892 893 894 895 896 897 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . get_att_offset () set_att_offset ( offset ) \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 899 900 901 902 903 904 905 906 907 908 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . set_att_offset ( offset ) ModelN7764A ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelN77xx_VOA_with_OPM Keysight N7764A 4-channel variable optical attenuator with built-in power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 932 933 934 935 936 937 938 939 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super ( ModelN7764A , self ) . __init__ ( resource_name , slot ) brand = 'Keysight' class-attribute \u00a4 model = 'N7764A' class-attribute \u00a4 details = { 'Wavelength Range' : '1260~1640 nm' , 'Att Range' : '0 ~ 45 dB' , 'Safe Power' : '+23 dBm' , 'Averaging Time' : '2 ms ~ 10 s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'options' : [ 1 , 3 , 5 , 7 ]}] class-attribute \u00a4 BaseModelAQ2200_VOA ( resource_name , slot , channel , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeVOA The base class of AQ2200 Series, application type ATTN, without built-in OPM. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 950 951 952 953 954 955 956 957 958 959 960 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , read_termination = '' , ** kwargs ) self . _slot = slot self . _channel = channel min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 962 963 964 965 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 967 968 969 970 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 972 973 974 975 976 977 978 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( Decimal ( wl_str ) * 10 ** 9 ) return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 980 981 982 983 984 985 986 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( Decimal ( wl_str ) * 10 ** 9 ) return wl min_att () property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 988 989 990 991 992 993 994 995 996 997 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT? MIN\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att max_att () property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT? MAX\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att min_att_offset () property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\models.py 1010 1011 1012 1013 1014 1015 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS? MIN\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset max_att_offset () property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\models.py 1017 1018 1019 1020 1021 1022 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS? MAX\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1024 1025 1026 1027 1028 1029 1030 1031 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1033 1034 1035 1036 1037 1038 1039 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV?\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( Decimal ( wl_str ) * 10 ** 9 ) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f 'Parameter wavelength is out of range: { wavelength !r} ' ) cmd = \":INP {slot:d} :CHAN {channel:d} :WAV {wl:f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd ) enable ( en = True ) \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} {en:d} \" . format ( slot = self . _slot , channel = self . _channel , en = en ) self . command ( cmd ) disable () \u00a4 Disable the optical output. Source code in pyinst\\models.py 1075 1076 1077 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False ) is_enabled () \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 1079 1080 1081 1082 1083 1084 1085 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} ?\" . format ( slot = self . _slot , channel = self . _channel ) return bool ( int ( self . query ( cmd ))) get_att () \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT?\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att set_att ( att ) \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INP {slot:d} :CHAN {channel:d} :ATT {att:.3f} dB\" . format ( slot = self . _slot , channel = self . _channel , att = att ) self . command ( cmd ) get_att_offset () \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS?\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset set_att_offset ( offset ) \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS {offset:.3f} dB\" . format ( slot = self . _slot , channel = self . _channel , offset = offset ) self . command ( cmd ) BaseModelAQ2200_VOA_with_OPM \u00a4 Bases: BaseModelAQ2200_VOA , TypeOPM The base class of AQ2200 Series, application type ATTN, with built-in OPM. min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 1149 1150 1151 1152 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 10.0 # 10ms max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 1154 1155 1156 1157 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 1159 1160 1161 1162 1163 1164 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS? MIN\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 1166 1167 1168 1169 1170 1171 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS? MAX\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot} :CHAN {channel} :POW?\" . format ( slot = self . _slot , channel = self . _channel ) power = float ( self . query ( cmd )) return power get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) unit = OpticalPowerUnit ( unit_int ) return unit set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 1200 1201 1202 1203 1204 1205 1206 1207 1208 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS {value:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :ATIM?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( Decimal ( self . query ( cmd )) * 1000 ) return avg_t set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :ATIM {value:d} MS\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) BaseModelAQ2200_OPM ( resource_name , slot , channel , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOPM Base Model of AQ2200 Series, application type Sensor. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super ( BaseModelAQ2200_OPM , self ) . __init__ ( resource_name , read_termination = '' , ** kwargs ) self . _slot = slot self . _channel = channel min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1272 1273 1274 1275 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1277 1278 1279 1280 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1282 1283 1284 1285 1286 1287 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :CHAN {slot:d} :POW:WAV? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1289 1290 1291 1292 1293 1294 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :CHAN {slot:d} :POW:WAV? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 1296 1297 1298 1299 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.1 # 100us max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 1301 1302 1303 1304 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s avg_time_table () property \u00a4 AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. Source code in pyinst\\models.py 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 @property def avg_time_table ( self ) -> tuple : \"\"\" AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. \"\"\" return ( 0.1 , 0.2 , 0.5 , 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 , 500 , 1000 , 2000 , 5000 , 10000 , ) min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 1324 1325 1326 1327 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 180.0 max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 1329 1330 1331 1332 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0 get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1334 1335 1336 1337 1338 1339 1340 1341 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1343 1344 1345 1346 1347 1348 1349 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1351 1352 1353 1354 1355 1356 1357 1358 1359 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:WAV?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:WAV {wl} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot} :CHAN {channel} :POW?\" . format ( slot = self . _slot , channel = self . _channel ) power = float ( self . query ( cmd )) return power get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 1388 1389 1390 1391 1392 1393 1394 1395 1396 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 1398 1399 1400 1401 1402 1403 1404 1405 1406 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :CORR?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENS {slot:d} :CHAN {channel:d} :CORR {value:.4f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:ATIM?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( Decimal ( self . query ( cmd )) * 1000 ) return avg_t set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) value = round ( value , 1 ) if value in self . avg_time_table : valid_value = value else : l = list ( self . avg_time_table ) l . sort ( key = lambda x : abs ( x - value )) valid_value = l [ 0 ] warnings . warn ( \"Averaging time value {value} not valid. \" \"Fall back to the closest valid value {valid_value} .\" . format ( value = value , valid_value = valid_value ), InstrWarning ) if valid_value < 1 : v = round ( valid_value * 1000 ) u = \"US\" else : v = valid_value u = \"MS\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:ATIM {value:d}{unit} \" . format ( slot = self . _slot , channel = self . _channel , value = v , unit = u ) self . command ( cmd ) ModelAQ2200_215 ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelAQ2200_OPM Yokogawa AQ2200-215 optical power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1498 1499 1500 1501 1502 1503 1504 1505 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) model = 'AQ2200-215' class-attribute \u00a4 brand = 'Yokogawa' class-attribute \u00a4 details = { 'Wavelength Range' : '970 ~ 1660 nm' , 'Input Power Range' : '-70 ~ +30 dBm' , 'Averaging Time' : '100us ~ 10s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'min' : 1 , 'max' : 10 }] class-attribute \u00a4 ModelAQ2200_221 \u00a4 Bases: BaseModelAQ2200_OPM Yokogawa AQ2200-221 2-channel optical power meter. model = 'AQ2200-221' class-attribute \u00a4 brand = 'Yokogawa' class-attribute \u00a4 details = { 'Wavelength Range' : '800 ~ 1700 nm' , 'Input Power Range' : '-70 ~ +10 dBm' , 'Averaging Time' : '200us ~ 10s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'min' : 1 , 'max' : 10 }, { 'name' : 'channel' , 'type' : 'int' , 'options' : [ 1 , 2 ]}] class-attribute \u00a4 min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 1535 1536 1537 1538 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.2 avg_time_table () property \u00a4 AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. Source code in pyinst\\models.py 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 @property def avg_time_table ( self ) -> tuple : \"\"\" AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. \"\"\" return ( 0.2 , 0.5 , 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 , 500 , 1000 , 2000 , 5000 , 10000 , ) ModelAQ2200_311 ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelAQ2200_VOA Yokogawa AQ2200-311 variable optical attenuator. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1582 1583 1584 1585 1586 1587 1588 1589 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) model = 'AQ2200-311' class-attribute \u00a4 brand = 'Yokogawa' class-attribute \u00a4 details = { 'Wavelength Range' : '1200 ~ 1700 nm' , 'Max Att' : '60 dB' , 'Max Safe Input Power' : '+23 dBm' , 'Averaging Time' : '100 us ~ 10 s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'min' : 1 , 'max' : 10 }] class-attribute \u00a4 ModelAQ2200_311A ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelAQ2200_VOA Yokogawa AQ2200-311A variable optical attenuator. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1615 1616 1617 1618 1619 1620 1621 1622 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) model = 'AQ2200-311A' class-attribute \u00a4 brand = 'Yokogawa' class-attribute \u00a4 details = { 'Wavelength Range' : '1200 ~ 1700 nm' , 'Max Att' : '60 dB' , 'Max Safe Input Power' : '+23 dBm' , 'Averaging Time' : '100 us ~ 10 s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'min' : 1 , 'max' : 10 }] class-attribute \u00a4 ModelAQ2200_331 ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelAQ2200_VOA_with_OPM Yokogawa AQ2200-331 variable optical attenuator with built-in power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1648 1649 1650 1651 1652 1653 1654 1655 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) model = 'AQ2200-331' class-attribute \u00a4 brand = 'Yokogawa' class-attribute \u00a4 details = { 'Wavelength Range' : '1200 ~ 1700 nm' , 'Max Att' : '60 dB' , 'Max Safe Input Power' : '+23 dBm' , 'Averaging Time' : '100 us ~ 10 s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'min' : 1 , 'max' : 10 }] class-attribute \u00a4 ModelAQ2200_342 \u00a4 Bases: BaseModelAQ2200_VOA_with_OPM Yokogawa AQ2200-342 variable optical attenuator with built-in power meter. model = 'AQ2200-342' class-attribute \u00a4 brand = 'Yokogawa' class-attribute \u00a4 details = { 'Wavelength Range' : '1260 ~ 1640 nm' , 'Max Att' : '40 dB Min' , 'Max Safe Input Power' : '+23 dBm' , 'Averaging Time' : '100 us ~ 10 s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'min' : 1 , 'max' : 10 }, { 'name' : 'channel' , 'type' : 'int' , 'options' : [ 1 , 2 ]}] class-attribute \u00a4 BaseModel815x_VOA ( resource_name , slot , channel , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeVOA Base class of Keysight 815x variable optical attenuators. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , ** kwargs ) self . _slot = slot self . _channel = channel min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1702 1703 1704 1705 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1707 1708 1709 1710 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1712 1713 1714 1715 1716 1717 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1719 1720 1721 1722 1723 1724 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl min_att () property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation? MIN\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att max_att () property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation? MAX\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att min_att_offset () property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\models.py 1748 1749 1750 1751 1752 1753 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet? MIN\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset max_att_offset () property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\models.py 1755 1756 1757 1758 1759 1760 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet? MAX\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1762 1763 1764 1765 1766 1767 1768 1769 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1771 1772 1773 1774 1775 1776 1777 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1779 1780 1781 1782 1783 1784 1785 1786 1787 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength {wl:.4f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd ) enable ( en = True ) \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTPut {slot:d} :CHANnel {channel:d} :STATe {state:d} \" . format ( slot = self . _slot , channel = self . _channel , state = en ) self . command ( cmd ) disable () \u00a4 Disable the optical output. Source code in pyinst\\models.py 1812 1813 1814 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False ) is_enabled () \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 1816 1817 1818 1819 1820 1821 1822 1823 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTPut {slot:d} :CHANnel {channel:d} :STATe?\" . format ( slot = self . _slot , channel = self . _channel ) status = bool ( int ( self . query ( cmd ))) return status get_att () \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation?\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att set_att ( att ) \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation {att:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , att = att ) self . command ( cmd ) get_att_offset () \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet?\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset set_att_offset ( offset ) \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet {offset:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , offset = offset ) self . command ( cmd ) Model81571A ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModel815x_VOA Keysight 81571A variable optical attenuator plug-in module. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1903 1904 1905 1906 1907 1908 1909 1910 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) model = '81571A' class-attribute \u00a4 brand = 'Keysight' class-attribute \u00a4 details = { 'Wavelength Range' : '1200 ~ 1700 nm' , 'Att Range' : '0 ~ 60 dB' , 'Max Safe Input Power' : '+33 dBm' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'options' : [ 1 , 2 , 3 , 4 ]}] class-attribute \u00a4 BaseModel816x_OPM ( resource_name , slot , channel , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOPM Base class of Keysight 816x optical power meters. Note For the Keysight 81635A Dual Power Sensor and Keysight 81619A Dual Optical Head Interface module, channel 1 is the primary channel and channel 2 is the secondary channel. The primary and secondary channels share the same software and hardware triggering system. For some methods, setting parameters for the primary channel sets the parameters for the secondary channel. For these methods, setting for the secondary channel is not allowed. Currently, these methods are: set_avg_time() Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , ** kwargs ) self . _slot = slot self . _channel = channel min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1943 1944 1945 1946 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1948 1949 1950 1951 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1953 1954 1955 1956 1957 1958 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1960 1961 1962 1963 1964 1965 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 1967 1968 1969 1970 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.1 # 100us max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 1972 1973 1974 1975 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000 # 10s min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 1977 1978 1979 1980 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200 max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 1982 1983 1984 1985 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200 get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1987 1988 1989 1990 1991 1992 1993 1994 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1996 1997 1998 1999 2000 2001 2002 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 2004 2005 2006 2007 2008 2009 2010 2011 2012 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength {wl:.4f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETCh {slot:d} :CHANnel {channel:d} :POWer?\" . format ( slot = self . _slot , channel = self . _channel ) value = float ( Decimal ( self . query ( cmd ))) return value get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 2041 2042 2043 2044 2045 2046 2047 2048 2049 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 2051 2052 2053 2054 2055 2056 2057 2058 2059 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :CORRection?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :CORRection {value:.4f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:ATIMe?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( Decimal ( self . query ( cmd )) * 1000 ) return avg_t set_avg_time ( value ) \u00a4 Set the averaging time in ms. Note Can only be sent to primary channel, and secondary channel is also affected. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Note: Can only be sent to primary channel, and secondary channel is also affected. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:ATIMe {value:.4f} \" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) Model81635A \u00a4 Bases: BaseModel816x_OPM Keysight 81635A optical power meter plug-in module. brand = 'Keysight' class-attribute \u00a4 model = '81635A' class-attribute \u00a4 details = { 'Wavelength Range' : '800 ~ 1650 nm' , 'Input Power Range' : '-80 ~ +10 dBm' , 'Max Safe Input Power' : '+16 dBm' , 'Averaging Time' : '100 us ~ 10 s' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'options' : [ 1 , 2 , 3 , 4 ]}, { 'name' : 'channel' , 'type' : 'int' , 'options' : [ 1 , 2 ]}] class-attribute \u00a4 BaseModelVSA89600 ( resource_name , encoding = 'latin1' , ** kwargs ) \u00a4 Bases: VisaInstrument The base class of instrument models based on Keysight 89600 VSA software. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required encoding str The encoding of the VISA IO string. 'latin1' **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 def __init__ ( self , resource_name : str , encoding : str = 'latin1' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. encoding: The encoding of the VISA IO string. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , encoding = encoding , ** kwargs ) self . __custom_measurement_demod_filters = { \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" } self . __custom_reference_demod_filters = { \"Rectangular\" , \"RaisedCosine\" , \"RootRaisedCosine\" , \"Gaussian\" , \"HalfSine\" } CUSTOM_DEMOD_MEASUREMENT_FILTERS () property \u00a4 Options for custom demod measurement filter types. Source code in pyinst\\models.py 2155 2156 2157 2158 @property def CUSTOM_DEMOD_MEASUREMENT_FILTERS ( self ) -> set : \"\"\"Options for custom demod measurement filter types.\"\"\" return self . __custom_measurement_demod_filters CUSTOM_DEMOD_REFERENCE_FILTERS () property \u00a4 Options for custom demod reference filter types. Source code in pyinst\\models.py 2160 2161 2162 2163 @property def CUSTOM_DEMOD_REFERENCE_FILTERS ( self ) -> set : \"\"\"Options for custom demod reference filter types.\"\"\" return self . __custom_reference_demod_filters run ( _run = True ) \u00a4 Resume or stop the measurement. Parameters: Name Type Description Default _run bool True = Run the measurement. False = Stops the measurement and clears all measurement data. True Source code in pyinst\\models.py 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 def run ( self , _run : bool = True ) -> None : \"\"\"Resume or stop the measurement. Args: _run: `True` = Run the measurement. `False` = Stops the measurement and clears all measurement data. \"\"\" if _run : self . command ( \":INITiate:RESume\" ) else : self . command ( \":INITiate:ABORt\" ) stop () \u00a4 Stops the measurement and clears all measurement data. Source code in pyinst\\models.py 2177 2178 2179 def stop ( self ) -> None : \"\"\"Stops the measurement and clears all measurement data.\"\"\" self . run ( False ) pause () \u00a4 Causes the measurement to transition to the Paused state. Source code in pyinst\\models.py 2181 2182 2183 def pause ( self ) -> None : \"\"\"Causes the measurement to transition to the Paused state.\"\"\" self . command ( \":INITiate:PAUSe\" ) restart () \u00a4 Causes the measurement to restart. The Average count is reset to 0 and the measurement transitions to the Running State. Source code in pyinst\\models.py 2185 2186 2187 2188 2189 def restart ( self ) -> None : \"\"\"Causes the measurement to restart. The Average count is reset to 0 and the measurement transitions to the Running State. \"\"\" self . command ( \":INITiate:RESTart\" ) get_data_table_names ( trace ) \u00a4 Returns a list of all names in the data table for the specified trace. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ str ] A list of all parameter names in the data table. Source code in pyinst\\models.py 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 def get_data_table_names ( self , trace : int ) -> List [ str ]: \"\"\" Returns a list of all names in the data table for the specified trace. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter names in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) name_str = self . query ( \":TRACe {trace:d} :DATA:TABLe:NAME?\" . format ( trace = trace )) name_list = list ( map ( lambda x : x . strip ( '\"' ), name_str . split ( \",\" ))) return name_list get_data_table_values ( trace ) \u00a4 Gets a list of values from a data table. Enum values are returned as enum indexes ( int type). Numeric values are returned as int or float . Other values are returned as str . Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ int | float | str ] A list of all parameter values in the data table. Source code in pyinst\\models.py 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 def get_data_table_values ( self , trace : int ) -> List [ int | float | str ]: \"\"\"Gets a list of values from a data table. Enum values are returned as enum indexes (`int` type). Numeric values are returned as `int` or `float`. Other values are returned as `str`. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter values in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) value_str = self . query ( \":TRACe {trace:d} :DATA:TABLe?\" . format ( trace = trace )) raw_values = value_str . split ( \",\" ) . strip () values = [] for r_val in raw_values : try : val = int ( r_val ) except ValueError : try : val = float ( r_val ) except : val = r_val values . append ( val ) return values get_data_table_units ( trace ) \u00a4 Get all the units in the data table of the specified trace. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ str ] A list of all parameter units in the data table. Source code in pyinst\\models.py 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 def get_data_table_units ( self , trace : int ) -> List [ str ]: \"\"\" Get all the units in the data table of the specified trace. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter units in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) unit_str = self . query ( ':TRACe {trace:d} :DATA:TABLe:UNIT?' . format ( trace = trace )) unit_list = list ( map ( lambda x : x . strip ( '\"' ), unit_str . split ( \",\" ))) return unit_list get_data_table ( trace ) \u00a4 Get formatted data including table item names, values, and units. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description Dict [ str , Tuple [ int | float | str , str ]] A dict represents the data table. The format is: Dict [ str , Tuple [ int | float | str , str ]] name => (value, unit) Source code in pyinst\\models.py 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 def get_data_table ( self , trace : int ) -> Dict [ str , Tuple [ int | float | str , str ]]: \"\"\" Get formatted data including table item names, values, and units. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A dict represents the data table. The format is: name => (value, unit) \"\"\" names = self . get_data_table_names ( trace ) values = self . get_data_table_values ( trace ) units = self . get_data_table_units ( trace ) if len ( names ) == len ( values ) == len ( units ): i_len = len ( names ) else : raise IndexError ( 'Numbers of names, values and units do not match.' ) data = {} for i in range ( i_len ): data [ names [ i ]] = ( values [ i ], units [ i ]) return data get_custom_demod_measurement_filter () \u00a4 Queries the measurement filter applied during the digital demodulation measurement. Returns: Type Description Literal ['None', 'Rectangular', 'RootRaisedCosine', 'Gaussian', 'LowPass'] The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" Source code in pyinst\\models.py 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 def get_custom_demod_measurement_filter ( self ) -> Literal [ \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" ]: \"\"\"Queries the measurement filter applied during the digital demodulation measurement. Returns: The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" \"\"\" cmd = \":CDEMod:FILTer?\" filter_type = self . query ( cmd ) . strip () . strip ( '\"' ) return filter_type set_custom_demod_measurement_filter ( filter_type ) \u00a4 Sets the measurement filter applied during the digital demodulation measurement. Parameters: Name Type Description Default filter_type Literal ['None', 'Rectangular', 'RootRaisedCosine', 'Gaussian', 'LowPass'] The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" required Source code in pyinst\\models.py 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 def set_custom_demod_measurement_filter ( self , filter_type : Literal [ \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" ]) -> None : \"\"\"Sets the measurement filter applied during the digital demodulation measurement. Args: filter_type: The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" \"\"\" if filter_type not in self . CUSTOM_DEMOD_MEASUREMENT_FILTERS : raise ValueError ( 'Invalid filter_type: {filter!r} ' . format ( filter = filter_type )) cmd = \":CDEMod:FILTer \\\" {filter} \\\" \" . format ( filter = filter_type ) self . command ( cmd ) get_custom_demod_reference_filter () \u00a4 Queries the reference filter applied during the digital demodulation measurement. Returns: Type Description Literal ['Rectangular', 'RaisedCosine', 'RootRaisedCosine', 'Gaussian', 'HalfSine'] The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" Source code in pyinst\\models.py 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 def get_custom_demod_reference_filter ( self ) -> Literal [ \"Rectangular\" , \"RaisedCosine\" , \"RootRaisedCosine\" , \"Gaussian\" , \"HalfSine\" ]: \"\"\"Queries the reference filter applied during the digital demodulation measurement. Returns: The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" \"\"\" cmd = ':CDEMod:FILTer:REFerence?' filter_type = self . query ( cmd ) . strip () . strip ( '\"' ) return filter_type set_custom_demod_reference_filter ( filter_type ) \u00a4 Sets the reference filter applied during the digital demodulation measurement. Parameters: Name Type Description Default filter_type str The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" required Source code in pyinst\\models.py 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 def set_custom_demod_reference_filter ( self , filter_type : str ) -> None : \"\"\"Sets the reference filter applied during the digital demodulation measurement. Args: filter_type: The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" \"\"\" if filter_type not in self . CUSTOM_DEMOD_REFERENCE_FILTERS : raise ValueError ( 'Invalid filter_type: {filter!r} ' . format ( filter = filter_type )) cmd = \":CDEMod:FILTer:REFerence \\\" {filter} \\\" \" . format ( filter = filter_type ) self . command ( cmd ) get_custom_demod_filter_abt () \u00a4 Queries the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Returns: Type Description float The \u03b1 (alpha) or BT (bandwidth time product) parameter. Source code in pyinst\\models.py 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 def get_custom_demod_filter_abt ( self ) -> float : \"\"\"Queries the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Returns: The \u03b1 (alpha) or BT (bandwidth time product) parameter. \"\"\" cmd = ':CDEMod:FILTer:ABT?' abt = float ( self . query ( cmd )) return abt set_custom_demod_filter_abt ( abt ) \u00a4 Sets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Parameters: Name Type Description Default abt int | float The \u03b1 (alpha) or BT (bandwidth time product) parameter. required Source code in pyinst\\models.py 2342 2343 2344 2345 2346 2347 2348 2349 2350 def set_custom_demod_filter_abt ( self , abt : int | float ) -> None : \"\"\"Sets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Args: abt: The \u03b1 (alpha) or BT (bandwidth time product) parameter. \"\"\" cmd = ':CDEMod:FILTer:ABT {value:f} ' . format ( value = round ( abt , 6 )) self . command ( cmd ) get_custom_demod_equalization_state () \u00a4 Queries a value indicating whether the equalization filter is enabled. Returns: Type Description bool Whether the equalization filter is enabled. Source code in pyinst\\models.py 2352 2353 2354 2355 2356 2357 2358 2359 2360 def get_custom_demod_equalization_state ( self ) -> bool : \"\"\"Queries a value indicating whether the equalization filter is enabled. Returns: Whether the equalization filter is enabled. \"\"\" cmd = ':CDEMod:COMPensate:EQUalize?' state = bool ( int ( self . query ( cmd ))) return state set_custom_demod_equalization_state ( enable ) \u00a4 Enables or disables the equalization filter. Parameters: Name Type Description Default enable bool True = enable, False = disable required Source code in pyinst\\models.py 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 def set_custom_demod_equalization_state ( self , enable : bool ) -> None : \"\"\" Enables or disables the equalization filter. Args: enable: True = enable, False = disable \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = ':CDEMod:COMPensate:EQUalize {state:d} ' . format ( state = enable ) self . command ( cmd ) get_custom_demod_equalization_length () \u00a4 Queries the length of the equalization filter in symbols. Returns: Type Description int The length of the equalization filter in symbols. Source code in pyinst\\models.py 2374 2375 2376 2377 2378 2379 2380 2381 2382 def get_custom_demod_equalization_length ( self ) -> int : \"\"\"Queries the length of the equalization filter in symbols. Returns: The length of the equalization filter in symbols. \"\"\" cmd = ':CDEMod:COMPensate:EQUalize:LENGth?' rpl = self . query ( cmd ) return int ( rpl ) set_custom_demod_equalization_length ( symbols ) \u00a4 Sets the length of the equalization filter in symbols. Parameters: Name Type Description Default symbols int The length of the equalization filter in symbols. required Source code in pyinst\\models.py 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 def set_custom_demod_equalization_length ( self , symbols : int ) -> None : \"\"\"Sets the length of the equalization filter in symbols. Args: symbols: The length of the equalization filter in symbols. \"\"\" if not symbols >= 3 : raise ValueError ( 'Parameter symbols should >= 3: {symbols!r} ' . format ( symbols = symbols )) cmd = ':CDEMod:COMPensate:EQUalize:LENGth {value:d} ' . format ( value = symbols ) self . command ( cmd ) get_custom_demod_equalization_convergence () \u00a4 Queries the convergence parameter for the Adaptive Equalizer. Returns: Type Description float The equalization convergence parameter. Source code in pyinst\\models.py 2395 2396 2397 2398 2399 2400 2401 2402 def get_custom_demod_equalization_convergence ( self ) -> float : \"\"\"Queries the convergence parameter for the Adaptive Equalizer. Returns: The equalization convergence parameter. \"\"\" cmd = \":CDEMod:COMPensate:EQUalize:CONVergence?\" return float ( self . query ( cmd )) set_custom_demod_equalization_convergence ( value ) \u00a4 Sets the convergence parameter for the Adaptive Equalizer. Parameters: Name Type Description Default value int | float The equalization convergence parameter. required Source code in pyinst\\models.py 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 def set_custom_demod_equalization_convergence ( self , value : int | float ) -> None : \"\"\"Sets the convergence parameter for the Adaptive Equalizer. Args: value: The equalization convergence parameter. \"\"\" if not 1E-8 <= value <= 1e-6 : raise ValueError ( f 'Invalid value for EQ convergence: { value !r} , must be between 1E-6 and 1E-8.' ) cmd = ':CDEMod:COMPensate:EQUalize:CONVergence {value:.4E} ' . format ( value = value ) self . command ( cmd ) get_custom_demod_equalizer_run_mode () \u00a4 Queries the run mode of the Adaptive Equalizer. Returns: Type Description Literal ['Run', 'Hold'] The run mode. Options: \"Run\" | \"Hold\". Source code in pyinst\\models.py 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 def get_custom_demod_equalizer_run_mode ( self ) -> Literal [ \"Run\" , \"Hold\" ]: \"\"\" Queries the run mode of the Adaptive Equalizer. Returns: The run mode. Options: \"Run\" | \"Hold\". \"\"\" cmd = ':CDEMod:COMPensate:EQUalize:MODE?' mode = self . query ( cmd ) . strip () . strip ( '\"' ) return mode set_custom_demod_equalizer_run_mode ( mode ) \u00a4 Sets the run mode of the Adaptive Equalizer. Parameters: Name Type Description Default mode Literal ['Run', 'Hold'] The run mode. Options: \"Run\" | \"Hold\". required Source code in pyinst\\models.py 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 def set_custom_demod_equalizer_run_mode ( self , mode : Literal [ \"Run\" , \"Hold\" ]) -> None : \"\"\" Sets the run mode of the Adaptive Equalizer. Args: mode: The run mode. Options: \"Run\" | \"Hold\". \"\"\" MODES = { \"Run\" , \"Hold\" } if mode not in MODES : raise ValueError ( 'Invalid value for Custom Demod EQ run mode: {vlaue!r} ' . format ( mode )) cmd = ':CDEMod:COMPensate:EQUalize:MODE {value} ' . format ( value = mode ) self . command ( cmd ) reset_custom_demod_equalizer () \u00a4 Reset the custom demod equalizer filter. Source code in pyinst\\models.py 2439 2440 2441 2442 def reset_custom_demod_equalizer ( self ) -> None : \"\"\"Reset the custom demod equalizer filter.\"\"\" cmd = ':CDEMod:COMPensate:EQUalize:RESet' self . command ( cmd ) get_custom_demod_result_length () \u00a4 Queries the demodulation measurement result length (in symbols). Returns: Type Description int The result length in symbols. Source code in pyinst\\models.py 2444 2445 2446 2447 2448 2449 2450 2451 2452 def get_custom_demod_result_length ( self ) -> int : \"\"\"Queries the demodulation measurement result length (in symbols). Returns: The result length in symbols. \"\"\" cmd = ':CDEMod:RLENgth?' l = int ( self . query ( cmd )) return l set_custom_demod_result_length ( length ) \u00a4 Sets the demodulation measurement result length (in symbols). Parameters: Name Type Description Default length int The result length in symbols. required Source code in pyinst\\models.py 2454 2455 2456 2457 2458 2459 2460 2461 def set_custom_demod_result_length ( self , length : int ) -> None : \"\"\"Sets the demodulation measurement result length (in symbols). Args: length: The result length in symbols. \"\"\" cmd = ':CDEMod:RLENgth {v:d} ' . format ( v = length ) self . command ( cmd ) get_custom_demod_reference () \u00a4 Queries the reference used for normalization of IQ traces and EVM calculations. Returns: Type Description str The reference type. Possible return values: ConstellationMaximum | ReferenceRms Source code in pyinst\\models.py 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 def get_custom_demod_reference ( self ) -> str : \"\"\"Queries the reference used for normalization of IQ traces and EVM calculations. Returns: The reference type. Possible return values: `ConstellationMaximum` | `ReferenceRms` \"\"\" cmd = f ':CDEMod:COMPensate:NREFerence?' return self . query ( cmd ) . strip () set_custom_demod_reference ( ref_type ) \u00a4 Sets the reference used for normalization of IQ traces and EVM calculations. Parameters: Name Type Description Default ref_type str The reference type. Options: ConstellationMaximum | ReferenceRms required Source code in pyinst\\models.py 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 def set_custom_demod_reference ( self , ref_type : str ) -> None : \"\"\"Sets the reference used for normalization of IQ traces and EVM calculations. Args: ref_type: The reference type. Options: `ConstellationMaximum` | `ReferenceRms` \"\"\" if ref_type not in { \"ConstellationMaximum\" , \"ReferenceRms\" }: raise ValueError ( f \"Invaild ref_type: { ref_type !r} \" ) cmd = f ':CDEMod:COMPensate:NREFerence { ref_type } ' return self . command ( cmd ) BaseModelVSA89600_OMA \u00a4 Bases: BaseModelVSA89600 , TypeOMA Base class for Keysight OMA models based on VSA 89600 software: M8290A N4392A DEMOD_FORMATS () property \u00a4 Valid options for demod format. Source code in pyinst\\models.py 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 @property def DEMOD_FORMATS ( self ): \"\"\"Valid options for demod format.\"\"\" options = ( \"Qam16\" , \"Qam32\" , \"Qam64\" , \"Qam256\" , \"Qpsk\" , \"DifferentialQpsk\" , \"Pi4DifferentialQpsk\" , \"OffsetQpsk\" , \"Bpsk\" , \"Psk8\" , \"Msk\" , \"Msk2\" , \"Fsk2\" , \"Fsk4\" , \"DvbQam16\" , \"DvbQam32\" , \"DvbQam64\" , \"Vsb8\" , \"Vsb16\" , \"Edge\" , \"Fsk8\" , \"Fsk16\" , \"Qam128\" , \"DifferentialPsk8\" , \"Qam512\" , \"Qam1024\" , \"Apsk16\" , \"Apsk16Dvb\" , \"Apsk32\" , \"Apsk32Dvb\" , \"DvbQam128\" , \"DvbQam256\" , \"Pi8DifferentialPsk8\" , \"CpmFM\" , \"Star16Qam\" , \"Star32Qam\" , \"CustomApsk\" , \"ShapedOffsetQpsk\" ) return options POLARIZATIONS () property \u00a4 Valid options for polarization configuration. Source code in pyinst\\models.py 2513 2514 2515 2516 2517 @property def POLARIZATIONS ( self ): \"\"\"Valid options for polarization configuration.\"\"\" options = ( \"Single\" , \"Dual\" , \"Auto\" ) return options get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" cmd = \":OMA:SMartSEtup:CarrierFrequency:FRErequency?\" freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return freq set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 2530 2531 2532 2533 2534 2535 2536 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" self . smart_setup ( frequency = frequency , pre_set_layout = False ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 2538 2539 2540 2541 2542 2543 2544 2545 2546 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":OMA:SMartSEtup:CarrierFrequency:WaVeLength?\" wl = float ( self . query ( cmd )) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 2548 2549 2550 2551 2552 2553 2554 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" self . smart_setup ( wavelength = wavelength , pre_set_layout = False ) smart_setup ( execute = True , * , frequency = None , wavelength = None , symbol_rate = None , fine_tune_symbol_rate = None , demodulation_format = None , polarization = None , pre_set_layout = None , compensate_cd = None , compensate_pmd = None ) \u00a4 Perform smart setup of the OMA. Use parameter execute to choose whether to execute the changed settings or not. If a setting parameter is not explicitly given (default as None), the old setting will be kept. Parameters: Name Type Description Default execute bool Whether to execute smart setup with the new settings. If set to False, the settings of smart setup will be changed, but the OMA will not execute smart setup. True frequency Optional [ int | float ] The carrier frequency in THz. None wavelength Optional [ int | float ] The carrier wavelength in nm. This parameter could not be set if frequency is set. None symbol_rate Optional [ int | float ] The symbol rate in GHz. None fine_tune_symbol_rate Optional [ bool ] Whether the system should try to fine tune the symbol rate. None demodulation_format Optional [ str ] The selected digital demodulation format. Refer to DEMOD_FORMATS for options. None polarization Optional [ str ] The expected polarization or if auto detection should be used. options: \"Single\" | \"Dual\" | \"Auto\" . None pre_set_layout Optional [ bool ] Whether a preset of the trace layout should be performed. None compensate_cd Optional [ bool ] A value indicating whether CD should be compensated. None compensate_pmd Optional [ bool ] A value indicating whether PMD should be compensated. None Source code in pyinst\\models.py 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 def smart_setup ( self , execute : bool = True , * , frequency : Optional [ int | float ] = None , wavelength : Optional [ int | float ] = None , symbol_rate : Optional [ int | float ] = None , fine_tune_symbol_rate : Optional [ bool ] = None , demodulation_format : Optional [ str ] = None , polarization : Optional [ str ] = None , pre_set_layout : Optional [ bool ] = None , compensate_cd : Optional [ bool ] = None , compensate_pmd : Optional [ bool ] = None ): \"\"\"Perform smart setup of the OMA. Use parameter `execute` to choose whether to execute the changed settings or not. If a setting parameter is not explicitly given (default as None), the old setting will be kept. Args: execute: Whether to execute smart setup with the new settings. If set to False, the settings of smart setup will be changed, but the OMA will not execute smart setup. frequency: The carrier frequency in THz. wavelength: The carrier wavelength in nm. This parameter could not be set if frequency is set. symbol_rate: The symbol rate in GHz. fine_tune_symbol_rate: Whether the system should try to fine tune the symbol rate. demodulation_format: The selected digital demodulation format. Refer to `DEMOD_FORMATS` for options. polarization: The expected polarization or if auto detection should be used. options: `\"Single\"` | `\"Dual\"` | `\"Auto\"`. pre_set_layout: Whether a preset of the trace layout should be performed. compensate_cd: A value indicating whether CD should be compensated. compensate_pmd: A value indicating whether PMD should be compensated. \"\"\" if frequency is not None and wavelength is not None : raise ValueError ( 'You could not set both frequency and wavelength at the same time.' ) if frequency is not None : self . command ( ':OMA:SMartSEtup:CarrierFrequency:FRErequency {value:d} ' . format ( value = round ( frequency * 10 ** 12 ))) if wavelength is not None : self . command ( f \":OMA:SMartSEtup:CarrierFrequency:WaVeLength { wavelength : .4f } \" ) if symbol_rate is not None : self . command ( ':OMA:SMartSEtup:SYMBRate {value:d} ' . format ( value = round ( symbol_rate * 10 ** 9 ))) if fine_tune_symbol_rate is not None : if not isinstance ( fine_tune_symbol_rate , bool ): raise TypeError ( f \"Parameter fine_tune_symbol_rate must be a bool, not ' { type ( fine_tune_symbol_rate ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:FINetuneSymbolRate {enable:d} ' . format ( enable = fine_tune_symbol_rate )) if demodulation_format is not None : if demodulation_format not in self . DEMOD_FORMATS : raise ValueError ( 'Invalid modulation demodulation format: {format!r} ' . format ( format = demodulation_format )) self . command ( ':OMA:SMartSEtup:FORMat \" {format} \"' . format ( format = demodulation_format )) if polarization is not None : if not polarization in self . POLARIZATIONS : raise ValueError ( 'Invalid polarization: {pol!r} ' . format ( pol = polarization )) self . command ( ':OMA:SMartSEtup:POLarization \" {pol} \"' . format ( pol = polarization )) if pre_set_layout is not None : if not isinstance ( pre_set_layout , bool ): raise TypeError ( f \"Parameter pre_set_layout must be a bool, not ' { type ( pre_set_layout ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:PREsetLAyout {enable:d} ' . format ( enable = pre_set_layout )) if compensate_cd is not None : if not isinstance ( compensate_cd , bool ): raise TypeError ( f \"Parameter compensate_cd must be a bool, not ' { type ( compensate_cd ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:COmpensateCD {:d} ' . format ( compensate_cd )) if compensate_pmd is not None : if not isinstance ( compensate_pmd , bool ): raise TypeError ( f \"Parameter compensate_pmd must be a bool, not ' { type ( compensate_pmd ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:COmpensatePMD {:d} ' . format ( compensate_pmd )) if execute : self . command ( ':OMA:SMartSEtup:PERformProposedActions' ) ModelN4392A ( resource_name , ** kwargs ) \u00a4 Bases: BaseModelVSA89600_OMA N4392A Optical Modulation Analyzer. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 2649 2650 2651 2652 2653 2654 2655 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelN4392A , self ) . __init__ ( resource_name , ** kwargs ) model = 'N4392A' class-attribute \u00a4 brand = 'Keysight' class-attribute \u00a4 details = { 'Maximum detectable baud rate' : '46 Gbaud' , 'Optical frequency range' : '196.25 ~ 190.95 THz' , 'External LO input power range' : '-3 ~ +16 dBm' } class-attribute \u00a4 min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 2657 2658 2659 2660 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return 190.95 max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 2662 2663 2664 2665 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return 196.25 min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 2667 2668 2669 2670 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return super () . min_wavelength max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 2672 2673 2674 2675 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return super () . max_wavelength ModelM8292A ( resource_name , ** kwargs ) \u00a4 Bases: BaseModelVSA89600_OMA M8292A Optical Modulation Analyzer Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 2692 2693 2694 2695 2696 2697 2698 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelM8292A , self ) . __init__ ( resource_name , ** kwargs ) model = 'M8292A' class-attribute \u00a4 brand = 'Keysight' class-attribute \u00a4 details = { 'Maximum detectable symbol rate' : '74 GBd' , 'Optical frequency range' : '196.25 ~ 190.95 THz' , 'Max signal input power' : '+14.5 dBm' , 'External LO input power' : '+17 dBm' } class-attribute \u00a4 min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 2700 2701 2702 2703 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return 190.95 max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 2705 2706 2707 2708 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return 196.25 min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 2710 2711 2712 2713 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return super () . min_wavelength max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 2715 2716 2717 2718 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return super () . max_wavelength BaseModelAQ63xx ( resource_name , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOSA Optical Spectrum Analyzer AQ6360 and AQ6370 series from Yokogawa. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 2751 2752 2753 2754 2755 2756 2757 2758 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( BaseModelAQ63xx , self ) . __init__ ( resource_name , ** kwargs ) self . command ( ':FORMat:DATA ASCii' ) # set data format to ascii ANALYSIS_CATEGORIES = ( 'SWTHRESH' , 'DFBLD' , 'SMSR' , 'WDM' ) class-attribute \u00a4 SWEEP_MODES = ( 'AUTO' , 'REPEAT' , 'SINGLE' , 'STOP' ) class-attribute \u00a4 MARKER_NUMBERS = ( 0 , 1 , 2 , 3 , 4 ) class-attribute \u00a4 X_SCALES = ( 'WAV' , 'FREQ' ) class-attribute \u00a4 WL_UNITS = ( 'NM' , 'THZ' ) class-attribute \u00a4 min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 2760 2761 2762 2763 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 2765 2766 2767 2768 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency get_x_scale () \u00a4 Queries the horizontal scale. Returns: Type Description Literal ['WAV', 'FREQ'] WAV = Wavelength, FREQ = Frequency Source code in pyinst\\models.py 2770 2771 2772 2773 2774 2775 2776 2777 2778 def get_x_scale ( self ) -> Literal [ \"WAV\" , \"FREQ\" ]: \"\"\"Queries the horizontal scale. Returns: `WAV` = Wavelength, `FREQ` = Frequency \"\"\" cmd = \":UNIT:X?\" scale = self . X_SCALES [ int ( self . query ( cmd ))] return scale set_x_scale ( scale ) \u00a4 Sets the horizontal scale. Parameters: Name Type Description Default scale Literal ['WAV', 'FREQ'] WAV = Wavelength, FREQ = Frequency required Source code in pyinst\\models.py 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 def set_x_scale ( self , scale : Literal [ \"WAV\" , \"FREQ\" ]) -> None : \"\"\"Sets the horizontal scale. Args: scale: `WAV` = Wavelength, `FREQ` = Frequency \"\"\" if scale not in self . X_SCALES : raise ValueError ( f \"Invalid value for parameter scale: { scale !r} \" ) cmd = f \":UNIT:X { scale } \" self . command ( cmd ) get_resolution_bandwidth () \u00a4 Queries the measurement resolution bandwidth. Returns: Type Description float The resolution bandwidth. If x scale is \"WAV\", returns the resolution in nm. If x scale is \"FREQ\", returns the resolution in GHz. Please refer to get_x_scale for more information. Source code in pyinst\\models.py 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 def get_resolution_bandwidth ( self ) -> float : \"\"\"Queries the measurement resolution bandwidth. Returns: The resolution bandwidth. If x scale is \"WAV\", returns the resolution in nm. If x scale is \"FREQ\", returns the resolution in GHz. Please refer to `get_x_scale` for more information. \"\"\" cmd = \":SENSe:BANDwidth?\" if \"WAV\" == self . get_x_scale (): res = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : res = float ( Decimal ( self . query ( cmd )) / 10 ** 9 ) return res set_resolution_bandwidth ( bandwidth ) \u00a4 Sets the measurement resolution bandwidth. Note that only particular values could be set. If the setting value is not contained in these values, it will set to the nearest valid value. You can get these values for both x scale via _resolution_table property. Please refer to get_x_scale for more information. Parameters: Name Type Description Default bandwidth int | float The resolution bandwidth. If x scale is \"WAV\", the unit is nm. If x scale is \"FREQ\", the unit is GHz. required Source code in pyinst\\models.py 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 def set_resolution_bandwidth ( self , bandwidth : int | float ) -> None : \"\"\"Sets the measurement resolution bandwidth. Note that only particular values could be set. If the setting value is not contained in these values, it will set to the nearest valid value. You can get these values for both x scale via `_resolution_table` property. Please refer to `get_x_scale` for more information. Args: bandwidth: The resolution bandwidth. If x scale is \"WAV\", the unit is nm. If x scale is \"FREQ\", the unit is GHz. \"\"\" unit = \"NM\" if self . get_x_scale () == \"WAV\" else \"GHZ\" min_bw = self . _resolution_table [ unit ][ 0 ] # first in table max_bw = self . _resolution_table [ unit ][ - 1 ] # last in table if not min_bw <= bandwidth <= max_bw : raise ValueError ( f \"Parameter bandwidth must be in range [ { min_bw } , { max_bw } ], got { bandwidth !r} \" ) cmd = \":SENSe:BANDwidth {bandwidth:.6f}{unit} \" . format ( bandwidth = bandwidth , unit = unit ) self . command ( cmd ) set_center ( value , unit ) \u00a4 Sets the measurement center wavelength/frequency. Parameters: Name Type Description Default value int | float The center wavelength in nm or frequency in THz. required unit str NM or THZ . required Source code in pyinst\\models.py 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 def set_center ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the measurement center wavelength/frequency. Args: value: The center wavelength in nm or frequency in THz. unit: `NM` or `THZ`. \"\"\" if unit . upper () not in self . WL_UNITS : raise ValueError ( 'Invalid option for unit: {unit!r} .' . format ( unit = unit )) cmd = \":SENSe:WAVelength:CENTer {value:.4f}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd ) set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 2844 2845 2846 2847 2848 2849 2850 2851 2852 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) self . set_center ( wavelength , 'NM' ) set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 2854 2855 2856 2857 2858 2859 2860 2861 2862 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f \"Parameter frequency is out of range: { frequency !r} \" ) return self . set_center ( frequency , 'THZ' ) get_center () \u00a4 Queries the measurement center wavelength/frequency. Returns: Type Description float The of center frequency/wavelength value. If x scale is \"WAV\", returns the center wavelength in nm. If x scale is \"FREQ\", returns the center frequency in THz. Please refer to get_x_scale for more information. Source code in pyinst\\models.py 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 def get_center ( self ) -> float : \"\"\" Queries the measurement center wavelength/frequency. Returns: The of center frequency/wavelength value. If x scale is \"WAV\", returns the center wavelength in nm. If x scale is \"FREQ\", returns the center frequency in THz. Please refer to `get_x_scale` for more information. \"\"\" cmd = \":SENSe:WAVelength:CENTer?\" if \"WAV\" == self . get_x_scale (): center = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : center = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return center get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:CENTer?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : wl = super () . get_wavelength () return wl get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:CENTer?\" freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) else : freq = super () . get_frequency () return freq set_span ( value ) \u00a4 Sets the measurement condition measurement span. If the horizontal scale is \"WAV\", the span unit is nm. If the horizontal scale is \"FREQ\", the span unit is GHz. Please refer to get_x_scale for more information. Parameters: Name Type Description Default value int | float The value of measurement span. The unit depends on the horizontal setting. required Source code in pyinst\\models.py 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 def set_span ( self , value : int | float ) -> None : \"\"\"Sets the measurement condition measurement span. If the horizontal scale is \"WAV\", the span unit is nm. If the horizontal scale is \"FREQ\", the span unit is GHz. Please refer to `get_x_scale` for more information. Args: value: The value of measurement span. The unit depends on the horizontal setting. \"\"\" unit = \"NM\" if self . get_x_scale () == \"WAV\" else \"GHZ\" min_span , max_span = self . _x_span_range [ unit ] if not min_span <= value <= max_span : raise ValueError ( f \"Parameter value must be in range [ { min_span } , { max_span } ], got { value !r} \" ) cmd = \":SENSe:WAVelength:SPAN {value:.2f}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd ) get_span () \u00a4 Queries the measurement condition measurement span in specified unit. If the horizontal scale is \"WAV\", the span unit is nm. If the horizontal scale is \"FREQ\", the span unit is GHz. Please refer to get_x_scale for more information. Returns: Type Description float The value of measurement span. The unit depends on the horizontal setting. Source code in pyinst\\models.py 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 def get_span ( self ) -> float : \"\"\"Queries the measurement condition measurement span in specified unit. If the horizontal scale is \"WAV\", the span unit is nm. If the horizontal scale is \"FREQ\", the span unit is GHz. Please refer to `get_x_scale` for more information. Returns: The value of measurement span. The unit depends on the horizontal setting. \"\"\" cmd = \":SENSe:WAVelength:SPAN?\" if \"WAV\" == self . get_x_scale (): span = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : span = float ( Decimal ( self . query ( cmd )) / 10 ** 9 ) return span get_start_wavelength () \u00a4 Queries the measurement start wavelength in nm. Returns: Type Description float The start wavelength in nm. Source code in pyinst\\models.py 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 def get_start_wavelength ( self ) -> float : \"\"\"Queries the measurement start wavelength in nm. Returns: The start wavelength in nm. \"\"\" if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STARt?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : cmd = \":SENSe:WAVelength:STOP?\" wl = LIGHTSPEED / ( float ( self . query ( cmd )) / 10 ** 12 ) return wl set_start_wavelength ( wavelength ) \u00a4 Sets the measurement start wavelength in nm. Parameters: Name Type Description Default wavelength int | float The start wavelength in nm. required Source code in pyinst\\models.py 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 def set_start_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Sets the measurement start wavelength in nm. Args: wavelength: The start wavelength in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STARt {wl:.6f} NM\" . format ( wl = wavelength ) else : cmd = \":SENSe:WAVelength:STOP {wl:.6f} NM\" . format ( wl = wavelength ) self . command ( cmd ) get_stop_wavelength () \u00a4 Queries the measurement stop wavelength in nm. Returns: Type Description float The stop wavelength in nm. Source code in pyinst\\models.py 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 def get_stop_wavelength ( self ) -> float : \"\"\"Queries the measurement stop wavelength in nm. Returns: The stop wavelength in nm. \"\"\" if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STOP?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : cmd = \":SENSe:WAVelength:STARt?\" wl = LIGHTSPEED / ( float ( self . query ( cmd )) / 10 ** 12 ) return wl set_stop_wavelength ( wavelength ) \u00a4 Sets the measurement stop wavelength in nm. Parameters: Name Type Description Default wavelength int | float The stop wavelength in nm. required Source code in pyinst\\models.py 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 def set_stop_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Sets the measurement stop wavelength in nm. Args: wavelength: The stop wavelength in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STOP {wl:.6f} NM\" . format ( wl = wavelength ) else : cmd = \":SENSe:WAVelength:STARt {wl:.6f} NM\" . format ( wl = wavelength ) self . command ( cmd ) get_start_frequency () \u00a4 Queries the measurement start frequency in THz. Returns: Type Description float The start frequency in THz. Source code in pyinst\\models.py 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 def get_start_frequency ( self ) -> float : \"\"\"Queries the measurement start frequency in THz. Returns: The start frequency in THz. \"\"\" if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STARt?\" f = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) else : cmd = \":SENSe:WAVelength:STOP?\" f = LIGHTSPEED / ( float ( self . query ( cmd )) * 10 ** 9 ) return f set_start_frequency ( frequency ) \u00a4 Sets the measurement start frequency in THz. Parameters: Name Type Description Default frequency int | float The start frequency in THz. required Source code in pyinst\\models.py 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 def set_start_frequency ( self , frequency : int | float ) -> None : \"\"\"Sets the measurement start frequency in THz. Args: frequency: The start frequency in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f \"Parameter frequency is out of range: { frequency !r} \" ) if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STARt {freq:.6f} THZ\" . format ( freq = frequency ) else : cmd = \":SENSe:WAVelength:STOP {freq:.6f} THZ\" . format ( freq = frequency ) self . command ( cmd ) get_stop_frequency () \u00a4 Queries the measurement stop frequency in THz. Returns: Type Description float The stop frequency in THz. Source code in pyinst\\models.py 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 def get_stop_frequency ( self ) -> float : \"\"\"Queries the measurement stop frequency in THz. Returns: The stop frequency in THz. \"\"\" if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STOP?\" f = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) else : cmd = \":SENSe:WAVelength:STARt?\" f = LIGHTSPEED / ( float ( self . query ( cmd )) * 10 ** 9 ) return f set_stop_frequency ( frequency ) \u00a4 Sets the measurement stop frequency in THz. Parameters: Name Type Description Default frequency int | float The stop frequency in THz. required Source code in pyinst\\models.py 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 def set_stop_frequency ( self , frequency : int | float ) -> None : \"\"\"Sets the measurement stop frequency in THz. Args: frequency: The stop frequency in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f \"Parameter frequency is out of range: { frequency !r} \" ) if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STOP {freq:.6f} THZ\" . format ( freq = frequency ) else : cmd = \":SENSe:WAVelength:STARt {freq:.6f} THZ\" . format ( freq = frequency ) self . command ( cmd ) sweep ( mode = 'REPEAT' ) \u00a4 Sets the sweep mode and makes a sweep. For information about the sweep modes, please refer to documentation of the instrument. Parameters: Name Type Description Default mode str Sweep mode. AUTO | REPEAT | SINGLE | STOP . 'REPEAT' Source code in pyinst\\models.py 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 def sweep ( self , mode : str = \"REPEAT\" ) -> None : \"\"\"Sets the sweep mode and makes a sweep. For information about the sweep modes, please refer to documentation of the instrument. Args: mode: Sweep mode. `AUTO` | `REPEAT` | `SINGLE` | `STOP`. \"\"\" if mode not in self . SWEEP_MODES : raise ValueError ( f \"Invalid value for parameter mode: { mode !r} \" ) if mode == \"STOP\" : self . command ( ':ABOR' ) else : self . command ( f ':INIT:SMOD { mode } ;:INIT' ) run () \u00a4 Makes a REPEAT sweep. Source code in pyinst\\models.py 3074 3075 3076 def run ( self ) -> None : \"\"\"Makes a REPEAT sweep.\"\"\" self . command ( ':INIT:SMOD REPEAT;:INIT' ) stop () \u00a4 Stops sweep. Source code in pyinst\\models.py 3078 3079 3080 def stop ( self ) -> None : \"\"\"Stops sweep.\"\"\" self . command ( ':ABOR' ) single () \u00a4 Makes a SINGLE sweep. Source code in pyinst\\models.py 3082 3083 3084 def single ( self ) -> None : \"\"\"Makes a SINGLE sweep.\"\"\" self . command ( ':INIT:SMOD SINGLE;:INIT' ) get_sweep_speed () \u00a4 Queries the sweep speed. Returns: Type Description int 0 = Standard speed (1x), int 1 = Twice as fast as standard (2x) Source code in pyinst\\models.py 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 def get_sweep_speed ( self ) -> int : \"\"\" Queries the sweep speed. Returns: 0 = Standard speed (1x), 1 = Twice as fast as standard (2x) \"\"\" cmd = \":SENSE:SWEEP:SPEED?\" return int ( self . query ( cmd )) set_sweep_speed ( speed ) \u00a4 Sets the sweep speed. Parameters: Name Type Description Default speed int 0 = Standard speed (1x), 1 = Twice as fast as standard (2x) required Source code in pyinst\\models.py 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 def set_sweep_speed ( self , speed : int ) -> None : \"\"\" Sets the sweep speed. Args: speed: 0 = Standard speed (1x), 1 = Twice as fast as standard (2x) \"\"\" if speed not in { 0 , 1 }: raise ValueError ( \"The value of parameter speed must be 0 or 1\" ) cmd = f \":SENSE:SWEEP:SPEED { speed : d } \" self . command ( cmd ) set_auto_zero ( enable ) \u00a4 Sets whether to enable the auto zeroing of the level. Parameters: Name Type Description Default enable bool Whether to enable the auto zeroing of the level. required Source code in pyinst\\models.py 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 def set_auto_zero ( self , enable : bool ) -> None : \"\"\"Sets whether to enable the auto zeroing of the level. Args: enable: Whether to enable the auto zeroing of the level. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter status must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = f \":CALibration:ZERO { enable : d } \" self . command ( cmd ) get_auto_zero () \u00a4 Queries whether the auto zeroing of the level is enabled. Returns: Type Description bool Whether the auto zeroing is enabled. Source code in pyinst\\models.py 3121 3122 3123 3124 3125 3126 3127 3128 3129 def get_auto_zero ( self ) -> bool : \"\"\"Queries whether the auto zeroing of the level is enabled. Returns: Whether the auto zeroing is enabled. \"\"\" cmd = \":CALibration:ZERO?\" status = bool ( int ( self . query ( cmd ))) return status zero_once () \u00a4 Perform zeroing of the level once. Source code in pyinst\\models.py 3131 3132 3133 def zero_once ( self ) -> None : \"\"\"Perform zeroing of the level once.\"\"\" self . command ( \":CALibration:ZERO ONCE\" ) set_auto_analysis ( enable ) \u00a4 Sets whether to enable the automatic analysis function. Parameters: Name Type Description Default enable bool Whether to enable automatic analysis function. required Source code in pyinst\\models.py 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 def set_auto_analysis ( self , enable : bool ) -> None : \"\"\"Sets whether to enable the automatic analysis function. Args: enable: Whether to enable automatic analysis function. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = \":CALCulate:AUTO {enable:d} \" . format ( enable = enable ) self . command ( cmd ) get_auto_analysis () \u00a4 Queries if the automatic analysis function is enabled. Returns: Type Description bool Whether the automatic analysis function is enabled. Source code in pyinst\\models.py 3146 3147 3148 3149 3150 3151 3152 3153 3154 def get_auto_analysis ( self ) -> bool : \"\"\"Queries if the automatic analysis function is enabled. Returns: Whether the automatic analysis function is enabled. \"\"\" cmd = \":CALCulate:AUTO?\" enabled = bool ( int ( self . query ( cmd ))) return enabled set_analysis_category ( category ) \u00a4 Sets the analysis category. Parameters: Name Type Description Default category str The type of analysis. SWTHRESH : Spectrum width analysis (THRESH) DFBLD : DFB-LD parameter analysis SMSR : SMSR analysis WDM : WDM analysis required Source code in pyinst\\models.py 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 def set_analysis_category ( self , category : str ) -> None : \"\"\"Sets the analysis category. Args: category: The type of analysis. - `SWTHRESH`: Spectrum width analysis (THRESH) - `DFBLD`: DFB-LD parameter analysis - `SMSR`: SMSR analysis - `WDM`: WDM analysis \"\"\" if category not in self . ANALYSIS_CATEGORIES : raise ValueError ( 'Invalid option of category: %r ' % category ) cmd = \":CALCulate:CATegory {cat} \" . format ( cat = category ) self . command ( cmd ) get_analysis_category () \u00a4 Queries the type of analysis. Returns: Type Description str The type of analysis. SWTHRESH | DFBLD | SMSR | WDM . Please refer to set_analysis_category for detail. Source code in pyinst\\models.py 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 def get_analysis_category ( self ) -> str : \"\"\"Queries the type of analysis. Returns: The type of analysis. `SWTHRESH` | `DFBLD` | `SMSR` | `WDM`. Please refer to `set_analysis_category` for detail. \"\"\" cat_dict = { 0 : \"SWTHRESH\" , 5 : \"DFBLD\" , 8 : \"SMSR\" , 11 : \"WDM\" } cmd = \":CALCulate:CATegory?\" cat = cat_dict [ int ( self . query ( cmd ))] return cat set_wdm_threshold ( threshold ) \u00a4 Set the threshold level of channel detection for the WDM analysis function. The range of the threshold: 0.1 <= threshold <= 99.9 Parameters: Name Type Description Default threshold int | float The threshold level value in dB. required Source code in pyinst\\models.py 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 def set_wdm_threshold ( self , threshold : int | float ) -> None : \"\"\" Set the threshold level of channel detection for the WDM analysis function. The range of the threshold: 0.1 <= threshold <= 99.9 Args: threshold: The threshold level value in dB. \"\"\" if not 0.1 <= threshold <= 99.9 : raise ValueError ( f 'Parameter threshold must be in range [0.1, 99.9], got { threshold !r} ' ) cmd = \":CALCulate:PARameter:WDM:TH {th:.2f} DB\" . format ( th = threshold ) self . command ( cmd ) get_wdm_threshold () \u00a4 Queries the threshold level of channel detection for the WDM analysis function. Returns: Type Description float The threshold level value in dB. Source code in pyinst\\models.py 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 def get_wdm_threshold ( self ) -> float : \"\"\" Queries the threshold level of channel detection for the WDM analysis function. Returns: The threshold level value in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:TH?\" th = float ( self . query ( cmd )) return th set_wdm_mdiff ( mdiff ) \u00a4 Sets the peak bottom difference of channel detection for the WDM analysis function. The range of the mdiff: 0.01 <= mdiff <= 50 Parameters: Name Type Description Default mdiff int | float The peak-bottom difference in dB. required Source code in pyinst\\models.py 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 def set_wdm_mdiff ( self , mdiff : int | float ) -> None : \"\"\" Sets the peak bottom difference of channel detection for the WDM analysis function. The range of the mdiff: 0.01 <= mdiff <= 50 Args: mdiff: The peak-bottom difference in dB. \"\"\" if not 0.01 <= mdiff <= 50 : raise ValueError ( f 'Parameter mdiff must be in range [0.01, 50], got { mdiff !r} ' ) cmd = \":CALCulate:PARameter:WDM:MDIFf {mdiff:.2f} DB\" . format ( mdiff = mdiff ) self . command ( cmd ) get_wdm_mdiff () \u00a4 Queries the peak bottom difference of channel detection for the WDM analysis function. Returns: Type Description float The peak-bottom difference in dB. Source code in pyinst\\models.py 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 def get_wdm_mdiff ( self ) -> float : \"\"\" Queries the peak bottom difference of channel detection for the WDM analysis function. Returns: The peak-bottom difference in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:MDIFf?\" mdiff = float ( self . query ( cmd )) return mdiff set_wdm_dmask ( dmask ) \u00a4 Sets the channel display mask threshold level for the WDM analysis function. The range of the dmask: -100 <= dmask <= 0. Set dmask to -999 will turn off the display mask. Parameters: Name Type Description Default dmask int | float The channel mask threshold level in dB. required Source code in pyinst\\models.py 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 def set_wdm_dmask ( self , dmask : int | float ) -> None : \"\"\" Sets the channel display mask threshold level for the WDM analysis function. The range of the dmask: -100 <= dmask <= 0. Set dmask to -999 will turn off the display mask. Args: dmask: The channel mask threshold level in dB. \"\"\" if dmask != - 999 and not - 100 <= dmask <= 0 : raise ValueError ( f 'Parameter dmask must be in range [-100, 0], got { dmask !r} ' ) cmd = \":CALCulate:PARameter:WDM:DMASk {dmask:.2f} DB\" . format ( dmask = dmask ) self . command ( cmd ) get_wdm_dmask () \u00a4 Queries the channel display mask threshold level for the WDM analysis function. If the display mask is turned off, -999.0 will be returned Returns: Type Description float The channel mask threshold level in dB. Source code in pyinst\\models.py 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 def get_wdm_dmask ( self ) -> float : \"\"\" Queries the channel display mask threshold level for the WDM analysis function. If the display mask is turned off, `-999.0` will be returned Returns: The channel mask threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:DMASk?\" dmask = float ( self . query ( cmd )) return dmask set_wdm_nalgo ( algo ) \u00a4 Sets the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: AFIX = AUTO FIX MFIX = MANUAL FIX ACEN = AUTO CENTER MCEN = MANUAL CENTER PIT = PIT Parameters: Name Type Description Default algo str The name of algorithm. Refer to options above. required Source code in pyinst\\models.py 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 def set_wdm_nalgo ( self , algo : str ) -> None : \"\"\" Sets the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `AFIX` = AUTO FIX - `MFIX` = MANUAL FIX - `ACEN` = AUTO CENTER - `MCEN` = MANUAL CENTER - `PIT` = PIT Args: algo: The name of algorithm. Refer to options above. \"\"\" algo_options = [ \"AFIX\" , \"MFIX\" , \"ACEN\" , \"MCEN\" , \"PIT\" ] if algo . upper () not in algo_options : raise ValueError ( \"Invalid value for algo: {value!r} \" . format ( value = algo )) cmd = \":CALCulate:PARameter:WDM:NALGo {algo} \" . format ( algo = algo ) self . command ( cmd ) get_wdm_nalgo () \u00a4 Queries the measurement algorithm applied to noise level measurements made by the WDM analysis function. Bug For model AQ6370B, this method can not get a valid reply. This is caused by the corresponding issue of the instrument firmware. This issue still exists even we upgrade the instrument firmware to the latest version R03.04 . Since AQ6370B is out of date, this issue might never be fixed. But set_wdm_nalgo works normally. Other sub-models of AQ6370 (such as AQ6370C, AQ6370D) are not affected. Options of algorithms: AFIX = AUTO FIX MFIX = MANUAL FIX ACEN = AUTO CENTER MCEN = MANUAL CENTER PIT = PIT Returns: Type Description str The name of algorithm. Refer to options above. Source code in pyinst\\models.py 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 def get_wdm_nalgo ( self ) -> str : \"\"\" Queries the measurement algorithm applied to noise level measurements made by the WDM analysis function. Bug: For model AQ6370B, this method can not get a valid reply. This is caused by the corresponding issue of the instrument firmware. This issue still exists even we upgrade the instrument firmware to the latest version `R03.04`. Since AQ6370B is out of date, this issue might never be fixed. But `set_wdm_nalgo` works normally. Other sub-models of AQ6370 (such as AQ6370C, AQ6370D) are not affected. Options of algorithms: - `AFIX` = AUTO FIX - `MFIX` = MANUAL FIX - `ACEN` = AUTO CENTER - `MCEN` = MANUAL CENTER - `PIT` = PIT Returns: The name of algorithm. Refer to options above. \"\"\" algo_options = [ \"AFIX\" , \"MFIX\" , \"ACEN\" , \"MCEN\" , \"PIT\" ] cmd = \":CALCulate:PARameter:WDM:NALGo?\" algo = algo_options [ int ( self . query ( cmd ))] return algo set_wdm_narea ( narea ) \u00a4 Sets the measuring range applied to noise level measurements made by the WDM analysis function. The range of the narea: 0.01 <= narea <= 10 Parameters: Name Type Description Default narea int | float The range in nm. required Source code in pyinst\\models.py 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 def set_wdm_narea ( self , narea : int | float ) -> None : \"\"\"Sets the measuring range applied to noise level measurements made by the WDM analysis function. The range of the narea: 0.01 <= narea <= 10 Args: narea: The range in nm. \"\"\" if not 0.01 <= narea <= 10 : raise ValueError ( f 'Parameter narea must be in range [0.01, 10], got { narea !r} ' ) cmd = \":CALCulate:PARameter:WDM:NARea {narea:.2f} NM\" . format ( narea = narea ) self . command ( cmd ) get_wdm_narea () \u00a4 Quereis the measuring range applied to noise level measurements made by the WDM analysis function. Returns: Type Description float The range in nm. Source code in pyinst\\models.py 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 def get_wdm_narea ( self ) -> float : \"\"\"Quereis the measuring range applied to noise level measurements made by the WDM analysis function. Returns: The range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NARea?\" narea = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return narea set_wdm_marea ( marea ) \u00a4 Sets the mask range during level measurement applied to noise level measurements made by the WDM analysis function. The range of the marea: 0.01 <= marea <= 10 Parameters: Name Type Description Default marea int | float The mask range in nm. required Source code in pyinst\\models.py 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 def set_wdm_marea ( self , marea : int | float ) -> None : \"\"\"Sets the mask range during level measurement applied to noise level measurements made by the WDM analysis function. The range of the marea: 0.01 <= marea <= 10 Args: marea: The mask range in nm. \"\"\" if not 0.01 <= marea <= 10 : raise ValueError ( f 'Parameter marea must be in range [0.01, 10], got { marea !r} ' ) cmd = \":CALCulate:PARameter:WDM:MARea {marea:.2f} NM\" . format ( marea = marea ) self . command ( cmd ) get_wdm_marea () \u00a4 Queries the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Returns: Type Description float The mask range in nm. Source code in pyinst\\models.py 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 def get_wdm_marea ( self ) -> float : \"\"\"Queries the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Returns: The mask range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:MARea?\" marea = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return marea set_wdm_falgo ( algo ) \u00a4 Sets the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: LIN = LINEAR GAUS = GAUSS LOR = LORENZ 3RD = 3RD POLY 4TH = 4TH POLY 5TH = 5TH POLY Parameters: Name Type Description Default algo str The name of the algorithm. Refer to options above. required Source code in pyinst\\models.py 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 def set_wdm_falgo ( self , algo : str ) -> None : \"\"\"Sets the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `LIN` = LINEAR - `GAUS` = GAUSS - `LOR` = LORENZ - `3RD` = 3RD POLY - `4TH` = 4TH POLY - `5TH` = 5TH POLY Args: algo: The name of the algorithm. Refer to options above. \"\"\" algo_options = [ \"LIN\" , \"GAUS\" , \"LOR\" , \"3RD\" , \"4TH\" , \"5TH\" ] if algo . upper () not in algo_options : raise ValueError ( \"Invalid value for algo: {value!r} \" . format ( value = algo )) cmd = \":CALCulate:PARameter:WDM:FALGo {algo} \" . format ( algo = algo ) self . command ( cmd ) get_wdm_falgo () \u00a4 Queries the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: LIN = LINEAR GAUS = GAUSS LOR = LORENZ 3RD = 3RD POLY 4TH = 4YH POLY 5TH = 5TH POLY Returns: Type Description str The name of the algorithm. Refer to options above. Source code in pyinst\\models.py 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 def get_wdm_falgo ( self ) -> str : \"\"\"Queries the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `LIN` = LINEAR - `GAUS` = GAUSS - `LOR` = LORENZ - `3RD` = 3RD POLY - `4TH` = 4YH POLY - `5TH` = 5TH POLY Returns: The name of the algorithm. Refer to options above. \"\"\" algo_options = [ \"LIN\" , \"GAUS\" , \"LOR\" , \"3RD\" , \"4TH\" , \"5TH\" ] cmd = \":CALCulate:PARameter:WDM:FALGo?\" algo = algo_options [ int ( self . query ( cmd ))] return algo set_wdm_nbw ( nbw ) \u00a4 Sets the noise bandwidth for the WDM analysis function. The range of the nbw: 0.01 <= nbw <= 1.0 Parameters: Name Type Description Default nbw int | float The noise bandwidth in nm. required Source code in pyinst\\models.py 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 def set_wdm_nbw ( self , nbw : int | float ) -> None : \"\"\"Sets the noise bandwidth for the WDM analysis function. The range of the nbw: 0.01 <= nbw <= 1.0 Args: nbw: The noise bandwidth in nm. \"\"\" if not 0.01 <= nbw <= 1.0 : raise ValueError ( f 'Parameter nbw must be in range [0.01, 1.0], but got { nbw !r} ' ) cmd = \":CALCulate:PARameter:WDM:NBW {nbw:.2f} NM\" . format ( nbw = nbw ) self . command ( cmd ) get_wdm_nbw () \u00a4 Queries the noise bandwidth for the WDM analysis function. Returns: Type Description float The noise bandwidth in nm. Source code in pyinst\\models.py 3428 3429 3430 3431 3432 3433 3434 3435 3436 def get_wdm_nbw ( self ) -> float : \"\"\"Queries the noise bandwidth for the WDM analysis function. Returns: The noise bandwidth in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NBW?\" nbw = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return nbw set_smsr_mask ( mask ) \u00a4 Set the mask value for the SMSR analysis function. The range of the mask: 0.01 <= mask <= 99.99 Parameters: Name Type Description Default mask int | float The mask value in nm. required Source code in pyinst\\models.py 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 def set_smsr_mask ( self , mask : int | float ) -> None : \"\"\"Set the mask value for the SMSR analysis function. The range of the mask: 0.01 <= mask <= 99.99 Args: mask: The mask value in nm. \"\"\" if not 0 <= mask <= 99.99 : raise ValueError ( f 'Parameter mask must be in range [0.01, 99.99], but got { mask !r} ' ) cmd = \":CALCulate:PARameter:SMSR:MASK {mask:.2f} NM\" . format ( mask = mask ) self . command ( cmd ) get_smsr_mask () \u00a4 Quereis the mask value for the SMSR analysis function. Returns: Type Description None The mask value in nm. Source code in pyinst\\models.py 3451 3452 3453 3454 3455 3456 3457 3458 3459 def get_smsr_mask ( self ) -> None : \"\"\"Quereis the mask value for the SMSR analysis function. Returns: The mask value in nm. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MASK?\" mask = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return mask set_smsr_mode ( mode ) \u00a4 Sets the analysis mode for the SMSR analysis function. Note AQ6370B has no SMSR3/SMSR4 mode. Parameters: Name Type Description Default mode str The analysis mode, SMSR1 | SMSR2 | SMSR3 | SMSR4 . required Source code in pyinst\\models.py 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 def set_smsr_mode ( self , mode : str ) -> None : \"\"\"Sets the analysis mode for the SMSR analysis function. Note: AQ6370B has no SMSR3/SMSR4 mode. Args: mode: The analysis mode, `SMSR1`|`SMSR2`|`SMSR3`|`SMSR4`. \"\"\" options = [ \"SMSR1\" , \"SMSR2\" , \"SMSR3\" , \"SMSR4\" ] if mode not in options : raise ValueError ( \"Invalid option for mode: {mode!r} \" . format ( mode = mode )) cmd = \":CALCulate:PARameter:SMSR:MODE {mode} \" . format ( mode = mode ) self . command ( cmd ) get_smsr_mode () \u00a4 Sets the analysis mode for the SMSR analysis function. Returns: Type Description str The analysis mode, SMSR1 | SMSR2 | SMSR3 | SMSR4 . Source code in pyinst\\models.py 3476 3477 3478 3479 3480 3481 3482 3483 3484 def get_smsr_mode ( self ) -> str : \"\"\"Sets the analysis mode for the SMSR analysis function. Returns: The analysis mode, `SMSR1`|`SMSR2`|`SMSR3`|`SMSR4`. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MODE?\" mode = self . query ( cmd ) . strip () return mode set_dfbld_parameter ( item , parameter , data ) \u00a4 Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Parameters: Name Type Description Default item str Analytical item that sets parameter(s). required parameter str Parameter to be set. required data str Setting data. required <item> <parameter> <data> SWIDth ALGO ENVelope|THResh|RMS|PKRMs TH <NRf>[DB] TH2 <NRf>[DB] K <NRf> MFIT OFF|ON|0|1 MDIFf <NRf>[DB] SMSR SMODe SMSR1|SMSR2|SMSR3|SMSR4 SMASk <NRf>[M] MDIFf <NRf>[DB] RMS ALGO RMS|PKRMs TH <NRf>[DB] K <NRf> MDIFf <NRf>[DB] POWer SPAN <NRf>[M] OSNR MDIFf <NRf>[DB] NALGo AFIX|MFIX|ACENter|MCENter|PIT|0|1|2|3|4 NARea <NRf>[M] MARea <NRf>[M] FALGo LINear|GAUSs|LORenz|3RD|4TH|5TH|0|1|2|3|4|5 NBW <NRf>[M] SPOWer PEAK|INTegral|0|1 IRANge <NRf> Source code in pyinst\\models.py 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 def set_dfbld_parameter ( self , item : str , parameter : str , data : str ) -> None : \"\"\"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Args: item: Analytical item that sets parameter(s). parameter: Parameter to be set. data: Setting data. |`<item>`|`<parameter>`|`<data>`| |--------|-------------|--------| |SWIDth |ALGO |`ENVelope|THResh|RMS|PKRMs`| | |TH |`<NRf>[DB]`| | |TH2 |`<NRf>[DB]`| | |K |`<NRf>`| | |MFIT |`OFF|ON|0|1`| | |MDIFf |`<NRf>[DB]`| |SMSR |SMODe |`SMSR1|SMSR2|SMSR3|SMSR4`| | |SMASk |`<NRf>[M]`| | |MDIFf |`<NRf>[DB]`| |RMS |ALGO |`RMS|PKRMs`| | |TH |`<NRf>[DB]`| | |K |`<NRf>`| | |MDIFf |`<NRf>[DB]`| |POWer |SPAN |`<NRf>[M]`| |OSNR |MDIFf |`<NRf>[DB]`| | |NALGo |`AFIX|MFIX|ACENter|MCENter|PIT|0|1|2|3|4`| | |NARea |`<NRf>[M]`| | |MARea |`<NRf>[M]`| | |FALGo |`LINear|GAUSs|LORenz|3RD|4TH|5TH|0|1|2|3|4|5`| | |NBW |`<NRf>[M]`| | |SPOWer |`PEAK|INTegral|0|1`| | |IRANge |`<NRf>`| \"\"\" cmd = \":CALCulate:PARameter:DFBLd {item} , {parameter} , {data} \" . format ( item = item , parameter = parameter , data = data ) self . command ( cmd ) get_dfbld_parameter ( item , parameter ) \u00a4 Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Parameters: Name Type Description Default item str Analytical item that sets parameter(s). required parameter str Parameter to be set. required Returns: Type Description str A string of the value of parameter. Please refer to set_dfbld_parameter for detail. Source code in pyinst\\models.py 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 3537 3538 3539 def get_dfbld_parameter ( self , item : str , parameter : str ) -> str : \"\"\"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Args: item: Analytical item that sets parameter(s). parameter: Parameter to be set. Returns: A string of the value of parameter. Please refer to `set_dfbld_parameter` for detail. \"\"\" cmd = \":CALCulate:PARameter:DFBLd? {item} , {parameter} \" . format ( item = item , parameter = parameter ) return self . query ( cmd ) set_swthresh_k ( k ) \u00a4 Sets the magnification of the THRESH method-based spectrum width analysis function. The range of the k: 1.0 <= k <= 10.0 Parameters: Name Type Description Default k int | float The magnification. required Source code in pyinst\\models.py 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 3553 def set_swthresh_k ( self , k : int | float ) -> None : \"\"\"Sets the magnification of the THRESH method-based spectrum width analysis function. The range of the k: 1.0 <= k <= 10.0 Args: k: The magnification. \"\"\" if not 1.0 <= k <= 10.0 : raise ValueError ( f 'Parameter k must be in range [1.0, 10.0], but got { k !r} ' ) cmd = \":CALCulate:PARameter:SWTHResh:K {k:.2f} \" . format ( k = k ) self . command ( cmd ) get_swthresh_k () \u00a4 Sets the magnification of the THRESH method-based spectrum width analysis function. Returns: Type Description float The magnification. Source code in pyinst\\models.py 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 def get_swthresh_k ( self ) -> float : \"\"\"Sets the magnification of the THRESH method-based spectrum width analysis function. Returns: The magnification. \"\"\" cmd = \":CALCulate:PARameter:SWTHResh:K?\" k = float ( self . query ( cmd )) return k set_swthresh_mfit ( en ) \u00a4 Sets whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Parameters: Name Type Description Default en bool Whether to enable the mode fit. required Source code in pyinst\\models.py 3566 3567 3568 3569 3570 3571 3572 3573 3574 3575 3576 def set_swthresh_mfit ( self , en : bool ) -> None : \"\"\"Sets whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Args: en: Whether to enable the mode fit. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":CALCulate:PARameter:SWTHresh:MFIT {en:d} \" . format ( en = en ) self . command ( cmd ) get_swthresh_mfit () \u00a4 Queries whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Returns: Type Description bool Whether to enable the mode fit. Source code in pyinst\\models.py 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 def get_swthresh_mfit ( self ) -> bool : \"\"\"Queries whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Returns: Whether to enable the mode fit. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:MFIT?\" en = bool ( int ( self . query ( cmd ))) return en set_swthresh_th ( th ) \u00a4 Sets the threshold level of the THRESH method-based spectrum width analysis function. The range of the th: 0.01 <= th <= 50.0 Parameters: Name Type Description Default th int | float The threshold level in dB. required Source code in pyinst\\models.py 3589 3590 3591 3592 3593 3594 3595 3596 3597 3598 3599 3600 3601 def set_swthresh_th ( self , th : int | float ) -> None : \"\"\"Sets the threshold level of the THRESH method-based spectrum width analysis function. The range of the th: 0.01 <= th <= 50.0 Args: th: The threshold level in dB. \"\"\" if not 0.01 <= th <= 50.0 : raise ValueError ( f 'Parameter th must be in range [0.01, 50.0], but got { th !r} ' ) cmd = \":CALCulate:PARameter:SWTHresh:TH {th:.2f} DB\" . format ( th = th ) self . command ( cmd ) get_swthresh_th () \u00a4 Queries the threshold level of the THRESH method-based spectrum width analysis function. Returns: Type Description float The threshold level in dB. Source code in pyinst\\models.py 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 def get_swthresh_th ( self ) -> float : \"\"\"Queries the threshold level of the THRESH method-based spectrum width analysis function. Returns: The threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:TH?\" th = float ( self . query ( cmd )) return th get_analysis_data () \u00a4 Queries the analysis results from the last time analysis was executed. For the output formats of analysis results, please refer to documents from the instrument vendor. Returns: Type Description str The analysis data. Source code in pyinst\\models.py 3614 3615 3616 3617 3618 3619 3620 3621 3622 3623 3624 def get_analysis_data ( self ) -> str : \"\"\"Queries the analysis results from the last time analysis was executed. For the output formats of analysis results, please refer to documents from the instrument vendor. Returns: The analysis data. \"\"\" return self . query ( ':CALC:DATA?' ) get_osnr () \u00a4 Queries the SNR value from the last time WDM analysis was executed. Note that only under WDM analysis category, the return value is valid. Otherwise, 0 is returned. Returns: Type Description float The value of the OSNR in dB. Source code in pyinst\\models.py 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 def get_osnr ( self ) -> float : \"\"\"Queries the SNR value from the last time WDM analysis was executed. Note that only under WDM analysis category, the return value is valid. Otherwise, 0 is returned. Returns: The value of the OSNR in dB. \"\"\" cmd = \":CALCulate:DATA:CSNR?\" osnr = float ( self . query ( cmd ) . split ( \",\" )[ 0 ]) return osnr get_marker_x_scale () \u00a4 Queries the horizontal scale for the marker values. Note that when the measurement x scale is set, the marker x scale will be set to the same option automatically. So the marker x scale will be consistent with the measurement x scale if it is not set explicitly. Please refer to set_x_scale for more information. Returns: Type Description str The horizontal scale. \"WAV\" | \"FREQ\" . Source code in pyinst\\models.py 3639 3640 3641 3642 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 def get_marker_x_scale ( self ) -> str : \"\"\"Queries the horizontal scale for the marker values. Note that when the measurement x scale is set, the marker x scale will be set to the same option automatically. So the marker x scale will be consistent with the measurement x scale if it is not set explicitly. Please refer to `set_x_scale` for more information. Returns: The horizontal scale. `\"WAV\"` | `\"FREQ\"`. \"\"\" cmd = \":CALCulate:MARKer:UNIT?\" scale = self . X_SCALES [ int ( self . query ( cmd ))] return scale set_marker_x_scale ( scale ) \u00a4 Sets the units of display for the marker values. Note that when the measurement x scale is set, the marker x scale will be set to the same option automatically. So the marker x scale will be consistent with the measurement x scale if it is not set explicitly. Please refer to set_x_scale for more information. Parameters: Name Type Description Default scale str The unit of marker X. \"WAV\" | \"FREQ\" . required Source code in pyinst\\models.py 3654 3655 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 def set_marker_x_scale ( self , scale : str ) -> None : \"\"\"Sets the units of display for the marker values. Note that when the measurement x scale is set, the marker x scale will be set to the same option automatically. So the marker x scale will be consistent with the measurement x scale if it is not set explicitly. Please refer to `set_x_scale` for more information. Args: scale: The unit of marker X. `\"WAV\"` | `\"FREQ\"`. \"\"\" if scale not in self . X_SCALES : raise ValueError ( f \"Invalid value for parameter scale: { scale !r} \" ) cmd = f \":CALCulate:MARKer:UNIT { scale } \" self . command ( cmd ) get_marker_active_state ( marker ) \u00a4 Queries the active state of a specified marker. A marker should be set into active state before further operations. Note that you should set the moving marker (marker number 0) active before you set any of the fixed markers active (marker number 1 to 4). Parameters: Name Type Description Default marker int Marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required Returns: Type Description bool True = active, False = inactive. Source code in pyinst\\models.py 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 3685 3686 3687 3688 def get_marker_active_state ( self , marker : int ) -> bool : \"\"\"Queries the active state of a specified marker. A marker should be set into active state before further operations. Note that you should set the moving marker (marker number 0) active before you set any of the fixed markers active (marker number 1 to 4). Args: marker: Marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. Returns: `True` = active, `False` = inactive. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid value for marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:STATe? {marker:d} \" . format ( marker = marker ) state = bool ( int ( self . query ( cmd ))) return state set_marker_active_state ( marker , state ) \u00a4 Set the active state of a specified marker. A marker should be set into active state before further operations. Note that you should set the moving marker (marker number 0) active before you set any of the fixed markers active (marker number 1 to 4). Parameters: Name Type Description Default marker int Marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required state bool True = active, False = inactive. required Source code in pyinst\\models.py 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699 3700 3701 3702 3703 3704 3705 3706 3707 def set_marker_active_state ( self , marker : int , state : bool ) -> None : \"\"\"Set the active state of a specified marker. A marker should be set into active state before further operations. Note that you should set the moving marker (marker number 0) active before you set any of the fixed markers active (marker number 1 to 4). Args: marker: Marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. state: `True` = active, `False` = inactive. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid value for marker: {marker!r} \" . format ( marker = marker )) if not isinstance ( state , bool ): raise TypeError ( f \"Parameter state must be a bool, not ' { type ( state ) . __name__ } '.\" ) cmd = f \":CALCULATE:MARKER:STATE { marker : d } , { state : d } \" self . command ( cmd ) set_marker_x ( marker , x ) \u00a4 Places a specified marker in a specified position. Note This method only takes effect when: A measurement sweep must be performed. The sweep should be completed and stoped. Parameters: Name Type Description Default marker int The marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required x int | float The X value of the specified marker. The unit depends on the current setting of marker x scale. If the marker x scale is \"WAV\", returns the x value in nm. If marker x scale is \"FREQ\", returns the x value in THz. Please refer to get_marker_x_scale for information. required Source code in pyinst\\models.py 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 3731 3732 def set_marker_x ( self , marker : int , x : int | float ) -> None : \"\"\"Places a specified marker in a specified position. Note: This method only takes effect when: 1. A measurement sweep must be performed. 2. The sweep should be completed and stoped. Args: marker: The marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. x: The X value of the specified marker. The unit depends on the current setting of marker x scale. If the marker x scale is \"WAV\", returns the x value in nm. If marker x scale is \"FREQ\", returns the x value in THz. Please refer to `get_marker_x_scale` for information. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) unit = \"NM\" if self . get_marker_x_scale () == \"WAV\" else \"THZ\" cmd = \":CALCulate:MARKer:X {marker:d} , {x:.6f}{unit} \" . format ( marker = marker , x = x , unit = unit ) self . command ( cmd ) get_marker_x ( marker ) \u00a4 Queries the X value of the specified marker. Parameters: Name Type Description Default marker int The marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required Returns: Type Description float The X value of the specified marker. The unit depends on the current setting of marker x scale. If the marker x scale is \"WAV\", returns the x value in nm. If marker x scale is \"FREQ\", returns the x value in THz. Please refer to get_marker_x_scale for information. Source code in pyinst\\models.py 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 def get_marker_x ( self , marker : int ) -> float : \"\"\"Queries the X value of the specified marker. Args: marker: The marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. Returns: The X value of the specified marker. The unit depends on the current setting of marker x scale. If the marker x scale is \"WAV\", returns the x value in nm. If marker x scale is \"FREQ\", returns the x value in THz. Please refer to `get_marker_x_scale` for information. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:X? {marker:d} \" . format ( marker = marker ) if \"WAV\" == self . get_marker_x_scale (): x = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : x = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return x get_marker_y ( marker ) \u00a4 Queries the Y value of the specified marker. This unit of the marker level to be queried is dependent on the Y-axis unit of the active trace. Parameters: Name Type Description Default marker int The marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required Returns: Type Description float The y value of the marker. Source code in pyinst\\models.py 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 def get_marker_y ( self , marker : int ) -> float : \"\"\"Queries the Y value of the specified marker. This unit of the marker level to be queried is dependent on the Y-axis unit of the active trace. Args: marker: The marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. Returns: The y value of the marker. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:Y? {marker:d} \" . format ( marker = marker ) y = float ( self . query ( cmd )) return y set_y_scale_mode ( mode ) \u00a4 Sets the scale mode of the main scale of the level axis. Parameters: Name Type Description Default mode str The scale mode of level axis. \"LOG\" = Logarighmic, \"LIN\" = Linear. required Source code in pyinst\\models.py 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 def set_y_scale_mode ( self , mode : str ) -> None : \"\"\"Sets the scale mode of the main scale of the level axis. Args: mode: The scale mode of level axis. `\"LOG\"` = Logarighmic, `\"LIN\"` = Linear. \"\"\" if mode not in ( \"LOG\" , \"LIN\" ): raise ValueError ( \"Invalid mode: {mode!r} \" . format ( mode = mode )) cmd = \":DISPlay:TRACe:Y1:SPACing {mode} \" . format ( mode = mode ) self . command ( cmd ) get_y_scale_mode () \u00a4 Queries the scale mode of the main scale of the level axis. Returns: Name Type Description mode str The scale mode of level axis. \"LOG\" = Logarighmic, \"LIN\" = Linear. Source code in pyinst\\models.py 3789 3790 3791 3792 3793 3794 3795 3796 3797 3798 def get_y_scale_mode ( self ) -> str : \"\"\"Queries the scale mode of the main scale of the level axis. Returns: mode: The scale mode of level axis. `\"LOG\"` = Logarighmic, `\"LIN\"` = Linear. \"\"\" cmd = \":DISPlay:TRACe:Y1:SPACing?\" mode = [ \"LOG\" , \"LIN\" ][ int ( self . query ( cmd ))] return mode set_peak_to_center () \u00a4 Detects the peak wavelength and sets it as the measurement center waveform. Source code in pyinst\\models.py 3800 3801 3802 3803 3804 3805 def set_peak_to_center ( self ) -> None : \"\"\"Detects the peak wavelength and sets it as the measurement center waveform. \"\"\" cmd = \":CALCulate:MARKer:MAXimum:SCENter\" self . command ( cmd ) set_ref_level ( value , unit ) \u00a4 Sets the reference level of the main scale of the level axis. Parameters: Name Type Description Default value int | float The value of the ref level. required unit str The unit of the ref level. \"DBM\" | \"W\" | \"MW\" . required Source code in pyinst\\models.py 3807 3808 3809 3810 3811 3812 3813 3814 3815 3816 3817 def set_ref_level ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the reference level of the main scale of the level axis. Args: value: The value of the ref level. unit: The unit of the ref level. `\"DBM\"` | `\"W\"` | `\"MW\"`. \"\"\" if unit not in [ 'DBM' , 'W' , 'MW' ]: raise ValueError ( 'Invalid unit: {unit!r} ' . format ( unit = unit )) cmd = \":DISPlay:TRACe:Y1:RLEVel {value:.6E}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd ) get_ref_level () \u00a4 Sets/queries the reference level of the main scale of the level axis. Returns: Type Description float The value of the ref level in unit dBm or W depends on the Y scale mode. Please refer to get_y_scale_mode for information. Source code in pyinst\\models.py 3819 3820 3821 3822 3823 3824 3825 3826 3827 3828 3829 def get_ref_level ( self ) -> float : \"\"\"Sets/queries the reference level of the main scale of the level axis. Returns: The value of the ref level in unit dBm or W depends on the Y scale mode. Please refer to `get_y_scale_mode` for information. \"\"\" cmd = \":DISPlay:TRACe:Y1:RLEVel?\" level = float ( self . query ( cmd )) return level set_peak_to_ref () \u00a4 Detects the peak level and sets it for the reference level. Source code in pyinst\\models.py 3831 3832 3833 3834 def set_peak_to_ref ( self ) -> None : \"\"\"Detects the peak level and sets it for the reference level.\"\"\" cmd = \":CALCulate:MARKer:MAXimum:SRLevel\" self . command ( cmd ) set_auto_ref_level ( enable ) \u00a4 Sets ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Parameters: Name Type Description Default enable bool Whether to enable auto ref level. required Source code in pyinst\\models.py 3836 3837 3838 3839 3840 3841 3842 3843 3844 3845 3846 def set_auto_ref_level ( self , enable : bool ) -> None : \"\"\"Sets ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Args: enable: Whether to enable auto ref level. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = \":CALCulate:MARKer:MAXimum:SRLevel:AUTO {enable:d} \" . format ( enable = enable ) self . command ( cmd ) get_auto_ref_level () \u00a4 Queries ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Returns: Type Description bool If this function is enabled. Source code in pyinst\\models.py 3848 3849 3850 3851 3852 3853 3854 3855 3856 3857 def get_auto_ref_level ( self ) -> bool : \"\"\"Queries ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Returns: If this function is enabled. \"\"\" cmd = \":CALCulate:MARKer:MAXimum:SRLevel:AUTO?\" enabled = bool ( int ( self . query ( cmd ))) return enabled clear_all_markers () \u00a4 Clears all markers. Source code in pyinst\\models.py 3859 3860 3861 def clear_all_markers ( self ) -> None : \"\"\"Clears all markers.\"\"\" self . command ( ':CALCulate:MARKer:AOFF' ) set_active_trace ( trace_name ) \u00a4 Sets the active trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Source code in pyinst\\models.py 3863 3864 3865 3866 3867 3868 3869 3870 3871 3872 def set_active_trace ( self , trace_name : str ) -> None : \"\"\"Sets the active trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:ACTive {trace_name} ' . format ( trace_name = trace_name ) self . command ( cmd ) get_active_trace () \u00a4 Queries the active trace. Returns: Type Description str The trace name, TRA | TRB | TRC | TRD | TRE | TRF | TRG . Source code in pyinst\\models.py 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 def get_active_trace ( self ) -> str : \"\"\"Queries the active trace. Returns: The trace name, `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG`. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:ACTive?' trace_name = self . query ( cmd ) . strip () return trace_name set_trace_attribute ( trace_name , attribute ) \u00a4 Sets the attributes of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required attribute str WRIT | FIX | MAX | MIN | RAVG | CALC required Source code in pyinst\\models.py 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 3896 3897 3898 def set_trace_attribute ( self , trace_name : str , attribute : str ) -> None : \"\"\"Sets the attributes of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` attribute: `WRIT` | `FIX` | `MAX` | `MIN` | `RAVG` | `CALC` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) if attribute not in [ 'WRIT' , 'FIX' , 'MAX' , 'MIN' , 'RAVG' , 'CALC' ]: raise ValueError ( 'Invalid attribute: {attr!r} ' . format ( attr = attribute )) cmd = ':TRACe:ATTRibute: {trace} {attribute} ' . format ( trace = trace_name , attribute = attribute ) self . command ( cmd ) get_trace_attribute ( trace_name ) \u00a4 Queries the attributes of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Name Type Description attribute str WRIT | FIX | MAX | MIN | RAVG | CALC Source code in pyinst\\models.py 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 def get_trace_attribute ( self , trace_name : str ) -> str : \"\"\"Queries the attributes of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: attribute: `WRIT` | `FIX` | `MAX` | `MIN` | `RAVG` | `CALC` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:ATTRibute: {trace} ?' . format ( trace = trace_name ) ATTRS = [ 'WRIT' , 'FIX' , 'MAX' , 'MIN' , 'RAVG' , 'CALC' ] attr = ATTRS [ int ( self . query ( cmd ))] return attr set_trace_display_status ( trace_name , display ) \u00a4 Sets the display status of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required display bool Whether to display the trace. required Source code in pyinst\\models.py 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 3928 def set_trace_display_status ( self , trace_name : str , display : bool ) -> None : \"\"\"Sets the display status of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` display: Whether to display the trace. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) if not isinstance ( display , bool ): raise TypeError ( f \"Parameter display must be a bool, not ' { type ( display ) . __name__ } '.\" ) cmd = ':TRACe:STATe: {trace_name} {display:d} ' . format ( trace_name = trace_name , display = display ) self . command ( cmd ) get_trace_display_status ( trace_name ) \u00a4 Queries the display status of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description bool Whether the trace is displayed. Source code in pyinst\\models.py 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 def get_trace_display_status ( self , trace_name : str ) -> bool : \"\"\"Queries the display status of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: Whether the trace is displayed. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:STATe: {trace_name} ?' . format ( trace_name = trace_name ) displayed = bool ( int ( self . query ( cmd ))) return displayed clear_trace ( trace_name ) \u00a4 Deletes the data of a specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Source code in pyinst\\models.py 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 def clear_trace ( self , trace_name : str ) -> None : \"\"\"Deletes the data of a specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:DELete {trace_name} ' . format ( trace_name = trace_name ) self . command ( cmd ) clear_all_traces () \u00a4 Clears the data for all traces. Source code in pyinst\\models.py 3956 3957 3958 def clear_all_traces ( self ) -> None : \"\"\"Clears the data for all traces. \"\"\" self . command ( ':TRACe:DELete:ALL' ) get_trace_data_x ( trace_name ) \u00a4 Queries the wavelength axis data of the specified trace. Data is output in the unit of wavelength value (nm), regardless of whether this unit is in the wavelength mode or in the frequency mode. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description List [ float ] A list of the x axis data in nm. Source code in pyinst\\models.py 3960 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 3975 3976 def get_trace_data_x ( self , trace_name : str ) -> List [ float ]: \"\"\"Queries the wavelength axis data of the specified trace. Data is output in the unit of wavelength value (nm), regardless of whether this unit is in the wavelength mode or in the frequency mode. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: A list of the x axis data in nm. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = f ':TRACe:DATA:X? { trace_name } ' result = [ float ( i ) * 10 ** 9 for i in self . query ( cmd ) . split ( ',' )] return result get_trace_data_y ( trace_name ) \u00a4 Queries the level axis data of specified trace. The data is output in order of its wavelength from the shortest level to the longest, irrespective of the wavelength/frequency mode. When the level scale is LOG, data is output in LOG values. When the level scale is Linear, data is output in linear values. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description List [ float ] A list of the y axis data in nm. Source code in pyinst\\models.py 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 def get_trace_data_y ( self , trace_name : str ) -> List [ float ]: \"\"\"Queries the level axis data of specified trace. The data is output in order of its wavelength from the shortest level to the longest, irrespective of the wavelength/frequency mode. When the level scale is LOG, data is output in LOG values. When the level scale is Linear, data is output in linear values. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: A list of the y axis data in nm. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = f ':TRACe:DATA:Y? { trace_name } ' result = [ float ( i ) for i in self . query ( cmd ) . split ( ',' )] return result capture_screen () \u00a4 Capture the screen and returns the BMP iamge data as bytes. Returns: Type Description bytes The image data of the screen capture. Source code in pyinst\\models.py 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 def capture_screen ( self ) -> bytes : \"\"\"Capture the screen and returns the BMP iamge data as bytes. Returns: The image data of the screen capture. \"\"\" # create a unique name with nearly no chance to conflict temp_filename = 'tmp- {timestamp:X} ' . format ( timestamp = int ( time . time () * 10 ** 6 )) # save image to internal memory self . command ( ':MMEMORY:STORE:GRAPHICS COLOR,BMP,\" {filename} \",INTERNAL' . format ( filename = temp_filename )) self . opc bin_data = self . query_binary_values ( ':MMEMORY:DATA? \" {filename} .BMP\",internal' . format ( filename = temp_filename ), datatype = 'B' ) bytes_data = bytes ( bin_data ) # delete temp file from internal memory self . command ( ':MMEMORY:DELETE \" {filename} .BMP\",internal' . format ( filename = temp_filename )) return bytes_data save_screen ( file_path ) \u00a4 Capture the screen and save as a .bmp file. Bug For model AQ6360, this method takes rather long time (about 60 sec) to return. We are contacting with Yokogawa to see if this issue could be solved. Parameters: Name Type Description Default file_path str The file path to save the screen capture. required Source code in pyinst\\models.py 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027 4028 4029 4030 4031 4032 def save_screen ( self , file_path : str ) -> None : \"\"\"Capture the screen and save as a .bmp file. Bug: For model AQ6360, this method takes rather long time (about 60 sec) to return. We are contacting with Yokogawa to see if this issue could be solved. Args: file_path: The file path to save the screen capture. \"\"\" data = self . capture_screen () if os . path . exists ( file_path ): raise PermissionError ( 'The file path {path} already exists.' . format ( path = file_path )) with open ( file_path , 'wb' ) as f : f . write ( data ) ModelAQ6360 \u00a4 Bases: BaseModelAQ63xx Optical Spectrum Analyzer AQ6360 series from Yokogawa. model = 'AQ6360' class-attribute \u00a4 brand = 'Yokogawa' class-attribute \u00a4 details = { 'Wavelength Range' : '700 ~ 1650 nm' , 'Max. Resolution' : '0.1 nm' } class-attribute \u00a4 min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 4058 4059 4060 4061 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 700.0 max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 4063 4064 4065 4066 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1650.0 ModelAQ6370 \u00a4 Bases: BaseModelAQ63xx Optical Spectrum Analyzer AQ6370 series from Yokogawa, including AQ6370, AQ6370B, AQ6370C, AQ6370D, etc. model = 'AQ6370' class-attribute \u00a4 brand = 'Yokogawa' class-attribute \u00a4 details = { 'Wavelength Range' : '600 ~ 1700 nm' , 'Max. Resolution' : '0.02 nm' } class-attribute \u00a4 min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 4092 4093 4094 4095 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 600.0 max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 4097 4098 4099 4100 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1700.0 ModelAQ6150 ( resource_name , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeWM Source code in pyinst\\models.py 4111 4112 def __init__ ( self , resource_name , ** kwargs : Any ): super ( ModelAQ6150 , self ) . __init__ ( resource_name , ** kwargs ) model = 'AQ6150' class-attribute \u00a4 brand = 'Yokogawa' class-attribute \u00a4 details = { 'Wavelength Range' : '1270 ~ 1650 nm' , 'Input Power Range' : '-30 ~ 10 dBm' , 'Safe Max Input Power' : '+18 dBm' } class-attribute \u00a4 run ( state = True ) \u00a4 Executes (stops) repeat measurement. Parameters: Name Type Description Default state bool True = Execute, False = Stop. True Source code in pyinst\\models.py 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 def run ( self , state : bool = True ) -> None : \"\"\" Executes (stops) repeat measurement. Args: state: `True` = Execute, `False` = Stop. \"\"\" if not isinstance ( state , bool ): raise TypeError ( f \"Parameter state must be a bool, not ' { type ( state ) . __name__ } '.\" ) cmd = ':INITiate:CONTinuous {state:d} ' . format ( state = state ) self . command ( cmd ) single () \u00a4 Executes a single measurement. Source code in pyinst\\models.py 4126 4127 4128 4129 def single ( self ) -> None : \"\"\"Executes a single measurement.\"\"\" cmd = ':INITiate' self . command ( cmd ) stop () \u00a4 Stops repeat measurement. Source code in pyinst\\models.py 4131 4132 4133 4134 4135 def stop ( self ) -> None : \"\"\" Stops repeat measurement. \"\"\" self . run ( False ) is_running () \u00a4 Queries the repeat measurement state. Returns: Type Description bool True = Execute, False = Stop. Source code in pyinst\\models.py 4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 def is_running ( self ) -> bool : \"\"\" Queries the repeat measurement state. Returns: `True` = Execute, `False` = Stop. \"\"\" cmd = ':INITiate:CONTinuous?' state = bool ( int ( self . query ( cmd ))) return state measure_frequency () \u00a4 Performs a single measurement and queries the peak frequency in single view mode with a single measurement. Returns: Type Description float The peak frequency in THz. Source code in pyinst\\models.py 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 def measure_frequency ( self ) -> float : \"\"\"Performs a single measurement and queries the peak frequency in single view mode with a single measurement. Returns: The peak frequency in THz. \"\"\" cmd = \":MEASure:POWer:FREQuency?\" freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) if freq == 0 : raise ValueError ( 'No optical input signal.' ) return freq measure_wavelength () \u00a4 Performs a single measurement and queries the peak wavelength in single view mode in single measurement. Returns: Type Description float The peak wavelength in nm. Source code in pyinst\\models.py 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 def measure_wavelength ( self ) -> float : \"\"\"Performs a single measurement and queries the peak wavelength in single view mode in single measurement. Returns: The peak wavelength in nm. \"\"\" cmd = \":MEASure:POWer:WAVelength?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) if wl == 0 : raise ValueError ( 'No optical input signal.' ) return wl get_frequency () \u00a4 Queries the peak frequency in single view mode with a single measurement. Returns: Type Description float The peak frequency in THz. Source code in pyinst\\models.py 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 def get_frequency ( self ) -> float : \"\"\"Queries the peak frequency in single view mode with a single measurement. Returns: The peak frequency in THz. \"\"\" cmd = \":FETCh:POWer:FREQuency?\" freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) if freq == 0 : raise ValueError ( 'No optical input signal.' ) return freq get_wavelength () \u00a4 Queries the peak wavelength in single view mode in single measurement. Returns: Type Description float The peak wavelength in nm. Source code in pyinst\\models.py 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 def get_wavelength ( self ) -> float : \"\"\"Queries the peak wavelength in single view mode in single measurement. Returns: The peak wavelength in nm. \"\"\" cmd = \":FETCh:POWer:WAVelength?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) if wl == 0 : raise ValueError ( 'No optical input signal.' ) return wl BaseModelEspecOld ( resource_name , dev_id = 0 , baudrate = 19200 , read_timeout = 0.5 , ** kwargs ) \u00a4 Bases: BaseInstrument , TypeTS The base class for old chamber models by Espec: MC-711 MT3065 Note In order to communicate, corresponding configurations must be made on the chamber. Device ID: Correspond with the dev_id in the __init__ method. Defaults to 0. Parameters: Name Type Description Default resource_name str The serial port name. required dev_id int The device ID of the chamber. 0 baudrate int Baud rate such as 9600 or 115200 etc.. 19200 read_timeout int | float Timeout in milliseconds for read operations. 0.5 **kwargs Any Directly passed to serial.Serial() . {} Source code in pyinst\\models.py 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 def __init__ ( self , resource_name : str , dev_id : int = 0 , baudrate : int = 19200 , read_timeout : int | float = 0.5 , ** kwargs : Any ): \"\"\" Args: resource_name: The serial port name. dev_id: The device ID of the chamber. baudrate: Baud rate such as 9600 or 115200 etc.. read_timeout: Timeout in milliseconds for read operations. **kwargs: Directly passed to `serial.Serial()`. \"\"\" super ( BaseModelEspecOld , self ) . __init__ ( resource_name ) if dev_id not in range ( 16 ): raise ValueError ( 'Device ID must be between 0 and 15' ) self . __dev_id = dev_id self . __serial = serial . Serial ( port = resource_name , baudrate = baudrate , timeout = read_timeout , ** kwargs ) self . __serial . setRTS () self . __serial . setDTR () self . __serial . reset_input_buffer () self . __resource_name = resource_name self . _check_communication () brand = 'Espec' class-attribute \u00a4 params = [{ 'name' : 'dev_id' , 'type' : 'int' , 'min' : 0 , 'max' : 15 }] class-attribute \u00a4 resource_name () property \u00a4 The serial port name. Source code in pyinst\\models.py 4238 4239 4240 4241 @property def resource_name ( self ) -> str : \"\"\"The serial port name.\"\"\" return self . __resource_name ts_type () property \u00a4 The temperature source type. Source code in pyinst\\models.py 4243 4244 4245 4246 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The temperature source type.\"\"\" return TemperatureSourceType . CHAMBER close () \u00a4 Close the chamber connection and release the instrument resource. Source code in pyinst\\models.py 4248 4249 4250 def close ( self ) -> None : \"\"\"Close the chamber connection and release the instrument resource.\"\"\" self . __serial . close () command ( cmd ) \u00a4 Source code in pyinst\\models.py 4261 4262 4263 4264 4265 4266 def command ( self , cmd : str ) -> None : self . _write ( cmd ) # Read reply r = self . __serial . read ( 5 ) if r != b ' \\x06 00FF' : raise ValueError ( f 'Unexpected reply from the chamber: { r !r} ' ) query ( cmd ) \u00a4 Source code in pyinst\\models.py 4268 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 def query ( self , cmd : str ) -> str : self . _write ( cmd ) # Read reply PREFIX = b ' \\x02 ' TERMINATOR = b ' \\x03 ' r = self . __serial . read ( 1 ) if r != PREFIX : raise ValueError ( f 'Unexpected reply from the chamber: { r !r} ' ) dev_id = int ( self . __serial . read ( 2 ) . decode (), 16 ) if dev_id != self . __dev_id : raise ValueError ( f 'Device ID mismatch: expected= { self . __dev_id !r} , reply= { dev_id !r} ' ) r = self . __serial . read ( 2 ) data = b '' while True : r = self . __serial . read ( 1 ) if r == TERMINATOR : checksum_bytes = self . __serial . read ( 2 ) checksum = int ( checksum_bytes . decode (), 16 ) break else : data += r reply_body = f ' { dev_id : 02X } ' . encode () + b 'FF' + data + TERMINATOR full_reply = PREFIX + reply_body + checksum_bytes if sum ( reply_body ) & 0xFF != checksum : raise ValueError ( f 'Invalid checksum of reply: { full_reply } ' ) return data . decode () run ( mode = ChamberOperatingMode . CONSTANT , p_num = None , step_num = None ) \u00a4 Run the chamber in selected mode and params, or stops the chamber. Parameters: Name Type Description Default mode ChamberOperatingMode The operating mode to run the chamber. ChamberOperatingMode.CONSTANT p_num Optional [ int ] The program number. Integers from 0 to 39. None step_num Optional [ int ] The step number to start the program running. Integers from 0. None Source code in pyinst\\models.py 4301 4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 4318 4319 4320 4321 4322 4323 4324 4325 def run ( self , mode : ChamberOperatingMode = ChamberOperatingMode . CONSTANT , p_num : Optional [ int ] = None , step_num : Optional [ int ] = None , ): \"\"\"Run the chamber in selected mode and params, or stops the chamber. Args: mode: The operating mode to run the chamber. p_num: The program number. Integers from 0 to 39. step_num: The step number to start the program running. Integers from 0. \"\"\" if mode == ChamberOperatingMode . OFF : self . command ( 'FFWW0D110601000A' ) else : if mode == ChamberOperatingMode . PROGRAM : if not 0 <= p_num <= 39 : raise ValueError ( f \"Parameter p_num is out of range: { p_num !r} \" ) if not step_num >= 0 : raise ValueError ( f \"Parameter step_num is out of range: { step_num !r} \" ) self . _select_program ( p_num , step_num ) mode_code = 1 if mode == ChamberOperatingMode . CONSTANT else 0 self . command ( f 'FFWW0D110901 { mode_code : 04d } ' ) self . command ( 'FFWW0D110701000A' ) stop () \u00a4 Stops the chamber. Source code in pyinst\\models.py 4338 4339 4340 def stop ( self ) -> None : \"\"\"Stops the chamber.\"\"\" self . run ( mode = ChamberOperatingMode . OFF ) is_running () \u00a4 Queries whether the chamber is running. Returns: Type Description bool Whether the chamber is runing. Source code in pyinst\\models.py 4351 4352 4353 4354 4355 4356 4357 def is_running ( self ) -> bool : \"\"\"Queries whether the chamber is running. Returns: Whether the chamber is runing. \"\"\" return self . _get_state ()[ 0 ] get_operating_mode () \u00a4 Queries the chamber operating mode. Returns: Type Description ChamberOperatingMode The chamber operating mode. Source code in pyinst\\models.py 4359 4360 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 def get_operating_mode ( self ) -> ChamberOperatingMode : \"\"\"Queries the chamber operating mode. Returns: The chamber operating mode. \"\"\" running , in_program , _ = self . _get_state () if not running : mode = ChamberOperatingMode . OFF else : mode = ChamberOperatingMode . PROGRAM if in_program else ChamberOperatingMode . CONSTANT return mode in_error () \u00a4 Source code in pyinst\\models.py 4372 4373 def in_error ( self ) -> bool : return self . _get_state ()[ 2 ] set_target_temp ( value ) \u00a4 Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\models.py 4375 4376 4377 4378 4379 4380 4381 4382 4383 4384 4385 4386 def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" value = round ( value * 10 ) if value < 0 : value = 65536 + value cmd = 'FFWW0D119705 {temp:04X} 0000000000000000' . format ( temp = value ) self . command ( cmd ) get_target_temp () \u00a4 Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\models.py 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399 def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" cmd = 'FFWR0D111401' data = self . query ( cmd ) raw = int ( data , 16 ) signed_val = ( raw - 65536 ) if raw >= 65536 / 2 else raw return signed_val / 10 get_current_temp () \u00a4 Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\models.py 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" cmd = 'FFWR0D111701' data = self . query ( cmd ) raw = int ( data , 16 ) signed_val = ( raw - 65536 ) if raw >= 65536 / 2 else raw return signed_val / 10 set_temp_unit ( unit ) \u00a4 Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\models.py 4414 4415 4416 4417 4418 4419 4420 4421 4422 def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" if unit != TemperatureUnit . C : raise ValueError ( 'The temperature unit of this Chamber is fixed to C.' ) get_temp_unit () \u00a4 Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\models.py 4424 4425 4426 4427 4428 4429 4430 4431 def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" return TemperatureUnit . C ModelMC711 \u00a4 Bases: BaseModelEspecOld See base class model = 'MC-711' class-attribute \u00a4 ModelMT3065 \u00a4 Bases: BaseModelEspecOld See base class model = 'MT3065' class-attribute \u00a4 ModelMC811 ( resource_name , baudrate = 19200 , bytesize = SerialByteSize . EIGHTBITS , parity = SerialParity . NONE , stopbits = SerialStopBits . ONE , termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: RawSerialInstrument , TypeTS MC-811 is a chamber model by GWS. Note In order to communicate, corresponding configurations must be made on the chamber. Communication: Serial Protocol: STEN Baudrate/Parity/Bytesize/Stopbits/Termination: Correspond with the settings in the __init__ method. Default values: baudrate = 19200 parity = NONE Bytesize = 8 bits Stopbits: 1 bit Termination: <CR><LF> Device ID: None Parameters: Name Type Description Default resource_name str The serial port name. required baudrate int Baud rate such as 9600 or 115200 etc.. 19200 bytesize SerialByteSize SerialByteSize = SerialByteSize.EIGHTBITS, SerialByteSize.EIGHTBITS parity SerialParity SerialParity = SerialParity.NONE, SerialParity.NONE stopbits SerialStopBits SerialStopBits = SerialStopBits.ONE, SerialStopBits.ONE termination str The write and read termination character. '\\r\\n' **kwargs Any Directly passed to RawSerialInstrument.__init__ . {} Source code in pyinst\\models.py 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 def __init__ ( self , resource_name : str , baudrate : int = 19200 , bytesize : SerialByteSize = SerialByteSize . EIGHTBITS , parity : SerialParity = SerialParity . NONE , stopbits : SerialStopBits = SerialStopBits . ONE , termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: The serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. bytesize: SerialByteSize = SerialByteSize.EIGHTBITS, parity: SerialParity = SerialParity.NONE, stopbits: SerialStopBits = SerialStopBits.ONE, termination: The write and read termination character. **kwargs: Directly passed to `RawSerialInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , baudrate = baudrate , bytesize = bytesize , parity = parity , stopbits = stopbits , write_termination = termination , read_termination = termination , ** kwargs ) self . __fix_cmd_issue () model = 'MC-811' class-attribute \u00a4 brand = 'GWS' class-attribute \u00a4 ts_type () property \u00a4 The temperature source type. Source code in pyinst\\models.py 4505 4506 4507 4508 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The temperature source type.\"\"\" return TemperatureSourceType . CHAMBER run ( mode = ChamberOperatingMode . CONSTANT , p_num = None , step_num = None ) \u00a4 Run the chamber in selected mode and params, or stops the chamber. Parameters: Name Type Description Default mode ChamberOperatingMode The operating mode to run the chamber. ChamberOperatingMode.CONSTANT p_num Optional [ int ] The program number. Integers from 1 to 20. None step_num Optional [ int ] The step number to start the program running. Integers from 1. None Source code in pyinst\\models.py 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 def run ( self , mode : ChamberOperatingMode = ChamberOperatingMode . CONSTANT , p_num : Optional [ int ] = None , step_num : Optional [ int ] = None , ): \"\"\"Run the chamber in selected mode and params, or stops the chamber. Args: mode: The operating mode to run the chamber. p_num: The program number. Integers from 1 to 20. step_num: The step number to start the program running. Integers from 1. \"\"\" if mode == ChamberOperatingMode . OFF : cmd = 'MODE, OFF' self . command ( cmd ) elif mode == ChamberOperatingMode . CONSTANT : cmd = 'MODE, CONSTANT' self . command ( cmd ) elif mode == ChamberOperatingMode . PROGRAM : if not 0 <= p_num <= 19 : raise ValueError ( f \"Parameter p_num out of range: { p_num !r} \" ) elif not step_num >= 0 : raise ValueError ( f \"Parameter step_number should be a positive integer.\" ) cmd = f \"PRGM, RUN, RAM: { p_num + 1 : d } , STEP { step_num + 1 : d } \" # the number show on the chamber is 1 larger self . command ( cmd ) else : raise ValueError ( f \"Invalid operating mode: { mode !r} \" ) stop () \u00a4 Stops the chamber. Source code in pyinst\\models.py 4545 4546 4547 def stop ( self ) -> None : \"\"\"Stops the chamber.\"\"\" self . run ( mode = ChamberOperatingMode . OFF ) is_running () \u00a4 Queries whether the chamber is running. Returns: Type Description bool Whether the chamber is running. Source code in pyinst\\models.py 4554 4555 4556 4557 4558 4559 4560 def is_running ( self ) -> bool : \"\"\"Queries whether the chamber is running. Returns: Whether the chamber is running. \"\"\" return self . _get_state in { 'CONSTANT' , 'RUN' } get_operating_mode () \u00a4 Queries the chamber operating mode. Returns: Type Description ChamberOperatingMode The chamber operating mode. Source code in pyinst\\models.py 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 def get_operating_mode ( self ) -> ChamberOperatingMode : \"\"\"Queries the chamber operating mode. Returns: The chamber operating mode. \"\"\" state = self . _get_state () if self . is_running (): if state == 'CONSTANT' : mode = ChamberOperatingMode . CONSTANT elif state == 'RUN' : mode = ChamberOperatingMode . PROGRAM else : mode = ChamberOperatingMode . OFF return mode set_target_temp ( value ) \u00a4 Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\models.py 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" value = round ( value , 1 ) cmd = 'TEMP, S {value:.1f} ' . format ( value = value ) self . command ( cmd ) get_target_temp () \u00a4 Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\models.py 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" cmd = 'TEMP?' temp = float ( self . query ( cmd ) . split ( ',' )[ 1 ]) return temp get_current_temp () \u00a4 Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\models.py 4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" cmd = 'TEMP?' temp = float ( self . query ( cmd ) . split ( ',' )[ 0 ]) return temp set_temp_unit ( unit ) \u00a4 Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\models.py 4611 4612 4613 4614 4615 4616 4617 4618 4619 def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" if unit != TemperatureUnit . C : raise ValueError ( 'The temperature unit of this Chamber is fixed to C.' ) get_temp_unit () \u00a4 Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\models.py 4621 4622 4623 4624 4625 4626 4627 4628 def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" return TemperatureUnit . C ModelATS535 ( resource_name , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeTS ATS-535 is a thermo-stream model by Temptronic. Note that before operating with temperature directly (means not in Cycle mode), you should set the thermo-stream to the Operator screen, and make sure the test head is lower down, and the air flow is on. Examples: ts = ModelATS535 ( '<resource-name>' ) ts . reset_operator () # check the test head is down if not ts . is_head_down (): raise OperationalError ( 'The thermo-stream test head is up.' ) # turn on the air flow ts . flow () # operate with the temperature directly ts . set_target_temp ( 35 ) t = ts . get_current_temp () Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 4655 4656 4657 4658 4659 4660 4661 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: directly passed to `VisaInstrument.__init__` \"\"\" super ( ModelATS535 , self ) . __init__ ( resource_name , ** kwargs ) model = 'ATS-535' class-attribute \u00a4 brand = 'Temptronic' class-attribute \u00a4 ts_type () property \u00a4 The temperature source type. Source code in pyinst\\models.py 4663 4664 4665 4666 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The temperature source type.\"\"\" return TemperatureSourceType . THERMO_STREAM head_up () \u00a4 Raise up the test head. Source code in pyinst\\models.py 4668 4669 4670 def head_up ( self ) -> None : \"\"\"Raise up the test head.\"\"\" self . command ( 'HEAD 0' ) head_down () \u00a4 Lower down the test head. Source code in pyinst\\models.py 4672 4673 4674 def head_down ( self ) -> None : \"\"\"Lower down the test head.\"\"\" self . command ( 'HEAD 1' ) is_head_down () \u00a4 Queries if the test head is lowered down. Returns: Type Description bool If the test head is lowered down. Source code in pyinst\\models.py 4676 4677 4678 4679 4680 4681 4682 4683 def is_head_down ( self ) -> bool : \"\"\"Queries if the test head is lowered down. Returns: If the test head is lowered down. \"\"\" is_down = bool ( int ( self . query ( 'HEAD?' ))) return is_down flow ( on = True ) \u00a4 Turn the main nozzle air flow on or off. Parameters: Name Type Description Default on bool True = turn on, False = turn off. True Source code in pyinst\\models.py 4685 4686 4687 4688 4689 4690 4691 4692 def flow ( self , on : bool = True ) -> None : \"\"\"Turn the main nozzle air flow on or off. Args: on: `True` = turn on, `False` = turn off. \"\"\" cmd = 'FLOW {:d} ' . format ( on ) self . command ( cmd ) enable_dut_mode ( en = True ) \u00a4 Enable (disable) DUT mode. Parameters: Name Type Description Default en bool True = DUT mode on (DUT control); False = DUT mode off (air control). True Source code in pyinst\\models.py 4694 4695 4696 4697 4698 4699 4700 4701 4702 4703 def enable_dut_mode ( self , en : bool = True ) -> None : \"\"\"Enable (disable) DUT mode. Args: en: True = DUT mode on (DUT control); False = DUT mode off (air control). \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = 'DUTM {en:d} ' . format ( en = en ) self . command ( cmd ) is_dut_mode () \u00a4 Queries if DUT mode is on. Returns: Type Description bool True = DUT mode on (DUT control); False = DUT mode off (air control). Source code in pyinst\\models.py 4705 4706 4707 4708 4709 4710 4711 4712 def is_dut_mode ( self ) -> bool : \"\"\"Queries if DUT mode is on. Returns: True = DUT mode on (DUT control); False = DUT mode off (air control). \"\"\" state = bool ( int ( self . query ( 'DUTM?' ))) return state disable_dut_mode () \u00a4 Disable DUT mode. Source code in pyinst\\models.py 4714 4715 4716 def disable_dut_mode ( self ) -> None : \"\"\"Disable DUT mode.\"\"\" self . enable_dut_mode ( False ) reset_operator () \u00a4 Reset (force) the System to the Operator screen. Source code in pyinst\\models.py 4718 4719 4720 4721 def reset_operator ( self ) -> None : \"\"\"Reset (force) the System to the Operator screen.\"\"\" self . command ( 'RSTO' ) time . sleep ( 0.3 ) set_n ( n ) \u00a4 Select a setpoint to be the current setpoint. Parameters: Name Type Description Default n int n is 0 - 17 when on the Cycle screen. n is 0 to 2 when on the Operator screen (0=hot, 1=ambient, 2=cold). required Source code in pyinst\\models.py 4727 4728 4729 4730 4731 4732 4733 4734 4735 def set_n ( self , n : int ) -> None : \"\"\"Select a setpoint to be the current setpoint. Args: n: - n is 0 - 17 when on the Cycle screen. - n is 0 to 2 when on the Operator screen (0=hot, 1=ambient, 2=cold). \"\"\" return self . command ( 'SETN %d ' % n ) set_p ( p ) \u00a4 Set the currently selected setpoint's temperature. Source code in pyinst\\models.py 4737 4738 4739 def set_p ( self , p : int | float ) -> None : \"\"\"Set the currently selected setpoint's temperature.\"\"\" return self . command ( 'SETP %.1f ' % p ) get_p_setting () \u00a4 Read the current temperature setpoint. Source code in pyinst\\models.py 4741 4742 4743 4744 def get_p_setting ( self ) -> float : \"\"\"Read the current temperature setpoint.\"\"\" p = float ( self . query ( 'SETP?' )) return p set_ramp ( ramp ) \u00a4 Set the ramp rate for the currently selected setpoint, in \u00b0C per minute. Parameters: Name Type Description Default ramp int | float The ramp rate in \u00b0C per minute. required Source code in pyinst\\models.py 4746 4747 4748 4749 4750 4751 4752 4753 4754 4755 4756 4757 4758 4759 def set_ramp ( self , ramp : int | float ) -> None : \"\"\"Set the ramp rate for the currently selected setpoint, in \u00b0C per minute. Args: ramp: The ramp rate in \u00b0C per minute. \"\"\" if 0 <= ramp <= 99.9 : t = ' {:.1f} ' . format ( ramp ) elif 99.9 < ramp <= 9999 : t = ' {:d} ' . format ( ramp ) else : raise ValueError ( 'Parameter ramp out of range.' ) return self . command ( 'RAMP {} ' . format ( t )) get_ramp () \u00a4 Read the setting of RAMP. Returns: Type Description float The ramp rate in \u00b0C per minute. Source code in pyinst\\models.py 4761 4762 4763 4764 4765 4766 4767 4768 4769 def get_ramp ( self ) -> float : \"\"\"Read the setting of RAMP. Returns: The ramp rate in \u00b0C per minute. \"\"\" cmd = 'RAMP?' ramp = float ( self . query ( cmd )) return ramp set_target_temp ( value ) \u00a4 Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\models.py 4771 4772 4773 4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" if value < 20 : n = 2 elif 20 <= value <= 30 : n = 1 else : n = 0 self . set_n ( n ) self . set_p ( value ) get_target_temp () \u00a4 Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\models.py 4787 4788 4789 4790 4791 4792 4793 4794 def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" return self . get_p_setting () get_current_temp () \u00a4 Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\models.py 4796 4797 4798 4799 4800 4801 4802 4803 4804 4805 4806 def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" temp = float ( self . query ( 'TEMP?' )) if temp > 400 : raise ValueError ( 'Invalid current temperature.' ) return temp set_temp_unit ( unit ) \u00a4 Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\models.py 4808 4809 4810 4811 4812 4813 4814 4815 4816 def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" if unit != TemperatureUnit . C : raise ValueError ( 'The temperature unit of this thermo-stream is fixed to C.' ) get_temp_unit () \u00a4 Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\models.py 4818 4819 4820 4821 4822 4823 4824 4825 def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" return TemperatureUnit . C ModelTC3625 ( resource_name , baudrate = 9600 , read_termination = '^' , write_termination = ' \\r ' , ** kwargs ) \u00a4 Bases: RawSerialInstrument , TypeTS TC-36-25 is a TEC model by TE Technology. You may have to configure some parameters via the GUI provided by the vendor before your first use, this class will only perform the temperature control. Parameters: Name Type Description Default resource_name str Serial port name. required baudrate int Baud rate such as 9600 or 115200 etc.. 9600 read_termination str Read termination character. '^' write_termination str Write termination character. '\\r' Source code in pyinst\\models.py 4836 4837 4838 4839 4840 4841 4842 4843 4844 4845 4846 4847 4848 4849 4850 4851 4852 4853 def __init__ ( self , resource_name : str , baudrate : int = 9600 , read_termination : str = '^' , write_termination : str = ' \\r ' , ** kwargs : Any ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super ( ModelTC3625 , self ) . __init__ ( resource_name , baudrate = baudrate , read_termination = read_termination , write_termination = write_termination , ** kwargs ) model = 'TC-36-25' class-attribute \u00a4 brand = 'TE Technology' class-attribute \u00a4 ts_type () property \u00a4 The temperature source type. Source code in pyinst\\models.py 4855 4856 4857 4858 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The temperature source type.\"\"\" return TemperatureSourceType . TEC formatted_query ( cmd_code , value = 0 ) \u00a4 Send a formated command to the TEC and return the result value. Parameters: Name Type Description Default cmd_code int Comand code is an int between 0 and 0xFF. required value int An int value sent with the command. Defaults to 0 if it is not needed. Between -0x80000000 and 0x7FFFFFFF. 0 Returns: Type Description int The Source code in pyinst\\models.py 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 4871 4872 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 4887 4888 4889 4890 4891 4892 def formatted_query ( self , cmd_code : int , value : int = 0 ) -> int : \"\"\" Send a formated command to the TEC and return the result value. Args: cmd_code: Comand code is an int between 0 and 0xFF. value: An int value sent with the command. Defaults to 0 if it is not needed. Between -0x80000000 and 0x7FFFFFFF. Returns: The \"\"\" if not 0 <= value <= 0xFF : raise ValueError ( 'Parameter cmd_code out of range: {!r} ' . format ( cmd_code )) if not - 0x80000000 <= value <= 0x7FFFFFFF : raise ValueError ( 'Parameter value out of range: {!r} ' . format ( value )) STX = '*' # Start of text character that always prepend to the cmd. ADDR = 0 # The address of this device is fixed to 0 cmd_body = ' {addr:02x}{cmd_code:02x}{val:08x} ' . format ( addr = ADDR , cmd_code = cmd_code , val = signed_to_unsigned ( value , byte_count = 4 )) check_sum = calc_check_sum ( cmd_body . encode ()) cmd = ' {pre}{cmd_body}{check_sum:02x} ' . format ( pre = STX , cmd_body = cmd_body , check_sum = check_sum ) result = self . query ( cmd )[ 1 :] result_content = result [ 0 : - 2 ] result_check_sum = int ( result [ - 2 :], base = 16 ) calculated_check_sum = calc_check_sum ( result_content . encode ()) if result_check_sum != calculated_check_sum : raise ValueError ( \"Mismatched checksum of the reply.\" ) if result_content == \"X\" * 8 : raise ValueError ( \"Mismatched checksum of the command.\" ) result_value = unsigned_to_signed ( int ( result_content , base = 16 ), 4 ) return result_value set_target_temp ( value ) \u00a4 Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\models.py 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" cmd_value = round ( value * 100 ) rtn_value = self . formatted_query ( 0x1c , cmd_value ) if cmd_value != rtn_value : raise ValueError ( 'The return value mismatched with the cmd value: {!r} / {!r} ' . format ( rtn_value , cmd_value )) get_target_temp () \u00a4 Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\models.py 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" rtn_value = self . formatted_query ( 0x03 ) t = rtn_value / 100 return t get_current_temp () \u00a4 Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\models.py 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" rtn_value = self . formatted_query ( 0x01 ) t = rtn_value / 100 return t set_temp_unit ( unit ) \u00a4 Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\models.py 4935 4936 4937 4938 4939 4940 4941 4942 4943 4944 4945 def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" unit = TemperatureUnit ( unit ) rtn_value = self . formatted_query ( 0x32 , unit . value ) if rtn_value != unit . value : raise ValueError ( 'The return value mismatched with the cmd value: {!r} / {!r} ' . format ( rtn_value , unit )) get_temp_unit () \u00a4 Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\models.py 4947 4948 4949 4950 4951 4952 4953 4954 4955 def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" rtn_value = self . formatted_query ( 0x4b ) return TemperatureUnit ( rtn_value ) BaseModelSantecBandwidthTunableFilter ( resource_name , read_termination = ' \\r\\n ' , write_termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOTF Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' Source code in pyinst\\models.py 4960 4961 4962 4963 4964 4965 4966 4967 4968 4969 4970 4971 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super () . __init__ ( resource_name , read_termination = read_termination , write_termination = write_termination , ** kwargs ) min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 4973 4974 4975 4976 4977 4978 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" cmd = ':FREQuency? MIN' freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return freq max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 4980 4981 4982 4983 4984 4985 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" cmd = ':FREQuency? MAX' freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return freq min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 4987 4988 4989 4990 4991 4992 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = ':WAVelength? MIN' wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 4994 4995 4996 4997 4998 4999 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = ':WAVelength? MAX' wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl min_bandwidth_in_nm () property \u00a4 The minimum bandwidth in nm. Source code in pyinst\\models.py 5001 5002 5003 5004 5005 5006 @property def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" cmd = ':BANDwidth? MIN' bw = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return bw max_bandwidth_in_nm () property \u00a4 The maximum bandwidth in nm. Source code in pyinst\\models.py 5008 5009 5010 5011 5012 5013 @property def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" cmd = ':BANDwidth? MAX' bw = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return bw min_bandwidth_in_ghz () property \u00a4 The minimum bandwidth in GHz. Source code in pyinst\\models.py 5015 5016 5017 5018 @property def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return super () . min_bandwidth_in_ghz max_bandwidth_in_ghz () property \u00a4 The maximum bandwidth in GHz. Source code in pyinst\\models.py 5020 5021 5022 5023 @property def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return super () . max_bandwidth_in_ghz get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 5025 5026 5027 5028 5029 5030 5031 5032 5033 5034 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" cmd = ':FREQuency?' freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return freq set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 5036 5037 5038 5039 5040 5041 5042 5043 5044 5045 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( 'Parameter frequency out of range: {freq!r} ' . format ( freq = frequency )) cmd = ':FREQuency {freq:.5f} THz' . format ( freq = frequency ) self . command ( cmd ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 5047 5048 5049 5050 5051 5052 5053 5054 5055 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = ':WAVelength?' wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( 'Parameter wavelength out of range: {wl!r} ' . format ( wl = wavelength )) cmd = ':WAVelength {wl:.3f} nm' . format ( wl = wavelength ) self . command ( cmd ) get_bandwidth_in_nm () \u00a4 Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\models.py 5068 5069 5070 5071 5072 5073 5074 5075 5076 5077 def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" cmd = ':BANDwidth?' bw = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return bw set_bandwidth_in_nm ( value ) \u00a4 Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\models.py 5079 5080 5081 5082 5083 5084 5085 5086 5087 5088 5089 def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" if not self . min_bandwidth_in_nm <= value <= self . max_bandwidth_in_nm : raise ValueError ( 'Parameter value out of range: {val!r} ' . format ( val = value )) cmd = ':BANDwidth {value:.3f} nm' . format ( value = value ) self . command ( cmd ) get_bandwidth_in_ghz () \u00a4 Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\models.py 5091 5092 5093 5094 5095 5096 5097 5098 def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" return super () . get_bandwidth_in_ghz () set_bandwidth_in_ghz ( value ) \u00a4 Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\models.py 5100 5101 5102 5103 5104 5105 5106 5107 def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" return super () . set_bandwidth_in_ghz ( value ) ModelOTF970 \u00a4 Bases: BaseModelSantecBandwidthTunableFilter model = 'OTF-970' class-attribute \u00a4 brand = 'Santec' class-attribute \u00a4 details = { 'Wavelength Range' : '1525 ~ 1610 nm' , 'Bandwidth Range' : 'Type specified' , 'Max Input Power' : '+27 dBm' } class-attribute \u00a4 ModelOTF980 \u00a4 Bases: BaseModelSantecBandwidthTunableFilter model = 'OTF-980' class-attribute \u00a4 brand = 'Santec' class-attribute \u00a4 details = { 'Wavelength Range' : '1525 ~ 1610 nm' , 'Bandwidth Range' : 'Bandwidth type specified' , 'Max Input Power' : '+27 dBm' } class-attribute \u00a4 ModelOTF930 ( resource_name , read_termination = ' \\r\\n ' , write_termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOTF Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' Source code in pyinst\\models.py 5145 5146 5147 5148 5149 5150 5151 5152 5153 5154 5155 5156 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super () . __init__ ( resource_name , read_termination = read_termination , write_termination = write_termination , ** kwargs ) model = 'OTF-930' class-attribute \u00a4 brand = 'Santec' class-attribute \u00a4 details = { 'Wavelength Range' : '1520 ~ 1610 nm' , 'Frequency Range' : '186.2 ~ 197.2 THz' , 'Bandwidth' : 'Fixed and different between bandwidth types' , 'Max Input Power' : '+20 dBm' } class-attribute \u00a4 min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 5158 5159 5160 5161 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 5163 5164 5165 5166 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 5168 5169 5170 5171 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1520.0 max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 5173 5174 5175 5176 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1610.0 min_bandwidth_in_nm () property \u00a4 The minimum bandwidth in nm. Source code in pyinst\\models.py 5178 5179 5180 5181 @property def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" return float ( 'nan' ) max_bandwidth_in_nm () property \u00a4 The maximum bandwidth in nm. Source code in pyinst\\models.py 5183 5184 5185 5186 @property def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" return float ( 'nan' ) min_bandwidth_in_ghz () property \u00a4 The minimum bandwidth in GHz. Source code in pyinst\\models.py 5188 5189 5190 5191 @property def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return float ( 'nan' ) max_bandwidth_in_ghz () property \u00a4 The maximum bandwidth in GHz. Source code in pyinst\\models.py 5193 5194 5195 5196 @property def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return float ( 'nan' ) get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 5198 5199 5200 5201 5202 5203 5204 5205 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 5207 5208 5209 5210 5211 5212 5213 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 5215 5216 5217 5218 5219 5220 5221 5222 5223 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = 'WA' wl = float ( self . query ( cmd )) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 5225 5226 5227 5228 5229 5230 5231 5232 5233 5234 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( 'Parameter wavelength out of range: {wl!r} ' . format ( wl = wavelength )) cmd = 'WA {wl:.3f} ' . format ( wl = wavelength ) self . command ( cmd ) get_bandwidth_in_nm () \u00a4 Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\models.py 5236 5237 5238 5239 5240 5241 5242 5243 def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" raise Error ( 'The bandwidth of this OTF model is not tunable.' ) set_bandwidth_in_nm ( value ) \u00a4 Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\models.py 5245 5246 5247 5248 5249 5250 5251 5252 def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" raise Error ( 'The bandwidth of this OTF model is not tunable.' ) get_bandwidth_in_ghz () \u00a4 Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\models.py 5254 5255 5256 5257 5258 5259 5260 5261 def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" raise Error ( 'The bandwidth of this OTF model is not tunable.' ) set_bandwidth_in_ghz ( value ) \u00a4 Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\models.py 5263 5264 5265 5266 5267 5268 5269 5270 def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" raise Error ( 'The bandwidth of this OTF model is not tunable.' ) ModelBTF10011 ( resource_name , baudrate = 115200 , read_termination = ' \\r\\n ' , write_termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: RawSerialInstrument , TypeOTF Source code in pyinst\\models.py 5281 5282 def __init__ ( self , resource_name : str , baudrate : int = 115200 , read_termination : str = \" \\r\\n \" , write_termination : str = \" \\r\\n \" , ** kwargs : Any ): super () . __init__ ( resource_name , baudrate , read_termination , write_termination , ** kwargs ) model = 'BTF-100-11' class-attribute \u00a4 brand = 'OZ Optics' class-attribute \u00a4 detais = { 'Wavelength Range' : '1525 ~ 1565 nm' , 'Bandwidth (FWHM)' : '1 ~ 18 nm' } class-attribute \u00a4 min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 5284 5285 5286 5287 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 5289 5290 5291 5292 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 5294 5295 5296 5297 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1525.0 max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 5299 5300 5301 5302 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1565.0 min_bandwidth_in_ghz () property \u00a4 The minimum bandwidth in GHz. Source code in pyinst\\models.py 5304 5305 5306 5307 @property def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return super () . min_bandwidth_in_ghz max_bandwidth_in_ghz () property \u00a4 The maximum bandwidth in GHz. Source code in pyinst\\models.py 5309 5310 5311 5312 @property def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return super () . max_bandwidth_in_ghz min_bandwidth_in_nm () property \u00a4 The minimum bandwidth in nm. Source code in pyinst\\models.py 5314 5315 5316 5317 @property def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" return 1.0 max_bandwidth_in_nm () property \u00a4 The maximum bandwidth in nm. Source code in pyinst\\models.py 5319 5320 5321 5322 @property def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" return 18 get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 5340 5341 5342 5343 5344 5345 5346 5347 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 5349 5350 5351 5352 5353 5354 5355 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 5357 5358 5359 5360 5361 5362 5363 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return self . __get_wl_bw ()[ 0 ] set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 5365 5366 5367 5368 5369 5370 5371 5372 5373 5374 5375 5376 5377 5378 5379 5380 5381 5382 5383 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f 'Parameter wavelength is out of range: { wavelength !r} ' ) self . write ( f 'w { wavelength : .2f } ' ) reply = '' while True : rx = self . read () . lower () reply += rx if 'done' in rx or 'error' in rx : break if 'unknown' in reply : raise ValueError ( 'Unkonwn linewidth.' ) if 'error' in reply : raise ValueError ( 'Failed to set wavelength.' ) get_bandwidth_in_ghz () \u00a4 Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\models.py 5385 5386 5387 5388 5389 5390 5391 5392 def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" return super () . get_bandwidth_in_ghz () set_bandwidth_in_ghz ( value ) \u00a4 Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\models.py 5394 5395 5396 5397 5398 5399 5400 5401 def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" return super () . set_bandwidth_in_ghz ( value ) get_bandwidth_in_nm () \u00a4 Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\models.py 5403 5404 5405 5406 5407 5408 5409 5410 def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" self . __get_wl_bw ()[ 1 ] set_bandwidth_in_nm ( value ) \u00a4 Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\models.py 5412 5413 5414 5415 5416 5417 5418 5419 5420 5421 5422 5423 5424 5425 5426 5427 5428 5429 5430 5431 5432 def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" if not self . min_bandwidth_in_nm <= value <= self . max_bandwidth_in_nm : raise ValueError ( f 'Parameter value is out of range: { value !r} ' ) wl = self . get_wavelength () self . write ( f 'w { wl : .2f } , { value : .2f } ' ) reply = '' while True : rx = self . read () . lower () reply += rx if 'done(a)' in rx or 'error' in rx : break if 'out of range' in reply : raise ValueError ( 'Out of range.' ) if 'error' in reply : raise ValueError ( 'Failed to set bandwidth.' ) ModelNSW ( resource_name , slot_or_type ) \u00a4 Bases: BaseInstrument , TypeSW The Smart Optical Switch produced by NeoPhotonics. Parameters: Name Type Description Default resource_name str The USB S/N of the device. You can use get_usb_devices() method to list all the available devices. required slot_or_type int | str For optical switch with 1x2/2x2/1x4 optical switch slots, this parameter is the slot in the frame. For 1x8 and 1x16 optical switch, this parameter defines the type of the optical switch. - 1 | 2 | 3 : The slot in the frame. - '1 8': This optical switch is 1x8 type. - '1 16': This optical switch is 1x16 type. required Source code in pyinst\\models.py 5447 5448 5449 5450 5451 5452 5453 5454 5455 5456 5457 5458 5459 5460 5461 5462 5463 5464 5465 5466 5467 5468 5469 5470 5471 5472 5473 5474 5475 5476 def __init__ ( self , resource_name : str , slot_or_type : int | str ) -> None : \"\"\" Args: resource_name: The USB S/N of the device. You can use get_usb_devices() method to list all the available devices. slot_or_type: For optical switch with 1x2/2x2/1x4 optical switch slots, this parameter is the slot in the frame. For 1x8 and 1x16 optical switch, this parameter defines the type of the optical switch. - `1`|`2`|`3`: The slot in the frame. - '1*8': This optical switch is 1x8 type. - '1*16': This optical switch is 1x16 type. \"\"\" super ( ModelNSW , self ) . __init__ ( resource_name ) if isinstance ( slot_or_type , int ): self . __index = slot_or_type - 1 else : index_map = { '1' : 0 , '2' : 1 , '3' : 2 , '1*8' : 3 , '1*16' : 4 , } try : self . __index = index_map [ slot_or_type ] except KeyError : raise KeyError ( 'Invalid value for slot_or_type: %r ' % slot_or_type ) self . __usb_dev = NeoUsbDevice ( resource_name ) self . __reg_ch_sel = 16 * self . __index + 130 model = 'Neo_SW' class-attribute \u00a4 brand = 'NeoPhotonics' class-attribute \u00a4 params = [{ 'name' : 'slot_or_type' , 'type' : 'str' , 'options' : [ '1' , '2' , '3' , '1*8' , '1*16' ]}] class-attribute \u00a4 get_usb_devices () classmethod \u00a4 The USB S/N of all the available devices. Source code in pyinst\\models.py 5478 5479 5480 5481 @classmethod def get_usb_devices ( cls ) -> List [ str ]: \"\"\"The USB S/N of all the available devices.\"\"\" return [ i [ \"Serial Number\" ] . upper () for i in NeoUsbDevice . get_devices_information ()] close () \u00a4 Release the instrument resource. Source code in pyinst\\models.py 5483 5484 5485 def close ( self ) -> None : \"Release the instrument resource.\" pass set_channel ( channel ) \u00a4 Switch to the specified channel route. Parameters: Name Type Description Default channel int The channel number. required Source code in pyinst\\models.py 5493 5494 5495 5496 5497 5498 5499 5500 5501 5502 5503 def set_channel ( self , channel : int ) -> None : \"\"\" Switch to the specified channel route. Args: channel: The channel number. \"\"\" self . __usb_dev . write_registers ( 0xC2 , self . __reg_ch_sel , channel . to_bytes ( 1 , 'big' )) time . sleep ( 0.4 ) if self . get_channel () != channel : raise ValueError ( 'Set switch channel failed.' ) get_channel () \u00a4 Queries the current channel route of the switch. Returns: Type Description int The channel number of current route. Source code in pyinst\\models.py 5505 5506 5507 5508 5509 5510 5511 5512 5513 5514 5515 def get_channel ( self ) -> int : \"\"\" Queries the current channel route of the switch. Returns: The channel number of current route. \"\"\" channel = int . from_bytes ( self . __usb_dev . read_registers ( 0xC2 , self . __reg_ch_sel , 1 ), 'big' ) if channel <= 0 : raise ValueError ( 'Invalid channel number.' ) return channel ModelAT5524 ( resource_name , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeSW Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 5523 5524 5525 5526 5527 5528 5529 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelAT5524 , self ) . __init__ ( resource_name , ** kwargs ) model = 'AT5524' class-attribute \u00a4 brand = 'Applent' class-attribute \u00a4 get_channel () \u00a4 Queries the current channel route of the switch. Returns: Type Description int The channel number of current route. Source code in pyinst\\models.py 5531 5532 5533 5534 5535 5536 5537 5538 def get_channel ( self ) -> int : \"\"\" Queries the current channel route of the switch. Returns: The channel number of current route. \"\"\" return int ( self . query ( 'SW?' )) set_channel ( channel ) \u00a4 Switch to the specified channel route. Parameters: Name Type Description Default channel int The channel number. required Source code in pyinst\\models.py 5540 5541 5542 5543 5544 5545 5546 5547 5548 5549 5550 5551 5552 def set_channel ( self , channel : int ) -> None : \"\"\" Switch to the specified channel route. Args: channel: The channel number. \"\"\" cmd = 'SW {ch:d} ' . format ( ch = channel ) self . command ( cmd ) time . sleep ( 0.5 ) if self . get_channel () != channel : raise ValueError ( 'Set switch channel failed.' ) ModelMAP_mOSX_C1 ( resource_name , slot , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeMSW mOSX-C1 is a optical matrix switch by VIAVI. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 5579 5580 5581 5582 5583 5584 5585 5586 5587 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelMAP_mOSX_C1 , self ) . __init__ ( resource_name , ** kwargs ) self . __device = ' {slot:d} , {device} ' . format ( slot = slot , device = 1 ) model = 'mOSX-C1' class-attribute \u00a4 brand = 'VIAVI' class-attribute \u00a4 details = { 'Wavelength Range' : '1260 ~ 1675 nm' , 'Return Loss' : '> 50 dB' , 'Switching Time' : '<= 25 ms' , 'Insertion Loss' : '<= 1.5 dB' , 'PDL' : '< 0.1 dB' } class-attribute \u00a4 params = [{ 'name' : 'slot' , 'type' : 'int' , 'min' : 1 , 'max' : 8 }] class-attribute \u00a4 get_switch_topology () \u00a4 Returns the configured switch topology Returns: Name Type Description M int number of input ports N int number of output ports Notes For common connection mode, M = total number of ports, N = 0. Source code in pyinst\\models.py 5589 5590 5591 5592 5593 5594 5595 5596 5597 5598 5599 5600 5601 5602 5603 def get_switch_topology ( self ) -> Tuple [ int , int ]: \"\"\" Returns the configured switch topology Returns: M: number of input ports N: number of output ports Notes: For common connection mode, M = total number of ports, N = 0. \"\"\" cmd = ':MODUle:TYPE? {device} ' . format ( device = self . __device ) rpl = self . query ( cmd ) config = tuple ( int ( i ) for i in rpl . split ( ',' )) return config set_switch_topology ( n_in , n_out ) \u00a4 Sets the switch topology to emulate an MxN switch or common connection. All the channels will be cleared after topology changed. Parameters: Name Type Description Default n_in int Number of input ports (0 for common connection mode). required n_out int Number of output ports (0 for common connection mode). required Source code in pyinst\\models.py 5605 5606 5607 5608 5609 5610 5611 5612 5613 5614 5615 5616 5617 5618 5619 def set_switch_topology ( self , n_in : int , n_out : int ) -> None : \"\"\" Sets the switch topology to emulate an MxN switch or common connection. All the channels will be cleared after topology changed. Args: n_in: Number of input ports (0 for common connection mode). n_out: Number of output ports (0 for common connection mode). \"\"\" cmd = ':MODUle:TYPe {device} , {n_in} , {n_out} ' . format ( device = self . __device , n_in = n_in , n_out = n_out ) self . command ( cmd ) list_channels () \u00a4 Returns a list of all configured connections and their status. Returns: Type Description List [ Tuple [ int , int , bool ]] All configured connections and their status. [(port1, port2, state), ...]. List [ Tuple [ int , int , bool ]] For state, False = Disabled, True = Enabled. Source code in pyinst\\models.py 5621 5622 5623 5624 5625 5626 5627 5628 5629 5630 5631 5632 5633 5634 5635 5636 5637 5638 def list_channels ( self ) -> List [ Tuple [ int , int , bool ]]: \"\"\" Returns a list of all configured connections and their status. Returns: All configured connections and their status. [(port1, port2, state), ...]. For state, False = Disabled, True = Enabled. \"\"\" cmd = ':ROUTe:LIST? {device} ' . format ( device = self . __device ) rpl = self . query ( cmd ) channels = [] for s in rpl . split ( ',' ): spl = s . split () port1 , port2 = ( int ( i ) for i in spl [ 0 ] . split ( '-' )) state = bool ( int ( spl [ 1 ])) channels . append (( port1 , port2 , state )) return channels connect ( port1 , port2 , enable = True ) \u00a4 Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use check to confirm whether either port is already in use. Parameters: Name Type Description Default port1 int The valid port at one end of the path. required port2 int The valid port at the other end of the path. required enable bool Whether to enable the connection. True Source code in pyinst\\models.py 5640 5641 5642 5643 5644 5645 5646 5647 5648 5649 5650 5651 5652 5653 5654 5655 5656 5657 5658 5659 5660 5661 5662 5663 5664 5665 5666 def connect ( self , port1 : int , port2 : int , enable : bool = True ) -> None : \"\"\" Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use `check` to confirm whether either port is already in use. Args: port1: The valid port at one end of the path. port2: The valid port at the other end of the path. enable: Whether to enable the connection. \"\"\" m , n = self . get_switch_topology () if m == n : raise ValueError ( 'Invalid port value: please select 2 different ports. port1= {port1} , port2= {port2} ' . format ( port1 = port1 , port2 = port2 )) if n == 0 : if port1 > m or port2 > m : raise ValueError ( 'Invalid port value: exceed max port number {m} . port1= {port1} , port2= {port2} ' . format ( m = m , port1 = port1 , port2 = port2 )) else : if not ( port1 <= m ) ^ ( port2 <= m ): raise ValueError ( 'Invalid port value for {m} x {n} switch: port1= {port1} , port2= {port2} ' . format ( m = m , n = n , port1 = port1 , port2 = port2 )) cmd = ':ROUTe:CLOSe {device} , {port1:d} , {port2:d} , {state:d} ' . format ( device = self . __device , port1 = port1 , port2 = port2 , state = enable ) self . command ( cmd ) connected_with ( port ) \u00a4 Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Parameters: Name Type Description Default port int The port number to check connection information. required Returns: Type Description Optional [ int ] Connection information for the specified port. Optional [ int ] None = No connection exists. Optional [ int ] Optional [ int ] int N = Port number at other end of the connection. Source code in pyinst\\models.py 5668 5669 5670 5671 5672 5673 5674 5675 5676 5677 5678 5679 5680 5681 5682 5683 5684 5685 5686 5687 def connected_with ( self , port : int ) -> Optional [ int ]: \"\"\" Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Args: port: The port number to check connection information. Returns: Connection information for the specified port. None = No connection exists. int N = Port number at other end of the connection. \"\"\" cmd = ':ROUTe:CLOSe? {device} , {port:d} ' . format ( device = self . __device , port = port ) rpl = self . query ( cmd ) return int ( rpl ) or None clear ( port ) \u00a4 Clears a configured optical connection connected to the specified port. Parameters: Name Type Description Default port int The port at either end of the configured connection. required Source code in pyinst\\models.py 5689 5690 5691 5692 5693 5694 5695 5696 5697 def clear ( self , port : int ) -> None : \"\"\" Clears a configured optical connection connected to the specified port. Args: port: The port at either end of the configured connection. \"\"\" cmd = ':ROUTe:CLEAR {device} , {port:d} ' . format ( device = self . __device , port = port ) self . command ( cmd ) clear_all () \u00a4 Clears all configured optical connections. Source code in pyinst\\models.py 5699 5700 5701 5702 def clear_all ( self ) -> None : \"\"\"Clears all configured optical connections.\"\"\" cmd = ':ROUTe:CLEAR:ALL {device} ' . format ( device = self . __device ) self . command ( cmd ) check ( port1 , port2 ) \u00a4 To check if port1 and port2 are both not in use. Parameters: Name Type Description Default port1 int The port at one end of the path. required port2 int The port at the other end of the path. required Returns: Type Description bool True = Both ports available (not in use). bool False = Conflict; one or both ports already in use. Source code in pyinst\\models.py 5704 5705 5706 5707 5708 5709 5710 5711 5712 5713 5714 5715 5716 5717 5718 5719 5720 5721 def check ( self , port1 : int , port2 : int ) -> bool : \"\"\" To check if port1 and port2 are both not in use. Args: port1: The port at one end of the path. port2: The port at the other end of the path. Returns: True = Both ports available (not in use). False = Conflict; one or both ports already in use. \"\"\" cmd = ':ROUTe:CHECK? {device} , {port1:d} , {port2:d} ' . format ( device = self . __device , port1 = port1 , port2 = port2 ) rpl = self . query ( cmd ) return bool ( int ( rpl )) enable ( port , enable = True ) \u00a4 Sets the connection state of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required enable bool True = Enable | False = Disable. True Source code in pyinst\\models.py 5723 5724 5725 5726 5727 5728 5729 5730 5731 5732 5733 5734 def enable ( self , port : int , enable : bool = True ) -> None : \"\"\" Sets the connection state of a configured optical connection. Args: port: The port at either end of the connection. enable: True = Enable | False = Disable. \"\"\" cmd = ':ROUTe:ENABle {device} , {port:d} , {state:d} ' . format ( device = self . __device , port = port , state = enable ) self . command ( cmd ) disable ( port ) \u00a4 Disable the connection of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required Source code in pyinst\\models.py 5736 5737 5738 5739 5740 5741 5742 5743 def disable ( self , port : int ) -> None : \"\"\" Disable the connection of a configured optical connection. Args: port: The port at either end of the connection. \"\"\" return self . enable_channel ( port , enable = False ) is_enabled ( port ) \u00a4 Returns the connection state of a configured optical connection. Returns: Type Description bool True = Enabled | False = Disabled Source code in pyinst\\models.py 5745 5746 5747 5748 5749 5750 5751 5752 5753 5754 def is_enabled ( self , port : int ) -> bool : \"\"\" Returns the connection state of a configured optical connection. Returns: True = Enabled | False = Disabled \"\"\" cmd = ':ROUTe:ENABle? {device} , {port:d} ' . format ( device = self . __device , port = port ) rpl = self . query ( cmd ) return bool ( int ( rpl )) ModelE3631A ( resource_name , port , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePS Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required port int The port number among three output ports. - 1 : +6V - 2 : +25V - 3 : -25V required **kwargs Any directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 5775 5776 5777 5778 5779 5780 5781 5782 5783 5784 5785 5786 5787 5788 def __init__ ( self , resource_name : str , port : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. port: The port number among three output ports. - `1`: +6V - `2`: +25V - `3`: -25V **kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , ** kwargs ) if port not in { 1 , 2 , 3 }: raise ValueError ( f \"Invalid parameter port: { port !r} \" ) self . __port = port model = 'E3631A' class-attribute \u00a4 brand = 'Keysight' class-attribute \u00a4 details = { 'Power Supply Range' : 'Port 1: 6V, 5A; Port 2: 25V, 1A; Port 3: -25V, 1A' } class-attribute \u00a4 params = [{ 'name' : 'port' , 'type' : 'int' , 'options' : [ 1 , 2 , 3 ]}] class-attribute \u00a4 port () property \u00a4 The selected port number among three output ports. Source code in pyinst\\models.py 5798 5799 5800 5801 @property def port ( self ) -> int : \"\"\"The selected port number among three output ports.\"\"\" return self . __port min_voltage () property \u00a4 The minimum programmable voltage level in V. Source code in pyinst\\models.py 5803 5804 5805 5806 5807 5808 5809 @property @__select_port def min_voltage ( self ) -> float : \"\"\"The minimum programmable voltage level in V.\"\"\" cmd = \":VOLTage? MIN\" v = float ( self . query ( cmd )) return v max_voltage () property \u00a4 The maximum programmable voltage level in V. Source code in pyinst\\models.py 5811 5812 5813 5814 5815 5816 5817 @property @__select_port def max_voltage ( self ) -> float : \"\"\"The maximum programmable voltage level in V.\"\"\" cmd = \":VOLTage? MAX\" v = float ( self . query ( cmd )) return v min_current () property \u00a4 The minimum programmable current level in A. Source code in pyinst\\models.py 5819 5820 5821 5822 5823 5824 5825 @property @__select_port def min_current ( self ) -> float : \"\"\"The minimum programmable current level in A.\"\"\" cmd = \":CURRent? MIN\" i = float ( self . query ( cmd )) return i max_current () property \u00a4 The maximum programmable current level in A. Source code in pyinst\\models.py 5827 5828 5829 5830 5831 5832 5833 @property @__select_port def max_current ( self ) -> float : \"\"\"The maximum programmable current level in A.\"\"\" cmd = \":CURRent? MAX\" i = float ( self . query ( cmd )) return i enable ( en = True ) \u00a4 Enables (or disables) the outputs of the power supply. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 @__select_port def enable ( self , en : bool = True ) -> None : \"\"\" Enables (or disables) the outputs of the power supply. Args: en: `True` = Enable, `False` = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = f ':OUTPut { [ \"OFF\" , \"ON\" ][ int ( en )] } ' self . command ( cmd ) disable () \u00a4 Disables the output of the power supply. Source code in pyinst\\models.py 5848 5849 5850 def disable ( self ) -> None : \"\"\"Disables the output of the power supply.\"\"\" self . enable ( False ) is_enabled () \u00a4 Queries whether the output of the power supply is enabled. Returns: Type Description bool True = Enabled, False = Disabled Source code in pyinst\\models.py 5852 5853 5854 5855 5856 5857 5858 5859 5860 5861 5862 @__select_port def is_enabled ( self ) -> bool : \"\"\" Queries whether the output of the power supply is enabled. Returns: `True` = Enabled, `False` = Disabled \"\"\" cmd = \":OUTPut?\" status = bool ( int ( self . query ( cmd ))) return status set_voltage_limit ( value ) \u00a4 Sets the immediate voltage level of the power supply. Parameters: Name Type Description Default value int | float The voltage level in V. required Source code in pyinst\\models.py 5864 5865 5866 5867 5868 5869 5870 5871 5872 5873 5874 5875 @__select_port def set_voltage_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate voltage level of the power supply. Args: value: The voltage level in V. \"\"\" if not 0 <= value <= self . max_voltage : raise ValueError ( f \"The voltage limit value out of range: { value !r} \" ) cmd = f \":VOLTage { value : .4f } \" self . command ( cmd ) get_voltage_limit () \u00a4 Queries the immediate voltage level of the power supply. Returns: Type Description float The voltage level in V. Source code in pyinst\\models.py 5877 5878 5879 5880 5881 5882 5883 5884 5885 5886 5887 @__select_port def get_voltage_limit ( self ) -> float : \"\"\" Queries the immediate voltage level of the power supply. Returns: The voltage level in V. \"\"\" cmd = \":VOLTage?\" v = float ( self . query ( cmd )) return v measure_voltage () \u00a4 Queries the voltage measured at the sense terminals of the power supply. Returns: Type Description float The voltage measured in V. Source code in pyinst\\models.py 5889 5890 5891 5892 5893 5894 5895 5896 5897 5898 5899 @__select_port def measure_voltage ( self ) -> float : \"\"\"Queries the voltage measured at the sense terminals of the power supply. Returns: The voltage measured in V. \"\"\" cmd = \":MEASure:VOLTage?\" v = float ( self . query ( cmd )) return v set_current_limit ( value ) \u00a4 Sets the immediate current level of the power supply. Parameters: Name Type Description Default value int | float The current level in A. required Source code in pyinst\\models.py 5901 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 @__select_port def set_current_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate current level of the power supply. Args: value: The current level in A. \"\"\" if not 0 <= value <= self . max_current : raise ValueError ( f \"The current limit value out of range: { value !r} \" ) cmd = f \":CURRent { value : .4f } \" self . command ( cmd ) get_current_limit () \u00a4 Queries the immediate current level of the power supply. Returns: Type Description float The current level in A. Source code in pyinst\\models.py 5914 5915 5916 5917 5918 5919 5920 5921 5922 5923 5924 @__select_port def get_current_limit ( self ) -> float : \"\"\" Queries the immediate current level of the power supply. Returns: The current level in A. \"\"\" cmd = \":CURRent?\" i = float ( self . command ( cmd )) return i measure_current () \u00a4 Queries the current measured across the current sense resistor inside the power supply. Returns: Type Description float The current measured in A. Source code in pyinst\\models.py 5926 5927 5928 5929 5930 5931 5932 5933 5934 5935 5936 @__select_port def measure_current ( self ) -> float : \"\"\"Queries the current measured across the current sense resistor inside the power supply. Returns: The current measured in A. \"\"\" cmd = \":MEASure:CURRent?\" i = float ( self . command ( cmd )) return i ModelE3633A ( resource_name , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePSwithOvpOcpFunctions Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 5949 5950 5951 5952 5953 5954 5955 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , ** kwargs ) model = 'E3633A' class-attribute \u00a4 brand = 'Keysight' class-attribute \u00a4 details = { 'Power Supply Range' : '20 V, 10 A | 8 V, 20 A' } class-attribute \u00a4 set_output_range ( option ) \u00a4 Selects an output range to be programmed. Note For model E3633A, the programming ranges are: LOW: 0 V to 8.24 V, 0 A to 20.60 A HIGH: 0 V to 20.60 V, 0 A to 10.30 A Parameters: Name Type Description Default option str \"LOW\" | \"HIGH\" required Source code in pyinst\\models.py 5957 5958 5959 5960 5961 5962 5963 5964 5965 5966 5967 5968 5969 5970 def set_output_range ( self , option : str ) -> None : \"\"\"Selects an output range to be programmed. Note: For model E3633A, the programming ranges are: - LOW: 0 V to 8.24 V, 0 A to 20.60 A - HIGH: 0 V to 20.60 V, 0 A to 10.30 A Args: option: `\"LOW\"` | `\"HIGH\"` \"\"\" cmd = f \":VOLTage:RANGe { option } \" self . command ( cmd ) get_output_range () \u00a4 Queries current selected output range. Please refer to set_output_range() for more information. Returns: Type Description str \"LOW\" | \"HIGH\" Source code in pyinst\\models.py 5972 5973 5974 5975 5976 5977 5978 5979 def get_output_range ( self ) -> str : \"\"\"Queries current selected output range. Please refer to `set_output_range()` for more information. Returns: `\"LOW\"` | `\"HIGH\"` \"\"\" min_voltage () property \u00a4 The minimum programmable voltage level in V. Source code in pyinst\\models.py 5981 5982 5983 5984 5985 5986 @property def min_voltage ( self ) -> float : \"\"\"The minimum programmable voltage level in V.\"\"\" cmd = \":VOLTage? MIN\" v = float ( self . query ( cmd )) return v max_voltage () property \u00a4 The maximum programmable voltage level in V. Source code in pyinst\\models.py 5988 5989 5990 5991 5992 5993 @property def max_voltage ( self ) -> float : \"\"\"The maximum programmable voltage level in V.\"\"\" cmd = \":VOLTage? MAX\" v = float ( self . query ( cmd )) return v min_current () property \u00a4 The minimum programmable current level in A. Source code in pyinst\\models.py 5995 5996 5997 5998 5999 6000 @property def min_current ( self ) -> float : \"\"\"The minimum programmable current level in A.\"\"\" cmd = \":CURRent? MIN\" i = float ( self . query ( cmd )) return i max_current () property \u00a4 The maximum programmable current level in A. Source code in pyinst\\models.py 6002 6003 6004 6005 6006 6007 @property def max_current ( self ) -> float : \"\"\"The maximum programmable current level in A.\"\"\" cmd = \":CURRent? MAX\" i = float ( self . query ( cmd )) return i enable ( en = True ) \u00a4 Enables (or disables) the outputs of the power supply. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 6009 6010 6011 6012 6013 6014 6015 6016 6017 6018 6019 def enable ( self , en : bool = True ) -> None : \"\"\" Enables (or disables) the outputs of the power supply. Args: en: `True` = Enable, `False` = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = f ':OUTPut { [ \"OFF\" , \"ON\" ][ int ( en )] } ' self . command ( cmd ) disable () \u00a4 Disables the output of the power supply. Source code in pyinst\\models.py 6021 6022 6023 def disable ( self ) -> None : \"\"\"Disables the output of the power supply.\"\"\" self . enable ( False ) is_enabled () \u00a4 Queries whether the output of the power supply is enabled. Returns: Type Description bool True = Enabled, False = Disabled Source code in pyinst\\models.py 6025 6026 6027 6028 6029 6030 6031 6032 6033 6034 def is_enabled ( self ) -> bool : \"\"\" Queries whether the output of the power supply is enabled. Returns: `True` = Enabled, `False` = Disabled \"\"\" cmd = \":OUTPut?\" status = bool ( int ( self . query ( cmd ))) return status set_voltage_limit ( value ) \u00a4 Sets the immediate voltage level of the power supply. Parameters: Name Type Description Default value int | float The voltage level in V. required Source code in pyinst\\models.py 6036 6037 6038 6039 6040 6041 6042 6043 6044 6045 6046 def set_voltage_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate voltage level of the power supply. Args: value: The voltage level in V. \"\"\" if not 0 <= value <= self . max_voltage : raise ValueError ( f \"The voltage limit value out of range: { value !r} \" ) cmd = f \":VOLTage { value : .4f } \" self . command ( cmd ) get_voltage_limit () \u00a4 Queries the immediate voltage level of the power supply. Returns: Type Description float The voltage level in V. Source code in pyinst\\models.py 6048 6049 6050 6051 6052 6053 6054 6055 6056 6057 def get_voltage_limit ( self ) -> float : \"\"\" Queries the immediate voltage level of the power supply. Returns: The voltage level in V. \"\"\" cmd = \":VOLTage?\" v = float ( self . query ( cmd )) return v measure_voltage () \u00a4 Queries the voltage measured at the sense terminals of the power supply. Returns: Type Description float The voltage measured in V. Source code in pyinst\\models.py 6059 6060 6061 6062 6063 6064 6065 6066 6067 6068 def measure_voltage ( self ) -> float : \"\"\"Queries the voltage measured at the sense terminals of the power supply. Returns: The voltage measured in V. \"\"\" cmd = \":MEASure:VOLTage?\" v = float ( self . query ( cmd )) return v set_current_limit ( value ) \u00a4 Sets the immediate current level of the power supply. Parameters: Name Type Description Default value int | float The current level in A. required Source code in pyinst\\models.py 6070 6071 6072 6073 6074 6075 6076 6077 6078 6079 6080 def set_current_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate current level of the power supply. Args: value: The current level in A. \"\"\" if not 0 <= value <= self . max_current : raise ValueError ( f \"The current limit value out of range: { value !r} \" ) cmd = f \":CURRent { value : .4f } \" self . command ( cmd ) get_current_limit () \u00a4 Queries the immediate current level of the power supply. Returns: Type Description float The current level in A. Source code in pyinst\\models.py 6082 6083 6084 6085 6086 6087 6088 6089 6090 6091 def get_current_limit ( self ) -> float : \"\"\" Queries the immediate current level of the power supply. Returns: The current level in A. \"\"\" cmd = \":CURRent?\" i = float ( self . command ( cmd )) return i measure_current () \u00a4 Queries the current measured across the current sense resistor inside the power supply. Returns: Type Description float The current measured in A. Source code in pyinst\\models.py 6093 6094 6095 6096 6097 6098 6099 6100 6101 6102 def measure_current ( self ) -> float : \"\"\"Queries the current measured across the current sense resistor inside the power supply. Returns: The current measured in A. \"\"\" cmd = \":MEASure:CURRent?\" i = float ( self . command ( cmd )) return i set_ocp_level ( level ) \u00a4 Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use is_ocp_tripped() to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the clear_ocp() method after the condition that caused the OCP trip is removed. Parameters: Name Type Description Default level int | float The OCP level in A. required Source code in pyinst\\models.py 6104 6105 6106 6107 6108 6109 6110 6111 6112 6113 6114 6115 6116 6117 6118 def set_ocp_level ( self , level : int | float ) -> None : \"\"\" Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use `is_ocp_tripped()` to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the `clear_ocp()` method after the condition that caused the OCP trip is removed. Args: level: The OCP level in A. \"\"\" cmd = f \":CURRent:PROTection { level : .4f } \" self . command ( cmd ) get_ocp_level () \u00a4 Returns the overcurrent protection trip level presently programmed. See set_ocp_level() for more details. Returns: Type Description float The OCP level in A. Source code in pyinst\\models.py 6120 6121 6122 6123 6124 6125 6126 6127 6128 6129 6130 def get_ocp_level ( self ) -> float : \"\"\"Returns the overcurrent protection trip level presently programmed. See `set_ocp_level()` for more details. Returns: The OCP level in A. \"\"\" cmd = f \":CURRent:PROTection?\" ocp = float ( self . query ( cmd )) return ocp enable_ocp ( enable = True ) \u00a4 Enables (or disables) the overcurrent protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\models.py 6132 6133 6134 6135 6136 6137 6138 6139 6140 6141 6142 def enable_ocp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overcurrent protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = f \":CURRent:PROTection:STATe { enable : d } \" self . command ( cmd ) disable_ocp () \u00a4 Disables the overcurrent protection function of the power supply. Source code in pyinst\\models.py 6144 6145 6146 6147 def disable_ocp ( self ) -> None : \"\"\"Disables the overcurrent protection function of the power supply. \"\"\" self . enable_ocp ( False ) is_ocp_enabled () \u00a4 Queries whether the overcurrent protection function of the power supply is enabled. Returns: Type Description bool Whether the OCP function is enabled. Source code in pyinst\\models.py 6149 6150 6151 6152 6153 6154 6155 6156 6157 6158 def is_ocp_enabled ( self ) -> bool : \"\"\"Queries whether the overcurrent protection function of the power supply is enabled. Returns: Whether the OCP function is enabled. \"\"\" cmd = \":CURRent:PROTection:STATe?\" enabled = bool ( int ( self . query ( cmd ))) return enabled is_ocp_tripped () \u00a4 Queries if the overcurrent protection circuit is tripped and not cleared. Returns: Type Description bool If the overcurrent protection circuit is tripped and not cleared. Source code in pyinst\\models.py 6160 6161 6162 6163 6164 6165 6166 6167 6168 6169 def is_ocp_tripped ( self ) -> bool : \"\"\"Queries if the overcurrent protection circuit is tripped and not cleared. Returns: If the overcurrent protection circuit is tripped and not cleared. \"\"\" cmd = \":CURRent:PROTection:TRIPped?\" tripped = bool ( int ( self . query ( cmd ))) return tripped clear_ocp () \u00a4 This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\models.py 6171 6172 6173 6174 6175 6176 6177 6178 6179 6180 6181 def clear_ocp ( self ) -> None : \"\"\"This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note: Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. \"\"\" cmd = \":CURRent:PROTection:CLEar\" self . command ( cmd ) set_ovp_level ( level ) \u00a4 Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use is_ovp_tripped() to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the clear_ovp() method after the condition that caused the OVP trip is removed. Parameters: Name Type Description Default level int | float The OVP level in V. required Source code in pyinst\\models.py 6183 6184 6185 6186 6187 6188 6189 6190 6191 6192 6193 6194 6195 6196 6197 def set_ovp_level ( self , level : int | float ) -> None : \"\"\" Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use `is_ovp_tripped()` to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the `clear_ovp()` method after the condition that caused the OVP trip is removed. Args: level: The OVP level in V. \"\"\" cmd = f \":VOLTage:PROTection { level : .4f } \" self . command ( cmd ) get_ovp_level () \u00a4 Returns the overvoltage protection trip level presently programmed. See set_ovp_level() for more details. Returns: Type Description float The OVP level in V. Source code in pyinst\\models.py 6199 6200 6201 6202 6203 6204 6205 6206 6207 6208 6209 def get_ovp_level ( self ) -> float : \"\"\"Returns the overvoltage protection trip level presently programmed. See `set_ovp_level()` for more details. Returns: The OVP level in V. \"\"\" cmd = \":VOLTage:PROTection?\" ovp = float ( self . query ( cmd )) return ovp enable_ovp ( enable = True ) \u00a4 Enables (or disables) the overvoltage protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\models.py 6211 6212 6213 6214 6215 6216 6217 6218 6219 6220 6221 def enable_ovp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overvoltage protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = f \":VOLTage:PROTection:STATe { enable : d } \" self . command ( cmd ) disable_ovp () \u00a4 Disables the overvoltage protection function of the power supply. Source code in pyinst\\models.py 6223 6224 6225 6226 def disable_ovp ( self ) -> None : \"\"\"Disables the overvoltage protection function of the power supply. \"\"\" self . enable_ovp ( False ) is_ovp_enabled () \u00a4 Queries whether the overvoltage protection function of the power supply is enabled. Returns: Type Description bool Whether the OVP function is enabled. Source code in pyinst\\models.py 6228 6229 6230 6231 6232 6233 6234 6235 6236 6237 def is_ovp_enabled ( self ) -> bool : \"\"\"Queries whether the overvoltage protection function of the power supply is enabled. Returns: Whether the OVP function is enabled. \"\"\" cmd = \":VOLTage:PROTection:STATe?\" enabled = bool ( int ( self . query ( cmd ))) return enabled is_ovp_tripped () \u00a4 Queries if the overvoltage protection circuit is tripped and not cleared. Returns: Type Description bool If the overvoltage protection circuit is tripped and not cleared. Source code in pyinst\\models.py 6239 6240 6241 6242 6243 6244 6245 6246 6247 6248 def is_ovp_tripped ( self ) -> bool : \"\"\"Queries if the overvoltage protection circuit is tripped and not cleared. Returns: If the overvoltage protection circuit is tripped and not cleared. \"\"\" cmd = \":VOLTage:PROTection:TRIPped?\" tripped = bool ( int ( self . query ( cmd ))) return tripped clear_ovp () \u00a4 This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\models.py 6250 6251 6252 6253 6254 6255 6256 6257 6258 6259 6260 6261 def clear_ovp ( self ) -> None : \"\"\"This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note: Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. \"\"\" cmd = \":VOLTage:PROTection:CLEar\" self . command ( cmd ) ModelPDLE101 ( resource_name , write_termination = '' , read_termination = '#' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePDLE Source code in pyinst\\models.py 6278 6279 6280 6281 def __init__ ( self , resource_name : str , write_termination : str = '' , read_termination : str = '#' , ** kwargs : Any ) -> None : super ( ModelPDLE101 , self ) . __init__ ( resource_name , write_termination = write_termination , read_termination = read_termination , ** kwargs ) model = 'PDLE-101' class-attribute \u00a4 brand = 'General Photonics' class-attribute \u00a4 details = { 'Wavelength Range' : '1520 ~ 1570 nm' , 'Insertion Loss (Max.)' : '3 dB at PDL=0' , 'PDL Range' : '0.1 to 20 dB' , 'PDL Resolution' : '0.1 dB' , 'PDL Accuracy' : '2 \u00b1 (0.1 dB +1 % o f PDL)' } class-attribute \u00a4 opc () property \u00a4 Source code in pyinst\\models.py 6286 6287 6288 6289 @property def opc ( self ): # PDLE-101 does not support *OPC query, return '1' for compliance return '1' min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 6291 6292 6293 6294 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 6296 6297 6298 6299 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 6301 6302 6303 6304 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1520.0 max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 6306 6307 6308 6309 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1570.0 min_pdl () property \u00a4 The minimum settable PDL value. Source code in pyinst\\models.py 6311 6312 6313 6314 @property def min_pdl ( self ) -> float : \"\"\"The minimum settable PDL value.\"\"\" return 0.1 max_pdl () property \u00a4 The maximum settable PDL value. Source code in pyinst\\models.py 6316 6317 6318 6319 @property def max_pdl ( self ) -> float : \"\"\"The maximum settable PDL value.\"\"\" return 20.0 get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 6321 6322 6323 6324 6325 6326 6327 6328 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 6330 6331 6332 6333 6334 6335 6336 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 6338 6339 6340 6341 6342 6343 6344 6345 6346 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \"*WAV?\" wl = float ( self . __format_result ( self . query ( cmd ))) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 6348 6349 6350 6351 6352 6353 6354 6355 6356 6357 6358 6359 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"The parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \"*WAV { round ( wavelength ) : d } #\" err_code = self . __format_result ( self . query ( cmd )) if err_code != 'E00' : raise Error ( f 'Error code: { err_code } ' ) set_pdl_value ( value ) \u00a4 Parameters: Name Type Description Default value int | float The PDL setting value in dB. required Source code in pyinst\\models.py 6361 6362 6363 6364 6365 6366 6367 6368 6369 6370 6371 def set_pdl_value ( self , value : int | float ) -> None : \"\"\" Args: value: The PDL setting value in dB. \"\"\" if not self . min_pdl <= value <= self . max_pdl : raise ValueError ( f \"The parameter value is out of range: { value !r} \" ) cmd = f '*PDL { value : .1f } #' err_code = self . __format_result ( self . query ( cmd )) if err_code != 'E00' : raise Error ( f 'Error code: { err_code } ' ) get_pdl_value () \u00a4 Returns: Type Description float The PDL setting value in dB. Source code in pyinst\\models.py 6373 6374 6375 6376 6377 6378 6379 6380 def get_pdl_value ( self ) -> float : \"\"\" Returns: The PDL setting value in dB. \"\"\" cmd = '*PDL?' pdl = float ( self . __format_result ( self . query ( cmd ))) return pdl ModelPSY201 ( resource_name , write_termination = ' \\r\\n ' , read_termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePOLC Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\models.py 6394 6395 6396 6397 6398 6399 6400 6401 6402 6403 6404 def __init__ ( self , resource_name : str , write_termination : str = ' \\r\\n ' , read_termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super ( ModelPSY201 , self ) . __init__ ( resource_name , write_termination = write_termination , read_termination = read_termination , ** kwargs ) model = 'PSY-201' class-attribute \u00a4 brand = 'General Photonics' class-attribute \u00a4 details = { 'Wavelength Range' : '1480 ~ 1620 nm' , 'Operating power range' : '-35 ~ 10 dBm' } class-attribute \u00a4 min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 6406 6407 6408 6409 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 6411 6412 6413 6414 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 6416 6417 6418 6419 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1480.0 max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 6421 6422 6423 6424 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1620.0 get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 6426 6427 6428 6429 6430 6431 6432 6433 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 6435 6436 6437 6438 6439 6440 6441 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 6443 6444 6445 6446 6447 6448 6449 6450 6451 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":CONFigure:WLENgth?\" wl = float ( self . query ( cmd )) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Parameters: Name Type Description Default wavelength int | float The optical wavelength in nm. required Source code in pyinst\\models.py 6453 6454 6455 6456 6457 6458 6459 6460 6461 6462 6463 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Args: wavelength: The optical wavelength in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \":CONFigure:WLENgth { wavelength : d } \" self . command ( cmd ) get_sop () \u00a4 Query measured SOP (Stokes parameters) S1, S2, S3. Returns: Type Description Tuple [ float , float , float ] The stokes parameters S1, S2, S3. Source code in pyinst\\models.py 6519 6520 6521 6522 6523 6524 6525 6526 6527 def get_sop ( self ) -> Tuple [ float , float , float ]: \"\"\"Query measured SOP (Stokes parameters) S1, S2, S3. Returns: The stokes parameters S1, S2, S3. \"\"\" cmd = \":MEASure:SOP? \" s1 , s2 , s3 = ( float ( i ) for i in self . query ( cmd ) . split ( ',' )) return s1 , s2 , s3 get_dop () \u00a4 Query measured degree of polarization. Returns: Type Description float The degree of polarization. Source code in pyinst\\models.py 6529 6530 6531 6532 6533 6534 6535 6536 6537 def get_dop ( self ) -> float : \"\"\"Query measured degree of polarization. Returns: The degree of polarization. \"\"\" cmd = ':MEASure:DOP?' dop = float ( self . query ( cmd )) return dop set_sop ( s1 , s2 , s3 ) \u00a4 Set SOP by Stokes parameters and enable tracking. Parameters: Name Type Description Default s1 int | float 1st dimention of the Stokes parameters. required s2 int | float 2nd dimention of the Stokes parameters. required s3 int | float 3rd dimention of the Stokes parameters. required Tips Stokes parameters are auto-normalized to unit vector before tracking: SOP will be set to (s1/A, s2/A, s3/A) where A = sqrt(s1*s1, s2*s2, s3*s3) Note s1=s2=s3=0 is not allowed. Source code in pyinst\\models.py 6539 6540 6541 6542 6543 6544 6545 6546 6547 6548 6549 6550 6551 6552 6553 6554 6555 6556 6557 6558 6559 6560 6561 def set_sop ( self , s1 : int | float , s2 : int | float , s3 : int | float ) -> None : \"\"\"Set SOP by Stokes parameters and enable tracking. Args: s1: 1st dimention of the Stokes parameters. s2: 2nd dimention of the Stokes parameters. s3: 3rd dimention of the Stokes parameters. Tips: Stokes parameters are auto-normalized to unit vector before tracking: SOP will be set to `(s1/A, s2/A, s3/A)` where `A = sqrt(s1*s1, s2*s2, s3*s3)` Note: `s1=s2=s3=0` is not allowed. \"\"\" if s1 == s2 == s3 == 0 : raise ValueError ( \"s1=s2=s3=0 is not allowed.\" ) cmd = f \":CONTrol:SOP { s1 : .2f } , { s2 : .2f } , { s3 : .2f } \" self . command ( cmd ) set_sop_in_spherical ( theta , phi ) \u00a4 Set SOP in spherical coordinates and enable tracking. Parameters: Name Type Description Default theta int | float 1st dimension in degree of the spherical coordinates. 0 to 360 (degrees). required phi int | float 2nd dimention in degree of the spherical cordinates. 0 to 180 (degrees). required Source code in pyinst\\models.py 6563 6564 6565 6566 6567 6568 6569 6570 6571 6572 6573 6574 6575 def set_sop_in_spherical ( self , theta : int | float , phi : int | float ) -> None : \"\"\" Set SOP in spherical coordinates and enable tracking. Args: theta: 1st dimension in degree of the spherical coordinates. 0 to 360 (degrees). phi: 2nd dimention in degree of the spherical cordinates. 0 to 180 (degrees). \"\"\" if not 0 <= theta <= 360 : raise ValueError ( f \"Parameter theta is out of range: { theta !r} \" ) if not 0 <= phi <= 180 : raise ValueError ( f \"Parameter phi is out of range: { phi !r} \" ) cmd = f \":CONTrol:ANGLe { theta : .2f } , { phi : .2f } \" self . command ( cmd ) start_scrambling ( mode , rate , ** params ) \u00a4 Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. DISCrete : Discrete scrambling. TRIangle : Triangle scrambling. TORNado : Tornado scrambling. Additional scrambling parameter _type is required. required rate int | float Scrambling rate. Different mode may have different units. required **params Any Additional scrambling params if any. _type (int) : For TORNado mode only. 0 = Fixed axis, 1 = Rotating axis. {} Note Different mode has different unit for scrambling rate: Discrete: points/s Triangle: 2\u03c0 rad/s Tornado: rev/s Source code in pyinst\\models.py 6577 6578 6579 6580 6581 6582 6583 6584 6585 6586 6587 6588 6589 6590 6591 6592 6593 6594 6595 6596 6597 6598 6599 6600 6601 6602 6603 6604 6605 def start_scrambling ( self , mode : str , rate : int | float , ** params : Any ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `DISCrete`: Discrete scrambling. - `TRIangle`: Triangle scrambling. - `TORNado`: Tornado scrambling. Additional scrambling parameter `_type` is required. rate: Scrambling rate. Different mode may have different units. **params: Additional scrambling params if any. * `_type (int)`: For `TORNado` mode only. `0` = Fixed axis, `1` = Rotating axis. Note: Different mode has different unit for scrambling rate: - Discrete: points/s - Triangle: 2\u03c0 rad/s - Tornado: rev/s \"\"\" if mode . upper () . startswith ( 'DISC' ): self . _discrete_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TRI' ): self . _triangle_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TORN' ): self . _tornado_scramble ( True , _type = params [ '_type' ], rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" ) stop_scrambling () \u00a4 Stop scrambling. Source code in pyinst\\models.py 6607 6608 6609 def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" self . _tornado_scramble ( False ) ModelPSY101 ( resource_name , read_termination = '#' , write_termination = '' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePOLC Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '#' write_termination str Write termination character. '' **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\models.py 6623 6624 6625 6626 6627 6628 6629 6630 6631 def __init__ ( self , resource_name : str , read_termination : str = '#' , write_termination : str = '' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs ) model = 'PSY-101' class-attribute \u00a4 brand = 'General Photonics' class-attribute \u00a4 details = { 'Wavelength Range' : '1500 ~ 1600 nm' , 'Operating Power Range' : '-15 ~ 10 dBm' } class-attribute \u00a4 opc () property \u00a4 Source code in pyinst\\models.py 6636 6637 6638 6639 @property def opc ( self ): # PSY-101 does not support *OPC query, return '1' for compliance return '1' min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 6641 6642 6643 6644 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 6646 6647 6648 6649 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 6651 6652 6653 6654 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1500.0 max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 6656 6657 6658 6659 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1600.0 get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 6661 6662 6663 6664 6665 6666 6667 6668 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 6670 6671 6672 6673 6674 6675 6676 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 6678 6679 6680 6681 6682 6683 6684 6685 6686 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \"*WAV?\" wl = float ( self . __format_result ( self . query ( cmd ))) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 6688 6689 6690 6691 6692 6693 6694 6695 6696 6697 6698 6699 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"The parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \"*WAV { round ( wavelength ) : d } #\" err_code = self . __format_result ( self . query ( cmd )) if err_code != 'E00' : raise Error ( f 'Error code: { err_code } ' ) start_scrambling ( mode , rate , ** params ) \u00a4 Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. RANdom : Random scrambling. SAW : Saw wave scrambling. required rate int | float Scrambling rate in Hz. required **params Any Not used for PSY-101. {} Source code in pyinst\\models.py 6741 6742 6743 6744 6745 6746 6747 6748 6749 6750 6751 6752 6753 6754 6755 6756 6757 6758 def start_scrambling ( self , mode : str , rate : int | float , ** params : Any ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `RANdom`: Random scrambling. - `SAW`: Saw wave scrambling. rate: Scrambling rate in Hz. **params: Not used for PSY-101. \"\"\" if mode . upper () . startswith ( 'RAN' ): self . _random_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'SAW' ): self . _saw_scramble ( True , rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" ) stop_scrambling () \u00a4 Stop scrambling. Source code in pyinst\\models.py 6760 6761 6762 def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" self . _random_scramble ( False ) ModelMPC202 ( resource_name , read_termination = ' \\r\\n ' , write_termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePOLC Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\models.py 6780 6781 6782 6783 6784 6785 6786 6787 6788 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs ) model = 'MPC-202' class-attribute \u00a4 brand = 'General Photonics' class-attribute \u00a4 details = { 'Wavelength Range' : '1260 ~ 1650 nm' , 'Scrambling Modes' : 'Discrete, Tornado, Rayleigh, Triangle' , 'Tornado Rate' : '0 to 60,000 Rev/s' , 'Rayleigh Rate' : '0 to 2000 rad/s' , 'Triangle Rate' : '0 to 2000 x 2\u03c0 rad/s' , 'Discrete Rate' : '0 to 20,000 points/s' } class-attribute \u00a4 min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 6790 6791 6792 6793 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 6795 6796 6797 6798 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 6800 6801 6802 6803 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1260.0 max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 6805 6806 6807 6808 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1650.0 get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 6810 6811 6812 6813 6814 6815 6816 6817 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 6819 6820 6821 6822 6823 6824 6825 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 6827 6828 6829 6830 6831 6832 6833 6834 6835 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":CONFigure:WLENgth?\" wl = float ( self . query ( cmd )) return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 6837 6838 6839 6840 6841 6842 6843 6844 6845 6846 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \":CONFigure:WLENgth { wavelength : d } \" self . command ( cmd ) start_scrambling ( mode , rate , ** params ) \u00a4 Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. DISCrete : Discrete scrambling. TRIangle : Triangle scrambling. RAYLeigh : Rayleigh scrambling. TORNado : Tornado scrambling. Additional scrambling parameter _type is required. required rate int | float Scrambling rate. Different mode may have different units. required **params Any Additional scrambling params if any. _type (int) : For TORNado mode only. 0 = Fixed axis, 1 = Rotating axis. {} Note Different mode has different unit for scrambling rate: Discrete: points/s Triangle: 2\u03c0 rad/s Rayleigh: rad/s Tornado: rev/s Source code in pyinst\\models.py 6918 6919 6920 6921 6922 6923 6924 6925 6926 6927 6928 6929 6930 6931 6932 6933 6934 6935 6936 6937 6938 6939 6940 6941 6942 6943 6944 6945 6946 6947 6948 6949 6950 def start_scrambling ( self , mode : str , rate : int | float , ** params : Any ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `DISCrete`: Discrete scrambling. - `TRIangle`: Triangle scrambling. - `RAYLeigh`: Rayleigh scrambling. - `TORNado`: Tornado scrambling. Additional scrambling parameter `_type` is required. rate: Scrambling rate. Different mode may have different units. **params: Additional scrambling params if any. * `_type (int)`: For `TORNado` mode only. `0` = Fixed axis, `1` = Rotating axis. Note: Different mode has different unit for scrambling rate: - Discrete: points/s - Triangle: 2\u03c0 rad/s - Rayleigh: rad/s - Tornado: rev/s \"\"\" if mode . upper () . startswith ( 'DISC' ): self . _discrete_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TRI' ): self . _triangle_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'RAYL' ): self . _rayleigh_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TORN' ): self . _tornado_scramble ( True , _type = params [ '_type' ], rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" ) stop_scrambling () \u00a4 Stop scrambling. Source code in pyinst\\models.py 6952 6953 6954 def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" self . _tornado_scramble ( False ) ModelEPS1000 ( resource_name , timeout = 3 , ** kwargs ) \u00a4 Bases: BaseInstrument , TypePOLC Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required timeout int | float Timeout in milliseconds for all resource I/O operations. 3 **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\models.py 6969 6970 6971 6972 6973 6974 6975 6976 6977 6978 6979 6980 6981 6982 6983 6984 6985 6986 6987 6988 6989 6990 6991 6992 6993 6994 6995 6996 6997 6998 def __init__ ( self , resource_name : str , timeout : int | float = 3 , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. timeout: Timeout in milliseconds for all resource I/O operations. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super () . __init__ ( resource_name , ** kwargs ) baudrate = 230400 device_list = ftd . listDevices () for i in range ( len ( device_list )): desc = ftd . getDeviceInfoDetail ( i )[ \"description\" ] . decode () if desc . startswith ( 'EPS1000' ): sn = desc . split ()[ - 1 ] else : continue if resource_name . endswith ( sn ): self . __device_num = i break else : raise ValueError ( 'Device not found: {model} | S/N: {sn} ' . format ( model = self . model , sn = resource_name )) self . __device = ftd . open ( self . __device_num ) self . __device . setBaudRate ( baudrate ) self . __device . setDataCharacteristics ( 8 , 0 , 0 ) self . __device . setTimeouts ( round ( timeout * 1000 ), round ( timeout * 1000 )) self . __connected = True model = 'EPS1000' class-attribute \u00a4 brand = 'Novoptel' class-attribute \u00a4 details = { 'Wavelength Range' : '1510.3-1639.1 nm' , 'Frequency Range' : '182.9-198.5 THz' , 'Insertion loss' : '1.5-3 dB' , 'Peaked Rate' : '0-20,000,000 rad/s' , 'Rayleigh Rate' : '0-10,000,000 rad/s' } class-attribute \u00a4 min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 7000 7001 7002 7003 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 7005 7006 7007 7008 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 7010 7011 7012 7013 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1510.3 max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 7015 7016 7017 7018 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1639.1 close () \u00a4 Release the instrument resource. Source code in pyinst\\models.py 7020 7021 7022 7023 def close ( self ) -> None : \"\"\"Release the instrument resource.\"\"\" self . __device . close () self . __connected = False set_qwp ( qwp_n , direction , speed ) \u00a4 qwp_n = 0, 1, 2, 3, 4, 5 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (rad/s) Source code in pyinst\\models.py 7063 7064 7065 7066 7067 7068 7069 7070 7071 7072 7073 7074 7075 7076 7077 7078 7079 7080 7081 7082 7083 7084 7085 7086 def set_qwp ( self , qwp_n , direction , speed ) -> None : \"\"\" qwp_n = 0, 1, 2, 3, 4, 5 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (rad/s) \"\"\" control_reg_addr = qwp_n + 1 speed_reg_addr0 = qwp_n * 2 + 11 speed_reg_addr1 = qwp_n * 2 + 12 if direction == 0 : self . __write_register ( control_reg_addr , 0 ) elif direction == 1 : self . __write_register ( control_reg_addr , 1 ) elif direction == - 1 : self . __write_register ( control_reg_addr , 3 ) else : raise ValueError ( 'Invalid value for direction: {} . Options: 0(Disabled), 1(Forward), -1(Backward)' . format ( direction )) speed_msb = int (( speed * 100 ) / ( 2 ** 16 )) & 0xffff speed_lsb = int (( speed * 100 )) & 0xffff self . __write_register ( speed_reg_addr0 , speed_lsb ) self . __write_register ( speed_reg_addr1 , speed_msb ) set_hwp ( direction , speed ) \u00a4 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (krad/s) Source code in pyinst\\models.py 7088 7089 7090 7091 7092 7093 7094 7095 7096 7097 7098 7099 7100 7101 7102 7103 7104 7105 7106 7107 7108 7109 7110 7111 7112 def set_hwp ( self , direction , speed ) -> None : \"\"\" direction = 0(Disabled), 1(Forward), -1(Backward) speed = (krad/s) \"\"\" control_reg_addr = 0 speed_reg_addr0 = 9 speed_reg_addr1 = 10 if direction == 0 : self . __write_register ( control_reg_addr , 0 ) elif direction == 1 : self . __write_register ( control_reg_addr , 1 ) elif direction == - 1 : self . __write_register ( control_reg_addr , 3 ) else : raise ValueError ( 'Invalid value for direction: {} . Options: 0(Disabled), 1(Forward), -1(Backward)' . format ( direction )) speed_msb = int (( speed * 100 ) / ( 2 ** 16 )) & 0xffff speed_lsb = int (( speed * 100 )) & 0xffff self . __write_register ( speed_reg_addr0 , speed_lsb ) self . __write_register ( speed_reg_addr1 , speed_msb ) get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 7114 7115 7116 7117 7118 7119 7120 7121 7122 7123 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" value = int ( self . __read_register ( addr = 25 )) freq = ( value + 1828 ) / 10 return freq set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 7125 7126 7127 7128 7129 7130 7131 7132 7133 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" value = round ( frequency * 10 - 1828 ) self . write_register ( addr = 25 , data = value ) time . sleep ( 0.1 ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 7135 7136 7137 7138 7139 7140 7141 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return super () . get_wavelength () set_wavelength ( wavelength ) \u00a4 Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Parameters: Name Type Description Default wavelength int | float The optical wavelength in nm. required Source code in pyinst\\models.py 7143 7144 7145 7146 7147 7148 7149 7150 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Args: wavelength: The optical wavelength in nm. \"\"\" return super () . set_wavelength ( wavelength ) start_scrambling ( mode , rate , ** params ) \u00a4 speed unit: rad/s when mode is 'Peaked', the max rate is 2000000rad/s when mode is 'Rayleigh', the max rate is 1000000rad/s when mode is 'Marvell', the unit is rad/s Source code in pyinst\\models.py 7152 7153 7154 7155 7156 7157 7158 7159 7160 7161 7162 7163 7164 7165 7166 7167 7168 7169 7170 7171 7172 7173 7174 7175 7176 7177 7178 7179 7180 7181 7182 7183 7184 7185 7186 7187 7188 7189 7190 7191 7192 7193 7194 7195 7196 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : ''' speed unit: rad/s when mode is 'Peaked', the max rate is 2000000rad/s when mode is 'Rayleigh', the max rate is 1000000rad/s when mode is 'Marvell', the unit is rad/s ''' speed = rate if mode == 'Peaked' : if 0 <= speed <= 20000000 : speed_10 = round ( speed / 10 ) lsb = speed_10 & 0xFFFF msb = ( 2 << 14 ) | ( speed_10 >> 16 ) self . write_register ( addr = 23 , data = lsb ) self . write_register ( addr = 24 , data = msb ) else : raise ValueError ( \"Speed is out of range, the max speed of 'Peaked' mode is 2000000rad/s\" ) elif mode == 'Rayleigh' : if 0 <= speed <= 10000000 : speed_10 = round ( speed / 10 ) lsb = speed_10 & 0xFFFF msb = ( 3 << 14 ) | ( speed_10 >> 16 ) self . write_register ( addr = 23 , data = lsb ) self . write_register ( addr = 24 , data = msb ) else : raise ValueError ( \"Speed is out of range, the max speed of 'Rayleigh' mode is 1000000rad/s\" ) elif mode == 'Marvell' : self . stop_scrambling () self . write_register ( addr = 23 , data = 0 ) self . write_register ( addr = 24 , data = 0 ) time . sleep ( 0.1 ) qwp_speed = speed / 6 offset = 0.02 self . set_qwp ( qwp_n = 0 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_qwp ( qwp_n = 1 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) self . set_qwp ( qwp_n = 2 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_hwp ( direction =- 1 , speed = 0.01 ) # -1 is backward. 0.01 could be just rad/s self . set_qwp ( qwp_n = 3 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) self . set_qwp ( qwp_n = 4 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_qwp ( qwp_n = 5 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) if qwp_speed < 10 : self . set_hwp ( direction = 0 , speed = 0 ) stop_scrambling () \u00a4 Stop scrambling. Source code in pyinst\\models.py 7198 7199 7200 def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" self . start_scrambling ( 'Peaked' , 0 ) ModelPMD1000 ( resource_name , read_termination = '#' , write_termination = '' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePMDE Source code in pyinst\\models.py 7213 7214 def __init__ ( self , resource_name : str , read_termination : str = '#' , write_termination : str = '' , ** kwargs : Any ): super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs ) model = 'PMD-1000' class-attribute \u00a4 brand = 'General Photonics' class-attribute \u00a4 details = { 'Wavelength Range' : 'C Band' , 'Insertion Loss' : '5.5 dB' , '1st Order PMD Range' : '0.36 to 182.4 ps' , '2nd Order PMD Range' : '8100 ps2' } class-attribute \u00a4 opc () property \u00a4 Source code in pyinst\\models.py 7219 7220 7221 7222 @property def opc ( self ): # PMD1000 does not support *OPC query, return '1' for compliance return '1' min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 7224 7225 7226 7227 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return 191.6 max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 7229 7230 7231 7232 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return 195.9 min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 7234 7235 7236 7237 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return super () . min_wavelength max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 7239 7240 7241 7242 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return super () . max_wavelength get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 7244 7245 7246 7247 7248 7249 7250 7251 7252 7253 7254 7255 7256 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" ch_str = self . _formatted_query ( '*CHA?' ) if ch_str [ 0 ] != 'C' : raise ValueError ( 'Unexpected Reply' ) ch = int ( ch_str [ 1 :]) freq = 191.6 + ( ch - 1 ) * 0.05 return freq set_frequency ( frequency ) \u00a4 Set optical frequency value. Note The PMD-1000 can only set to several discrete values on the ITU C-band: frequency = 191.6 + n*0.05, 0 <= n <= 86 If the frequency is not on the ITU grid, it will be set to the nearest valid value, and no exception will be raised. Parameters: Name Type Description Default frequency int | float optical frequency in THz. required Source code in pyinst\\models.py 7258 7259 7260 7261 7262 7263 7264 7265 7266 7267 7268 7269 7270 7271 7272 7273 7274 7275 7276 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency value. Note: The PMD-1000 can only set to several discrete values on the ITU C-band: frequency = 191.6 + n*0.05, 0 <= n <= 86 If the frequency is not on the ITU grid, it will be set to the nearest valid value, and no exception will be raised. Args: frequency: optical frequency in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f 'frequency is out of range: { frequency !r} ' ) ch = round (( frequency - 191.6 ) / 0.05 ) + 1 self . query ( '*CHC %03d #' % ch ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 7278 7279 7280 7281 7282 7283 7284 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return super () . get_wavelength () set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Please refer to set_frequency . Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 7286 7287 7288 7289 7290 7291 7292 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Please refer to `set_frequency`. Args: wavelength: The optical wavelength setting in nm. \"\"\" return super () . set_wavelength ( wavelength ) get_pmd_value () \u00a4 Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: Name Type Description pmd float The DGD value in ps. sopmd float The 2nd order pmd in ps**2. Source code in pyinst\\models.py 7294 7295 7296 7297 7298 7299 7300 7301 7302 7303 7304 7305 def get_pmd_value ( self ) -> Tuple [ float , float ]: \"\"\" Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\" cmd = \"*PMD:CON CAL?\" r = self . _formatted_query ( cmd ) pmd , sopmd = ( float ( i ) for i in r . split ( ',' )) return pmd , sopmd set_pmd_value ( pmd , sopmd ) \u00a4 Set PMD (DGD) and SOPMD (Second Order PMD) target value. Parameters: Name Type Description Default pmd int | float The DGD value in ps. required sopmd int | float The 2nd order pmd in ps**2. required Note The pmd and sopmd setting of the PMD-1000 is not continuous. The pmd and sopmd will be set to the nearest supported values, so the real value will not be exactly the same with the setting values. Source code in pyinst\\models.py 7307 7308 7309 7310 7311 7312 7313 7314 7315 7316 7317 7318 7319 7320 7321 7322 7323 7324 7325 7326 def set_pmd_value ( self , pmd : int | float , sopmd : int | float ) -> None : \"\"\" Set PMD (DGD) and SOPMD (Second Order PMD) target value. Args: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. Note: The pmd and sopmd setting of the PMD-1000 is not continuous. The pmd and sopmd will be set to the nearest supported values, so the real value will not be exactly the same with the setting values. \"\"\" if not 0 <= pmd <= 182.4 : raise ValueError ( f 'pmd is out of range: { pmd } ' ) if not 0 <= sopmd <= 8319.9 : raise ValueError ( f 'sopmd is out of range: { sopmd } ' ) err_code = self . _formatted_query ( '*PMD:CON %.2f , %.2f #' % ( pmd , sopmd )) if err_code != 'E00' : raise ValueError ( f 'Error code = { err_code } ' )","title":"Instrument Models"},{"location":"api/models/#instrument-models","text":"Instrument Model classes are types to drive specific instrument models. An Instrument Model class always starts with a prefix Model , for example: ModelAQ6370 , ModelOTF980 . All Instrument Model classes can be directly imported from pyinst name space. The Instrument Model is immediately opened on object creation. The first parameter of the __init__ method is always resource_name : For VISA compatible instruments, it is the VISA resource name or alias. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument/USB chip. For more details, please refer to the specific Instrument Model class. Examples: >>> from pyinst import ModelN7744A >>> opm = ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) >>> opm . get_power_value () -10.85 >>> opm . close () # release the instrument resource Note An Instrument Model object is a function component in logic, does not correspond with the physical topography of the real-world instrument. For example, for OPM N7744A, it has 4 slots of OPM function components. Each slot can be considered as an independent ModelN7744A object. Instrument Model classes also support context management, so you can use the \"with\" statement to ensure that the instrument resource is closed after usage. Examples: >>> with ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) as opm : >>> opm . get_power_value () >>> -10.85","title":"Instrument Models"},{"location":"api/models/#pyinst.models.BaseModelN77xx","text":"Bases: VisaInstrument Base class for Keysight N77xx Series: N7744A, N7745A, N7747A and N7748A Optical Multiport Power Meters N7751A and N7752A Variable Optical Attenuators and 2-Channel Optical Power Meter N7761A, N7762A and N7764A Variable Optical Attenuators Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 82 83 84 85 86 87 88 89 90 91 92 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" if not 1 <= slot <= self . _max_slot : raise ValueError ( f 'Parameter slot is out of range: { slot !r} . The max slot number is { self . _max_slot } .' ) self . __slot = slot super () . __init__ ( resource_name , ** kwargs )","title":"BaseModelN77xx"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM","text":"Bases: BaseModelN77xx , TypeOPM","title":"BaseModelN77xx_OPM"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 109 110 111 112 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 114 115 116 117 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 119 120 121 122 123 124 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :POW:WAV? MIN\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 126 127 128 129 130 131 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :POW:WAV? MAX\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 133 134 135 136 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.001 # 1us","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 138 139 140 141 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 143 144 145 146 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200.0 # dB","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 148 149 150 151 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0 # dB","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 153 154 155 156 157 158 159 160 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 162 163 164 165 166 167 168 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 170 171 172 173 174 175 176 177 178 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENS {slot:d} :POW:WAV?\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 180 181 182 183 184 185 186 187 188 189 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENS {slot:d} :POW:WAV {value:f} NM\" . format ( slot = self . _slot , value = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot:d} :POW?\" . format ( slot = self . _slot ) power_value = float ( self . query ( cmd )) return power_value","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 207 208 209 210 211 212 213 214 215 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENS {slot:d} :POW:UNIT?\" . format ( slot = self . _slot ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 217 218 219 220 221 222 223 224 225 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENS {slot:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENS {slot:d} :CORR?\" . format ( slot = self . _slot ) cal = - float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 244 245 246 247 248 249 250 251 252 253 254 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( \"param value out of range: {value} \" . format ( value = value )) cmd = \":SENS {slot} :CORR {value} DB\" . format ( slot = self . _slot , value =- value ) self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 256 257 258 259 260 261 262 263 264 265 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENS {slot:d} :POW:ATIM?\" . format ( slot = self . _slot ) avg_t = float ( Decimal ( self . query ( cmd )) * 10 ** 3 ) return avg_t","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 267 268 269 270 271 272 273 274 275 276 277 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( \"param value out of range: {value} \" . format ( value = value )) cmd = \":SENS {slot} :POW:ATIM {value} MS\" . format ( slot = self . _slot , value = value ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM","text":"Bases: BaseModelN77xx , TypeVOA , TypeOPM","title":"BaseModelN77xx_VOA_with_OPM"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 282 283 284 285 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 287 288 289 290 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 292 293 294 295 296 297 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :WAVelength? MIN\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 299 300 301 302 303 304 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :WAVelength? MAX\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 306 307 308 309 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 2.0","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 311 312 313 314 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 316 317 318 319 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200.0","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 321 322 323 324 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 326 327 328 329 330 331 332 333 334 335 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :ATT? MIN\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att","title":"min_att()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 337 338 339 340 341 342 343 344 345 346 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :ATT? MAX\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att","title":"max_att()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\models.py 348 349 350 351 352 353 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INP {slot} :OFFS? MIN\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset","title":"min_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\models.py 355 356 357 358 359 360 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INP {slot} :OFFS? MAX\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset","title":"max_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 362 363 364 365 366 367 368 369 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 371 372 373 374 375 376 377 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 379 380 381 382 383 384 385 386 387 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INPut {slot:d} :WAVelength?\" . format ( slot = self . _slot ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 389 390 391 392 393 394 395 396 397 398 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength } \" ) cmd = \":INPut {slot:d} :WAVelength {wl} NM\" . format ( slot = self . _slot , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot:d} :POW?\" . format ( slot = self . _slot ) power_value = float ( self . query ( cmd )) return power_value","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 416 417 418 419 420 421 422 423 424 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":OUTPut {slot:d} :POWer:UNit?\" . format ( slot = self . _slot ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 426 427 428 429 430 431 432 433 434 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":OUTPut {slot:d} :POWer:UNit {unit:d} \" . format ( slot = self . _slot , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" cmd = \":OUTPut {slot:d} :POWer:OFFSet?\" . format ( slot = self . _slot ) cal = - float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 453 454 455 456 457 458 459 460 461 462 463 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTPut {slot:d} :POWer:OFFSet {value} DB\" . format ( slot = self . _slot , value =- value ) # opposite sign self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 465 466 467 468 469 470 471 472 473 474 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":OUTPut {slot:d} :ATIMe?\" . format ( slot = self . _slot ) atime = float ( Decimal ( self . query ( cmd )) * 10 ** 3 ) return atime","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 476 477 478 479 480 481 482 483 484 485 486 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTPut {slot:d} :ATIMe {value} MS\" . format ( slot = self . _slot , value = value ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 488 489 490 491 492 493 494 495 496 497 498 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTP {slot:d} {status:d} \" . format ( slot = self . _slot , status = en ) self . command ( cmd )","title":"enable()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.disable","text":"Disable the optical output. Source code in pyinst\\models.py 500 501 502 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 504 505 506 507 508 509 510 511 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTP {slot:d} ?\" . format ( slot = self . _slot ) status = bool ( int ( self . query ( cmd ))) return status","title":"is_enabled()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INP {slot:d} :ATT?\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att","title":"get_att()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 531 532 533 534 535 536 537 538 539 540 541 542 543 544 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INP {slot:d} :ATT {value:.3f} DB\" . format ( slot = self . _slot , value = att ) self . command ( cmd )","title":"set_att()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 546 547 548 549 550 551 552 553 554 555 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INP {slot:d} :OFFS?\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset","title":"get_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 557 558 559 560 561 562 563 564 565 566 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) self . command ( \":INP {slot:d} :OFFS {value:.3f} DB\" . format ( slot = self . _slot , value = offset ))","title":"set_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7744A","text":"Bases: BaseModelN77xx_OPM Keysight N7744A multi-channel optical power meter.","title":"ModelN7744A"},{"location":"api/models/#pyinst.models.ModelN7744A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelN7744A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelN7744A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelN7744A.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelN7752A","text":"Bases: BaseModelN77xx_VOA_with_OPM , BaseModelN77xx_OPM Keysight N7752A 2-channel optical attenuator and 2-channel power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelN7752A , self ) . __init__ ( resource_name , slot , ** kwargs ) __topology = { 1 : 'voa_with_opm' , 2 : 'voa_with_opm' , 3 : 'voa_with_opm' , 4 : 'voa_with_opm' , 5 : 'opm' , 6 : 'opm' , } self . __slot_type = __slot_type = __topology [ slot ] self . __Base = BaseModelN77xx_OPM if __slot_type == 'opm' else BaseModelN77xx_VOA_with_OPM","title":"ModelN7752A"},{"location":"api/models/#pyinst.models.ModelN7752A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelN7752A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelN7752A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelN7752A.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelN7752A.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 649 650 651 652 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 654 655 656 657 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 659 660 661 662 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return self . __Base . min_wavelength . __get__ ( self )","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 664 665 666 667 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return self . __Base . max_wavelength . __get__ ( self )","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 669 670 671 672 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 2.0 # 2ms","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 674 675 676 677 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 679 680 681 682 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return self . __Base . min_pow_cal . __get__ ( self )","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 684 685 686 687 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return self . __Base . max_pow_cal . __get__ ( self )","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 689 690 691 692 693 694 695 696 697 698 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . min_att","title":"min_att()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 700 701 702 703 704 705 706 707 708 709 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . max_att","title":"max_att()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\models.py 711 712 713 714 715 716 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . min_att_offset","title":"min_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\models.py 718 719 720 721 722 723 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . max_att_offset","title":"max_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 725 726 727 728 729 730 731 732 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 734 735 736 737 738 739 740 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 742 743 744 745 746 747 748 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return self . __Base . get_wavelength ( self )","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 750 751 752 753 754 755 756 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" return self . __Base . set_wavelength ( self , wavelength )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 758 759 760 761 762 763 764 765 766 767 768 769 770 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" return self . __Base . get_power_value ( self )","title":"get_power_value()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 772 773 774 775 776 777 778 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" return self . __Base . get_power_unit ( self )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 780 781 782 783 784 785 786 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" return self . __Base . set_power_unit ( self , unit )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_pow_cal","text":"Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 788 789 790 791 792 793 794 795 796 797 798 799 800 801 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" return self . __Base . get_pow_cal ( self )","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 803 804 805 806 807 808 809 810 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" return self . __Base . set_pow_cal ( self , value )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 812 813 814 815 816 817 818 819 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" return self . __Base . get_avg_time ( self )","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 821 822 823 824 825 826 827 828 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" return self . __Base . set_avg_time ( self , value )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.ModelN7752A.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 830 831 832 833 834 835 836 837 838 839 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . enable ( en )","title":"enable()"},{"location":"api/models/#pyinst.models.ModelN7752A.disable","text":"Disable the optical output. Source code in pyinst\\models.py 841 842 843 844 845 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.ModelN7752A.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 847 848 849 850 851 852 853 854 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . is_enabled ()","title":"is_enabled()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . get_att ()","title":"get_att()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 874 875 876 877 878 879 880 881 882 883 884 885 886 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . set_att ( att )","title":"set_att()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 888 889 890 891 892 893 894 895 896 897 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . get_att_offset ()","title":"get_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 899 900 901 902 903 904 905 906 907 908 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . set_att_offset ( offset )","title":"set_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7764A","text":"Bases: BaseModelN77xx_VOA_with_OPM Keysight N7764A 4-channel variable optical attenuator with built-in power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 932 933 934 935 936 937 938 939 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super ( ModelN7764A , self ) . __init__ ( resource_name , slot )","title":"ModelN7764A"},{"location":"api/models/#pyinst.models.ModelN7764A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelN7764A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelN7764A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelN7764A.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA","text":"Bases: VisaInstrument , TypeVOA The base class of AQ2200 Series, application type ATTN, without built-in OPM. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 950 951 952 953 954 955 956 957 958 959 960 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , read_termination = '' , ** kwargs ) self . _slot = slot self . _channel = channel","title":"BaseModelAQ2200_VOA"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 962 963 964 965 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 967 968 969 970 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 972 973 974 975 976 977 978 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( Decimal ( wl_str ) * 10 ** 9 ) return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 980 981 982 983 984 985 986 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( Decimal ( wl_str ) * 10 ** 9 ) return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 988 989 990 991 992 993 994 995 996 997 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT? MIN\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"min_att()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT? MAX\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"max_att()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\models.py 1010 1011 1012 1013 1014 1015 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS? MIN\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"min_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\models.py 1017 1018 1019 1020 1021 1022 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS? MAX\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"max_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1024 1025 1026 1027 1028 1029 1030 1031 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1033 1034 1035 1036 1037 1038 1039 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV?\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( Decimal ( wl_str ) * 10 ** 9 ) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f 'Parameter wavelength is out of range: { wavelength !r} ' ) cmd = \":INP {slot:d} :CHAN {channel:d} :WAV {wl:f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} {en:d} \" . format ( slot = self . _slot , channel = self . _channel , en = en ) self . command ( cmd )","title":"enable()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.disable","text":"Disable the optical output. Source code in pyinst\\models.py 1075 1076 1077 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 1079 1080 1081 1082 1083 1084 1085 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} ?\" . format ( slot = self . _slot , channel = self . _channel ) return bool ( int ( self . query ( cmd )))","title":"is_enabled()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT?\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"get_att()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INP {slot:d} :CHAN {channel:d} :ATT {att:.3f} dB\" . format ( slot = self . _slot , channel = self . _channel , att = att ) self . command ( cmd )","title":"set_att()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS?\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"get_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS {offset:.3f} dB\" . format ( slot = self . _slot , channel = self . _channel , offset = offset ) self . command ( cmd )","title":"set_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM","text":"Bases: BaseModelAQ2200_VOA , TypeOPM The base class of AQ2200 Series, application type ATTN, with built-in OPM.","title":"BaseModelAQ2200_VOA_with_OPM"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 1149 1150 1151 1152 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 10.0 # 10ms","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 1154 1155 1156 1157 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 1159 1160 1161 1162 1163 1164 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS? MIN\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 1166 1167 1168 1169 1170 1171 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS? MAX\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot} :CHAN {channel} :POW?\" . format ( slot = self . _slot , channel = self . _channel ) power = float ( self . query ( cmd )) return power","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) unit = OpticalPowerUnit ( unit_int ) return unit","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 1200 1201 1202 1203 1204 1205 1206 1207 1208 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS {value:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :ATIM?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( Decimal ( self . query ( cmd )) * 1000 ) return avg_t","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :ATIM {value:d} MS\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM","text":"Bases: VisaInstrument , TypeOPM Base Model of AQ2200 Series, application type Sensor. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super ( BaseModelAQ2200_OPM , self ) . __init__ ( resource_name , read_termination = '' , ** kwargs ) self . _slot = slot self . _channel = channel","title":"BaseModelAQ2200_OPM"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1272 1273 1274 1275 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1277 1278 1279 1280 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1282 1283 1284 1285 1286 1287 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :CHAN {slot:d} :POW:WAV? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1289 1290 1291 1292 1293 1294 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :CHAN {slot:d} :POW:WAV? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 1296 1297 1298 1299 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.1 # 100us","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 1301 1302 1303 1304 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.avg_time_table","text":"AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. Source code in pyinst\\models.py 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 @property def avg_time_table ( self ) -> tuple : \"\"\" AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. \"\"\" return ( 0.1 , 0.2 , 0.5 , 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 , 500 , 1000 , 2000 , 5000 , 10000 , )","title":"avg_time_table()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 1324 1325 1326 1327 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 180.0","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 1329 1330 1331 1332 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1334 1335 1336 1337 1338 1339 1340 1341 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1343 1344 1345 1346 1347 1348 1349 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1351 1352 1353 1354 1355 1356 1357 1358 1359 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:WAV?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:WAV {wl} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot} :CHAN {channel} :POW?\" . format ( slot = self . _slot , channel = self . _channel ) power = float ( self . query ( cmd )) return power","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 1388 1389 1390 1391 1392 1393 1394 1395 1396 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 1398 1399 1400 1401 1402 1403 1404 1405 1406 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :CORR?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENS {slot:d} :CHAN {channel:d} :CORR {value:.4f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:ATIM?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( Decimal ( self . query ( cmd )) * 1000 ) return avg_t","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) value = round ( value , 1 ) if value in self . avg_time_table : valid_value = value else : l = list ( self . avg_time_table ) l . sort ( key = lambda x : abs ( x - value )) valid_value = l [ 0 ] warnings . warn ( \"Averaging time value {value} not valid. \" \"Fall back to the closest valid value {valid_value} .\" . format ( value = value , valid_value = valid_value ), InstrWarning ) if valid_value < 1 : v = round ( valid_value * 1000 ) u = \"US\" else : v = valid_value u = \"MS\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:ATIM {value:d}{unit} \" . format ( slot = self . _slot , channel = self . _channel , value = v , unit = u ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.ModelAQ2200_215","text":"Bases: BaseModelAQ2200_OPM Yokogawa AQ2200-215 optical power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1498 1499 1500 1501 1502 1503 1504 1505 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"ModelAQ2200_215"},{"location":"api/models/#pyinst.models.ModelAQ2200_215.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAQ2200_215.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAQ2200_215.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelAQ2200_215.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelAQ2200_221","text":"Bases: BaseModelAQ2200_OPM Yokogawa AQ2200-221 2-channel optical power meter.","title":"ModelAQ2200_221"},{"location":"api/models/#pyinst.models.ModelAQ2200_221.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAQ2200_221.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAQ2200_221.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelAQ2200_221.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelAQ2200_221.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 1535 1536 1537 1538 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.2","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.ModelAQ2200_221.avg_time_table","text":"AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. Source code in pyinst\\models.py 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 @property def avg_time_table ( self ) -> tuple : \"\"\" AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. \"\"\" return ( 0.2 , 0.5 , 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 , 500 , 1000 , 2000 , 5000 , 10000 , )","title":"avg_time_table()"},{"location":"api/models/#pyinst.models.ModelAQ2200_311","text":"Bases: BaseModelAQ2200_VOA Yokogawa AQ2200-311 variable optical attenuator. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1582 1583 1584 1585 1586 1587 1588 1589 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"ModelAQ2200_311"},{"location":"api/models/#pyinst.models.ModelAQ2200_311.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAQ2200_311.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAQ2200_311.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelAQ2200_311.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelAQ2200_311A","text":"Bases: BaseModelAQ2200_VOA Yokogawa AQ2200-311A variable optical attenuator. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1615 1616 1617 1618 1619 1620 1621 1622 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"ModelAQ2200_311A"},{"location":"api/models/#pyinst.models.ModelAQ2200_311A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAQ2200_311A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAQ2200_311A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelAQ2200_311A.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelAQ2200_331","text":"Bases: BaseModelAQ2200_VOA_with_OPM Yokogawa AQ2200-331 variable optical attenuator with built-in power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1648 1649 1650 1651 1652 1653 1654 1655 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"ModelAQ2200_331"},{"location":"api/models/#pyinst.models.ModelAQ2200_331.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAQ2200_331.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAQ2200_331.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelAQ2200_331.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelAQ2200_342","text":"Bases: BaseModelAQ2200_VOA_with_OPM Yokogawa AQ2200-342 variable optical attenuator with built-in power meter.","title":"ModelAQ2200_342"},{"location":"api/models/#pyinst.models.ModelAQ2200_342.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAQ2200_342.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAQ2200_342.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelAQ2200_342.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA","text":"Bases: VisaInstrument , TypeVOA Base class of Keysight 815x variable optical attenuators. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , ** kwargs ) self . _slot = slot self . _channel = channel","title":"BaseModel815x_VOA"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1702 1703 1704 1705 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1707 1708 1709 1710 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1712 1713 1714 1715 1716 1717 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1719 1720 1721 1722 1723 1724 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation? MIN\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"min_att()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation? MAX\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"max_att()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\models.py 1748 1749 1750 1751 1752 1753 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet? MIN\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"min_att_offset()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\models.py 1755 1756 1757 1758 1759 1760 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet? MAX\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"max_att_offset()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1762 1763 1764 1765 1766 1767 1768 1769 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1771 1772 1773 1774 1775 1776 1777 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1779 1780 1781 1782 1783 1784 1785 1786 1787 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength {wl:.4f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTPut {slot:d} :CHANnel {channel:d} :STATe {state:d} \" . format ( slot = self . _slot , channel = self . _channel , state = en ) self . command ( cmd )","title":"enable()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.disable","text":"Disable the optical output. Source code in pyinst\\models.py 1812 1813 1814 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 1816 1817 1818 1819 1820 1821 1822 1823 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTPut {slot:d} :CHANnel {channel:d} :STATe?\" . format ( slot = self . _slot , channel = self . _channel ) status = bool ( int ( self . query ( cmd ))) return status","title":"is_enabled()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation?\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"get_att()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation {att:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , att = att ) self . command ( cmd )","title":"set_att()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet?\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"get_att_offset()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet {offset:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , offset = offset ) self . command ( cmd )","title":"set_att_offset()"},{"location":"api/models/#pyinst.models.Model81571A","text":"Bases: BaseModel815x_VOA Keysight 81571A variable optical attenuator plug-in module. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1903 1904 1905 1906 1907 1908 1909 1910 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"Model81571A"},{"location":"api/models/#pyinst.models.Model81571A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.Model81571A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.Model81571A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.Model81571A.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM","text":"Bases: VisaInstrument , TypeOPM Base class of Keysight 816x optical power meters. Note For the Keysight 81635A Dual Power Sensor and Keysight 81619A Dual Optical Head Interface module, channel 1 is the primary channel and channel 2 is the secondary channel. The primary and secondary channels share the same software and hardware triggering system. For some methods, setting parameters for the primary channel sets the parameters for the secondary channel. For these methods, setting for the secondary channel is not allowed. Currently, these methods are: set_avg_time() Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Any Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , ** kwargs ) self . _slot = slot self . _channel = channel","title":"BaseModel816x_OPM"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1943 1944 1945 1946 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1948 1949 1950 1951 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1953 1954 1955 1956 1957 1958 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1960 1961 1962 1963 1964 1965 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 1967 1968 1969 1970 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.1 # 100us","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 1972 1973 1974 1975 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 1977 1978 1979 1980 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 1982 1983 1984 1985 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1987 1988 1989 1990 1991 1992 1993 1994 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1996 1997 1998 1999 2000 2001 2002 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 2004 2005 2006 2007 2008 2009 2010 2011 2012 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength {wl:.4f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETCh {slot:d} :CHANnel {channel:d} :POWer?\" . format ( slot = self . _slot , channel = self . _channel ) value = float ( Decimal ( self . query ( cmd ))) return value","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 2041 2042 2043 2044 2045 2046 2047 2048 2049 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 2051 2052 2053 2054 2055 2056 2057 2058 2059 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :CORRection?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :CORRection {value:.4f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:ATIMe?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( Decimal ( self . query ( cmd )) * 1000 ) return avg_t","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_avg_time","text":"Set the averaging time in ms. Note Can only be sent to primary channel, and secondary channel is also affected. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Note: Can only be sent to primary channel, and secondary channel is also affected. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:ATIMe {value:.4f} \" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.Model81635A","text":"Bases: BaseModel816x_OPM Keysight 81635A optical power meter plug-in module.","title":"Model81635A"},{"location":"api/models/#pyinst.models.Model81635A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.Model81635A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.Model81635A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.Model81635A.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.BaseModelVSA89600","text":"Bases: VisaInstrument The base class of instrument models based on Keysight 89600 VSA software. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required encoding str The encoding of the VISA IO string. 'latin1' **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 def __init__ ( self , resource_name : str , encoding : str = 'latin1' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. encoding: The encoding of the VISA IO string. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , encoding = encoding , ** kwargs ) self . __custom_measurement_demod_filters = { \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" } self . __custom_reference_demod_filters = { \"Rectangular\" , \"RaisedCosine\" , \"RootRaisedCosine\" , \"Gaussian\" , \"HalfSine\" }","title":"BaseModelVSA89600"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.CUSTOM_DEMOD_MEASUREMENT_FILTERS","text":"Options for custom demod measurement filter types. Source code in pyinst\\models.py 2155 2156 2157 2158 @property def CUSTOM_DEMOD_MEASUREMENT_FILTERS ( self ) -> set : \"\"\"Options for custom demod measurement filter types.\"\"\" return self . __custom_measurement_demod_filters","title":"CUSTOM_DEMOD_MEASUREMENT_FILTERS()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.CUSTOM_DEMOD_REFERENCE_FILTERS","text":"Options for custom demod reference filter types. Source code in pyinst\\models.py 2160 2161 2162 2163 @property def CUSTOM_DEMOD_REFERENCE_FILTERS ( self ) -> set : \"\"\"Options for custom demod reference filter types.\"\"\" return self . __custom_reference_demod_filters","title":"CUSTOM_DEMOD_REFERENCE_FILTERS()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.run","text":"Resume or stop the measurement. Parameters: Name Type Description Default _run bool True = Run the measurement. False = Stops the measurement and clears all measurement data. True Source code in pyinst\\models.py 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 def run ( self , _run : bool = True ) -> None : \"\"\"Resume or stop the measurement. Args: _run: `True` = Run the measurement. `False` = Stops the measurement and clears all measurement data. \"\"\" if _run : self . command ( \":INITiate:RESume\" ) else : self . command ( \":INITiate:ABORt\" )","title":"run()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.stop","text":"Stops the measurement and clears all measurement data. Source code in pyinst\\models.py 2177 2178 2179 def stop ( self ) -> None : \"\"\"Stops the measurement and clears all measurement data.\"\"\" self . run ( False )","title":"stop()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.pause","text":"Causes the measurement to transition to the Paused state. Source code in pyinst\\models.py 2181 2182 2183 def pause ( self ) -> None : \"\"\"Causes the measurement to transition to the Paused state.\"\"\" self . command ( \":INITiate:PAUSe\" )","title":"pause()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.restart","text":"Causes the measurement to restart. The Average count is reset to 0 and the measurement transitions to the Running State. Source code in pyinst\\models.py 2185 2186 2187 2188 2189 def restart ( self ) -> None : \"\"\"Causes the measurement to restart. The Average count is reset to 0 and the measurement transitions to the Running State. \"\"\" self . command ( \":INITiate:RESTart\" )","title":"restart()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_data_table_names","text":"Returns a list of all names in the data table for the specified trace. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ str ] A list of all parameter names in the data table. Source code in pyinst\\models.py 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 def get_data_table_names ( self , trace : int ) -> List [ str ]: \"\"\" Returns a list of all names in the data table for the specified trace. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter names in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) name_str = self . query ( \":TRACe {trace:d} :DATA:TABLe:NAME?\" . format ( trace = trace )) name_list = list ( map ( lambda x : x . strip ( '\"' ), name_str . split ( \",\" ))) return name_list","title":"get_data_table_names()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_data_table_values","text":"Gets a list of values from a data table. Enum values are returned as enum indexes ( int type). Numeric values are returned as int or float . Other values are returned as str . Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ int | float | str ] A list of all parameter values in the data table. Source code in pyinst\\models.py 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 def get_data_table_values ( self , trace : int ) -> List [ int | float | str ]: \"\"\"Gets a list of values from a data table. Enum values are returned as enum indexes (`int` type). Numeric values are returned as `int` or `float`. Other values are returned as `str`. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter values in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) value_str = self . query ( \":TRACe {trace:d} :DATA:TABLe?\" . format ( trace = trace )) raw_values = value_str . split ( \",\" ) . strip () values = [] for r_val in raw_values : try : val = int ( r_val ) except ValueError : try : val = float ( r_val ) except : val = r_val values . append ( val ) return values","title":"get_data_table_values()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_data_table_units","text":"Get all the units in the data table of the specified trace. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ str ] A list of all parameter units in the data table. Source code in pyinst\\models.py 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 def get_data_table_units ( self , trace : int ) -> List [ str ]: \"\"\" Get all the units in the data table of the specified trace. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter units in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) unit_str = self . query ( ':TRACe {trace:d} :DATA:TABLe:UNIT?' . format ( trace = trace )) unit_list = list ( map ( lambda x : x . strip ( '\"' ), unit_str . split ( \",\" ))) return unit_list","title":"get_data_table_units()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_data_table","text":"Get formatted data including table item names, values, and units. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description Dict [ str , Tuple [ int | float | str , str ]] A dict represents the data table. The format is: Dict [ str , Tuple [ int | float | str , str ]] name => (value, unit) Source code in pyinst\\models.py 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 def get_data_table ( self , trace : int ) -> Dict [ str , Tuple [ int | float | str , str ]]: \"\"\" Get formatted data including table item names, values, and units. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A dict represents the data table. The format is: name => (value, unit) \"\"\" names = self . get_data_table_names ( trace ) values = self . get_data_table_values ( trace ) units = self . get_data_table_units ( trace ) if len ( names ) == len ( values ) == len ( units ): i_len = len ( names ) else : raise IndexError ( 'Numbers of names, values and units do not match.' ) data = {} for i in range ( i_len ): data [ names [ i ]] = ( values [ i ], units [ i ]) return data","title":"get_data_table()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_measurement_filter","text":"Queries the measurement filter applied during the digital demodulation measurement. Returns: Type Description Literal ['None', 'Rectangular', 'RootRaisedCosine', 'Gaussian', 'LowPass'] The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" Source code in pyinst\\models.py 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 def get_custom_demod_measurement_filter ( self ) -> Literal [ \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" ]: \"\"\"Queries the measurement filter applied during the digital demodulation measurement. Returns: The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" \"\"\" cmd = \":CDEMod:FILTer?\" filter_type = self . query ( cmd ) . strip () . strip ( '\"' ) return filter_type","title":"get_custom_demod_measurement_filter()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_measurement_filter","text":"Sets the measurement filter applied during the digital demodulation measurement. Parameters: Name Type Description Default filter_type Literal ['None', 'Rectangular', 'RootRaisedCosine', 'Gaussian', 'LowPass'] The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" required Source code in pyinst\\models.py 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 def set_custom_demod_measurement_filter ( self , filter_type : Literal [ \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" ]) -> None : \"\"\"Sets the measurement filter applied during the digital demodulation measurement. Args: filter_type: The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" \"\"\" if filter_type not in self . CUSTOM_DEMOD_MEASUREMENT_FILTERS : raise ValueError ( 'Invalid filter_type: {filter!r} ' . format ( filter = filter_type )) cmd = \":CDEMod:FILTer \\\" {filter} \\\" \" . format ( filter = filter_type ) self . command ( cmd )","title":"set_custom_demod_measurement_filter()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_reference_filter","text":"Queries the reference filter applied during the digital demodulation measurement. Returns: Type Description Literal ['Rectangular', 'RaisedCosine', 'RootRaisedCosine', 'Gaussian', 'HalfSine'] The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" Source code in pyinst\\models.py 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 def get_custom_demod_reference_filter ( self ) -> Literal [ \"Rectangular\" , \"RaisedCosine\" , \"RootRaisedCosine\" , \"Gaussian\" , \"HalfSine\" ]: \"\"\"Queries the reference filter applied during the digital demodulation measurement. Returns: The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" \"\"\" cmd = ':CDEMod:FILTer:REFerence?' filter_type = self . query ( cmd ) . strip () . strip ( '\"' ) return filter_type","title":"get_custom_demod_reference_filter()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_reference_filter","text":"Sets the reference filter applied during the digital demodulation measurement. Parameters: Name Type Description Default filter_type str The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" required Source code in pyinst\\models.py 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 def set_custom_demod_reference_filter ( self , filter_type : str ) -> None : \"\"\"Sets the reference filter applied during the digital demodulation measurement. Args: filter_type: The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" \"\"\" if filter_type not in self . CUSTOM_DEMOD_REFERENCE_FILTERS : raise ValueError ( 'Invalid filter_type: {filter!r} ' . format ( filter = filter_type )) cmd = \":CDEMod:FILTer:REFerence \\\" {filter} \\\" \" . format ( filter = filter_type ) self . command ( cmd )","title":"set_custom_demod_reference_filter()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_filter_abt","text":"Queries the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Returns: Type Description float The \u03b1 (alpha) or BT (bandwidth time product) parameter. Source code in pyinst\\models.py 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 def get_custom_demod_filter_abt ( self ) -> float : \"\"\"Queries the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Returns: The \u03b1 (alpha) or BT (bandwidth time product) parameter. \"\"\" cmd = ':CDEMod:FILTer:ABT?' abt = float ( self . query ( cmd )) return abt","title":"get_custom_demod_filter_abt()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_filter_abt","text":"Sets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Parameters: Name Type Description Default abt int | float The \u03b1 (alpha) or BT (bandwidth time product) parameter. required Source code in pyinst\\models.py 2342 2343 2344 2345 2346 2347 2348 2349 2350 def set_custom_demod_filter_abt ( self , abt : int | float ) -> None : \"\"\"Sets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Args: abt: The \u03b1 (alpha) or BT (bandwidth time product) parameter. \"\"\" cmd = ':CDEMod:FILTer:ABT {value:f} ' . format ( value = round ( abt , 6 )) self . command ( cmd )","title":"set_custom_demod_filter_abt()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_equalization_state","text":"Queries a value indicating whether the equalization filter is enabled. Returns: Type Description bool Whether the equalization filter is enabled. Source code in pyinst\\models.py 2352 2353 2354 2355 2356 2357 2358 2359 2360 def get_custom_demod_equalization_state ( self ) -> bool : \"\"\"Queries a value indicating whether the equalization filter is enabled. Returns: Whether the equalization filter is enabled. \"\"\" cmd = ':CDEMod:COMPensate:EQUalize?' state = bool ( int ( self . query ( cmd ))) return state","title":"get_custom_demod_equalization_state()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_equalization_state","text":"Enables or disables the equalization filter. Parameters: Name Type Description Default enable bool True = enable, False = disable required Source code in pyinst\\models.py 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 def set_custom_demod_equalization_state ( self , enable : bool ) -> None : \"\"\" Enables or disables the equalization filter. Args: enable: True = enable, False = disable \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = ':CDEMod:COMPensate:EQUalize {state:d} ' . format ( state = enable ) self . command ( cmd )","title":"set_custom_demod_equalization_state()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_equalization_length","text":"Queries the length of the equalization filter in symbols. Returns: Type Description int The length of the equalization filter in symbols. Source code in pyinst\\models.py 2374 2375 2376 2377 2378 2379 2380 2381 2382 def get_custom_demod_equalization_length ( self ) -> int : \"\"\"Queries the length of the equalization filter in symbols. Returns: The length of the equalization filter in symbols. \"\"\" cmd = ':CDEMod:COMPensate:EQUalize:LENGth?' rpl = self . query ( cmd ) return int ( rpl )","title":"get_custom_demod_equalization_length()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_equalization_length","text":"Sets the length of the equalization filter in symbols. Parameters: Name Type Description Default symbols int The length of the equalization filter in symbols. required Source code in pyinst\\models.py 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 def set_custom_demod_equalization_length ( self , symbols : int ) -> None : \"\"\"Sets the length of the equalization filter in symbols. Args: symbols: The length of the equalization filter in symbols. \"\"\" if not symbols >= 3 : raise ValueError ( 'Parameter symbols should >= 3: {symbols!r} ' . format ( symbols = symbols )) cmd = ':CDEMod:COMPensate:EQUalize:LENGth {value:d} ' . format ( value = symbols ) self . command ( cmd )","title":"set_custom_demod_equalization_length()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_equalization_convergence","text":"Queries the convergence parameter for the Adaptive Equalizer. Returns: Type Description float The equalization convergence parameter. Source code in pyinst\\models.py 2395 2396 2397 2398 2399 2400 2401 2402 def get_custom_demod_equalization_convergence ( self ) -> float : \"\"\"Queries the convergence parameter for the Adaptive Equalizer. Returns: The equalization convergence parameter. \"\"\" cmd = \":CDEMod:COMPensate:EQUalize:CONVergence?\" return float ( self . query ( cmd ))","title":"get_custom_demod_equalization_convergence()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_equalization_convergence","text":"Sets the convergence parameter for the Adaptive Equalizer. Parameters: Name Type Description Default value int | float The equalization convergence parameter. required Source code in pyinst\\models.py 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 def set_custom_demod_equalization_convergence ( self , value : int | float ) -> None : \"\"\"Sets the convergence parameter for the Adaptive Equalizer. Args: value: The equalization convergence parameter. \"\"\" if not 1E-8 <= value <= 1e-6 : raise ValueError ( f 'Invalid value for EQ convergence: { value !r} , must be between 1E-6 and 1E-8.' ) cmd = ':CDEMod:COMPensate:EQUalize:CONVergence {value:.4E} ' . format ( value = value ) self . command ( cmd )","title":"set_custom_demod_equalization_convergence()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_equalizer_run_mode","text":"Queries the run mode of the Adaptive Equalizer. Returns: Type Description Literal ['Run', 'Hold'] The run mode. Options: \"Run\" | \"Hold\". Source code in pyinst\\models.py 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 def get_custom_demod_equalizer_run_mode ( self ) -> Literal [ \"Run\" , \"Hold\" ]: \"\"\" Queries the run mode of the Adaptive Equalizer. Returns: The run mode. Options: \"Run\" | \"Hold\". \"\"\" cmd = ':CDEMod:COMPensate:EQUalize:MODE?' mode = self . query ( cmd ) . strip () . strip ( '\"' ) return mode","title":"get_custom_demod_equalizer_run_mode()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_equalizer_run_mode","text":"Sets the run mode of the Adaptive Equalizer. Parameters: Name Type Description Default mode Literal ['Run', 'Hold'] The run mode. Options: \"Run\" | \"Hold\". required Source code in pyinst\\models.py 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 def set_custom_demod_equalizer_run_mode ( self , mode : Literal [ \"Run\" , \"Hold\" ]) -> None : \"\"\" Sets the run mode of the Adaptive Equalizer. Args: mode: The run mode. Options: \"Run\" | \"Hold\". \"\"\" MODES = { \"Run\" , \"Hold\" } if mode not in MODES : raise ValueError ( 'Invalid value for Custom Demod EQ run mode: {vlaue!r} ' . format ( mode )) cmd = ':CDEMod:COMPensate:EQUalize:MODE {value} ' . format ( value = mode ) self . command ( cmd )","title":"set_custom_demod_equalizer_run_mode()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.reset_custom_demod_equalizer","text":"Reset the custom demod equalizer filter. Source code in pyinst\\models.py 2439 2440 2441 2442 def reset_custom_demod_equalizer ( self ) -> None : \"\"\"Reset the custom demod equalizer filter.\"\"\" cmd = ':CDEMod:COMPensate:EQUalize:RESet' self . command ( cmd )","title":"reset_custom_demod_equalizer()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_result_length","text":"Queries the demodulation measurement result length (in symbols). Returns: Type Description int The result length in symbols. Source code in pyinst\\models.py 2444 2445 2446 2447 2448 2449 2450 2451 2452 def get_custom_demod_result_length ( self ) -> int : \"\"\"Queries the demodulation measurement result length (in symbols). Returns: The result length in symbols. \"\"\" cmd = ':CDEMod:RLENgth?' l = int ( self . query ( cmd )) return l","title":"get_custom_demod_result_length()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_result_length","text":"Sets the demodulation measurement result length (in symbols). Parameters: Name Type Description Default length int The result length in symbols. required Source code in pyinst\\models.py 2454 2455 2456 2457 2458 2459 2460 2461 def set_custom_demod_result_length ( self , length : int ) -> None : \"\"\"Sets the demodulation measurement result length (in symbols). Args: length: The result length in symbols. \"\"\" cmd = ':CDEMod:RLENgth {v:d} ' . format ( v = length ) self . command ( cmd )","title":"set_custom_demod_result_length()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_reference","text":"Queries the reference used for normalization of IQ traces and EVM calculations. Returns: Type Description str The reference type. Possible return values: ConstellationMaximum | ReferenceRms Source code in pyinst\\models.py 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 def get_custom_demod_reference ( self ) -> str : \"\"\"Queries the reference used for normalization of IQ traces and EVM calculations. Returns: The reference type. Possible return values: `ConstellationMaximum` | `ReferenceRms` \"\"\" cmd = f ':CDEMod:COMPensate:NREFerence?' return self . query ( cmd ) . strip ()","title":"get_custom_demod_reference()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_reference","text":"Sets the reference used for normalization of IQ traces and EVM calculations. Parameters: Name Type Description Default ref_type str The reference type. Options: ConstellationMaximum | ReferenceRms required Source code in pyinst\\models.py 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 def set_custom_demod_reference ( self , ref_type : str ) -> None : \"\"\"Sets the reference used for normalization of IQ traces and EVM calculations. Args: ref_type: The reference type. Options: `ConstellationMaximum` | `ReferenceRms` \"\"\" if ref_type not in { \"ConstellationMaximum\" , \"ReferenceRms\" }: raise ValueError ( f \"Invaild ref_type: { ref_type !r} \" ) cmd = f ':CDEMod:COMPensate:NREFerence { ref_type } ' return self . command ( cmd )","title":"set_custom_demod_reference()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA","text":"Bases: BaseModelVSA89600 , TypeOMA Base class for Keysight OMA models based on VSA 89600 software: M8290A N4392A","title":"BaseModelVSA89600_OMA"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA.DEMOD_FORMATS","text":"Valid options for demod format. Source code in pyinst\\models.py 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 @property def DEMOD_FORMATS ( self ): \"\"\"Valid options for demod format.\"\"\" options = ( \"Qam16\" , \"Qam32\" , \"Qam64\" , \"Qam256\" , \"Qpsk\" , \"DifferentialQpsk\" , \"Pi4DifferentialQpsk\" , \"OffsetQpsk\" , \"Bpsk\" , \"Psk8\" , \"Msk\" , \"Msk2\" , \"Fsk2\" , \"Fsk4\" , \"DvbQam16\" , \"DvbQam32\" , \"DvbQam64\" , \"Vsb8\" , \"Vsb16\" , \"Edge\" , \"Fsk8\" , \"Fsk16\" , \"Qam128\" , \"DifferentialPsk8\" , \"Qam512\" , \"Qam1024\" , \"Apsk16\" , \"Apsk16Dvb\" , \"Apsk32\" , \"Apsk32Dvb\" , \"DvbQam128\" , \"DvbQam256\" , \"Pi8DifferentialPsk8\" , \"CpmFM\" , \"Star16Qam\" , \"Star32Qam\" , \"CustomApsk\" , \"ShapedOffsetQpsk\" ) return options","title":"DEMOD_FORMATS()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA.POLARIZATIONS","text":"Valid options for polarization configuration. Source code in pyinst\\models.py 2513 2514 2515 2516 2517 @property def POLARIZATIONS ( self ): \"\"\"Valid options for polarization configuration.\"\"\" options = ( \"Single\" , \"Dual\" , \"Auto\" ) return options","title":"POLARIZATIONS()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" cmd = \":OMA:SMartSEtup:CarrierFrequency:FRErequency?\" freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return freq","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 2530 2531 2532 2533 2534 2535 2536 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" self . smart_setup ( frequency = frequency , pre_set_layout = False )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 2538 2539 2540 2541 2542 2543 2544 2545 2546 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":OMA:SMartSEtup:CarrierFrequency:WaVeLength?\" wl = float ( self . query ( cmd )) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 2548 2549 2550 2551 2552 2553 2554 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" self . smart_setup ( wavelength = wavelength , pre_set_layout = False )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA.smart_setup","text":"Perform smart setup of the OMA. Use parameter execute to choose whether to execute the changed settings or not. If a setting parameter is not explicitly given (default as None), the old setting will be kept. Parameters: Name Type Description Default execute bool Whether to execute smart setup with the new settings. If set to False, the settings of smart setup will be changed, but the OMA will not execute smart setup. True frequency Optional [ int | float ] The carrier frequency in THz. None wavelength Optional [ int | float ] The carrier wavelength in nm. This parameter could not be set if frequency is set. None symbol_rate Optional [ int | float ] The symbol rate in GHz. None fine_tune_symbol_rate Optional [ bool ] Whether the system should try to fine tune the symbol rate. None demodulation_format Optional [ str ] The selected digital demodulation format. Refer to DEMOD_FORMATS for options. None polarization Optional [ str ] The expected polarization or if auto detection should be used. options: \"Single\" | \"Dual\" | \"Auto\" . None pre_set_layout Optional [ bool ] Whether a preset of the trace layout should be performed. None compensate_cd Optional [ bool ] A value indicating whether CD should be compensated. None compensate_pmd Optional [ bool ] A value indicating whether PMD should be compensated. None Source code in pyinst\\models.py 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 def smart_setup ( self , execute : bool = True , * , frequency : Optional [ int | float ] = None , wavelength : Optional [ int | float ] = None , symbol_rate : Optional [ int | float ] = None , fine_tune_symbol_rate : Optional [ bool ] = None , demodulation_format : Optional [ str ] = None , polarization : Optional [ str ] = None , pre_set_layout : Optional [ bool ] = None , compensate_cd : Optional [ bool ] = None , compensate_pmd : Optional [ bool ] = None ): \"\"\"Perform smart setup of the OMA. Use parameter `execute` to choose whether to execute the changed settings or not. If a setting parameter is not explicitly given (default as None), the old setting will be kept. Args: execute: Whether to execute smart setup with the new settings. If set to False, the settings of smart setup will be changed, but the OMA will not execute smart setup. frequency: The carrier frequency in THz. wavelength: The carrier wavelength in nm. This parameter could not be set if frequency is set. symbol_rate: The symbol rate in GHz. fine_tune_symbol_rate: Whether the system should try to fine tune the symbol rate. demodulation_format: The selected digital demodulation format. Refer to `DEMOD_FORMATS` for options. polarization: The expected polarization or if auto detection should be used. options: `\"Single\"` | `\"Dual\"` | `\"Auto\"`. pre_set_layout: Whether a preset of the trace layout should be performed. compensate_cd: A value indicating whether CD should be compensated. compensate_pmd: A value indicating whether PMD should be compensated. \"\"\" if frequency is not None and wavelength is not None : raise ValueError ( 'You could not set both frequency and wavelength at the same time.' ) if frequency is not None : self . command ( ':OMA:SMartSEtup:CarrierFrequency:FRErequency {value:d} ' . format ( value = round ( frequency * 10 ** 12 ))) if wavelength is not None : self . command ( f \":OMA:SMartSEtup:CarrierFrequency:WaVeLength { wavelength : .4f } \" ) if symbol_rate is not None : self . command ( ':OMA:SMartSEtup:SYMBRate {value:d} ' . format ( value = round ( symbol_rate * 10 ** 9 ))) if fine_tune_symbol_rate is not None : if not isinstance ( fine_tune_symbol_rate , bool ): raise TypeError ( f \"Parameter fine_tune_symbol_rate must be a bool, not ' { type ( fine_tune_symbol_rate ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:FINetuneSymbolRate {enable:d} ' . format ( enable = fine_tune_symbol_rate )) if demodulation_format is not None : if demodulation_format not in self . DEMOD_FORMATS : raise ValueError ( 'Invalid modulation demodulation format: {format!r} ' . format ( format = demodulation_format )) self . command ( ':OMA:SMartSEtup:FORMat \" {format} \"' . format ( format = demodulation_format )) if polarization is not None : if not polarization in self . POLARIZATIONS : raise ValueError ( 'Invalid polarization: {pol!r} ' . format ( pol = polarization )) self . command ( ':OMA:SMartSEtup:POLarization \" {pol} \"' . format ( pol = polarization )) if pre_set_layout is not None : if not isinstance ( pre_set_layout , bool ): raise TypeError ( f \"Parameter pre_set_layout must be a bool, not ' { type ( pre_set_layout ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:PREsetLAyout {enable:d} ' . format ( enable = pre_set_layout )) if compensate_cd is not None : if not isinstance ( compensate_cd , bool ): raise TypeError ( f \"Parameter compensate_cd must be a bool, not ' { type ( compensate_cd ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:COmpensateCD {:d} ' . format ( compensate_cd )) if compensate_pmd is not None : if not isinstance ( compensate_pmd , bool ): raise TypeError ( f \"Parameter compensate_pmd must be a bool, not ' { type ( compensate_pmd ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:COmpensatePMD {:d} ' . format ( compensate_pmd )) if execute : self . command ( ':OMA:SMartSEtup:PERformProposedActions' )","title":"smart_setup()"},{"location":"api/models/#pyinst.models.ModelN4392A","text":"Bases: BaseModelVSA89600_OMA N4392A Optical Modulation Analyzer. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 2649 2650 2651 2652 2653 2654 2655 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelN4392A , self ) . __init__ ( resource_name , ** kwargs )","title":"ModelN4392A"},{"location":"api/models/#pyinst.models.ModelN4392A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelN4392A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelN4392A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelN4392A.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 2657 2658 2659 2660 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return 190.95","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelN4392A.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 2662 2663 2664 2665 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return 196.25","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelN4392A.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 2667 2668 2669 2670 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return super () . min_wavelength","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelN4392A.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 2672 2673 2674 2675 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return super () . max_wavelength","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelM8292A","text":"Bases: BaseModelVSA89600_OMA M8292A Optical Modulation Analyzer Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 2692 2693 2694 2695 2696 2697 2698 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelM8292A , self ) . __init__ ( resource_name , ** kwargs )","title":"ModelM8292A"},{"location":"api/models/#pyinst.models.ModelM8292A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelM8292A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelM8292A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelM8292A.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 2700 2701 2702 2703 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return 190.95","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelM8292A.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 2705 2706 2707 2708 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return 196.25","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelM8292A.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 2710 2711 2712 2713 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return super () . min_wavelength","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelM8292A.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 2715 2716 2717 2718 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return super () . max_wavelength","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx","text":"Bases: VisaInstrument , TypeOSA Optical Spectrum Analyzer AQ6360 and AQ6370 series from Yokogawa. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 2751 2752 2753 2754 2755 2756 2757 2758 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( BaseModelAQ63xx , self ) . __init__ ( resource_name , ** kwargs ) self . command ( ':FORMat:DATA ASCii' ) # set data format to ascii","title":"BaseModelAQ63xx"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.ANALYSIS_CATEGORIES","text":"","title":"ANALYSIS_CATEGORIES"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.SWEEP_MODES","text":"","title":"SWEEP_MODES"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.MARKER_NUMBERS","text":"","title":"MARKER_NUMBERS"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.X_SCALES","text":"","title":"X_SCALES"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.WL_UNITS","text":"","title":"WL_UNITS"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 2760 2761 2762 2763 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 2765 2766 2767 2768 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_x_scale","text":"Queries the horizontal scale. Returns: Type Description Literal ['WAV', 'FREQ'] WAV = Wavelength, FREQ = Frequency Source code in pyinst\\models.py 2770 2771 2772 2773 2774 2775 2776 2777 2778 def get_x_scale ( self ) -> Literal [ \"WAV\" , \"FREQ\" ]: \"\"\"Queries the horizontal scale. Returns: `WAV` = Wavelength, `FREQ` = Frequency \"\"\" cmd = \":UNIT:X?\" scale = self . X_SCALES [ int ( self . query ( cmd ))] return scale","title":"get_x_scale()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_x_scale","text":"Sets the horizontal scale. Parameters: Name Type Description Default scale Literal ['WAV', 'FREQ'] WAV = Wavelength, FREQ = Frequency required Source code in pyinst\\models.py 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 def set_x_scale ( self , scale : Literal [ \"WAV\" , \"FREQ\" ]) -> None : \"\"\"Sets the horizontal scale. Args: scale: `WAV` = Wavelength, `FREQ` = Frequency \"\"\" if scale not in self . X_SCALES : raise ValueError ( f \"Invalid value for parameter scale: { scale !r} \" ) cmd = f \":UNIT:X { scale } \" self . command ( cmd )","title":"set_x_scale()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_resolution_bandwidth","text":"Queries the measurement resolution bandwidth. Returns: Type Description float The resolution bandwidth. If x scale is \"WAV\", returns the resolution in nm. If x scale is \"FREQ\", returns the resolution in GHz. Please refer to get_x_scale for more information. Source code in pyinst\\models.py 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 def get_resolution_bandwidth ( self ) -> float : \"\"\"Queries the measurement resolution bandwidth. Returns: The resolution bandwidth. If x scale is \"WAV\", returns the resolution in nm. If x scale is \"FREQ\", returns the resolution in GHz. Please refer to `get_x_scale` for more information. \"\"\" cmd = \":SENSe:BANDwidth?\" if \"WAV\" == self . get_x_scale (): res = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : res = float ( Decimal ( self . query ( cmd )) / 10 ** 9 ) return res","title":"get_resolution_bandwidth()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_resolution_bandwidth","text":"Sets the measurement resolution bandwidth. Note that only particular values could be set. If the setting value is not contained in these values, it will set to the nearest valid value. You can get these values for both x scale via _resolution_table property. Please refer to get_x_scale for more information. Parameters: Name Type Description Default bandwidth int | float The resolution bandwidth. If x scale is \"WAV\", the unit is nm. If x scale is \"FREQ\", the unit is GHz. required Source code in pyinst\\models.py 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 def set_resolution_bandwidth ( self , bandwidth : int | float ) -> None : \"\"\"Sets the measurement resolution bandwidth. Note that only particular values could be set. If the setting value is not contained in these values, it will set to the nearest valid value. You can get these values for both x scale via `_resolution_table` property. Please refer to `get_x_scale` for more information. Args: bandwidth: The resolution bandwidth. If x scale is \"WAV\", the unit is nm. If x scale is \"FREQ\", the unit is GHz. \"\"\" unit = \"NM\" if self . get_x_scale () == \"WAV\" else \"GHZ\" min_bw = self . _resolution_table [ unit ][ 0 ] # first in table max_bw = self . _resolution_table [ unit ][ - 1 ] # last in table if not min_bw <= bandwidth <= max_bw : raise ValueError ( f \"Parameter bandwidth must be in range [ { min_bw } , { max_bw } ], got { bandwidth !r} \" ) cmd = \":SENSe:BANDwidth {bandwidth:.6f}{unit} \" . format ( bandwidth = bandwidth , unit = unit ) self . command ( cmd )","title":"set_resolution_bandwidth()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_center","text":"Sets the measurement center wavelength/frequency. Parameters: Name Type Description Default value int | float The center wavelength in nm or frequency in THz. required unit str NM or THZ . required Source code in pyinst\\models.py 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 def set_center ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the measurement center wavelength/frequency. Args: value: The center wavelength in nm or frequency in THz. unit: `NM` or `THZ`. \"\"\" if unit . upper () not in self . WL_UNITS : raise ValueError ( 'Invalid option for unit: {unit!r} .' . format ( unit = unit )) cmd = \":SENSe:WAVelength:CENTer {value:.4f}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd )","title":"set_center()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 2844 2845 2846 2847 2848 2849 2850 2851 2852 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) self . set_center ( wavelength , 'NM' )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 2854 2855 2856 2857 2858 2859 2860 2861 2862 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f \"Parameter frequency is out of range: { frequency !r} \" ) return self . set_center ( frequency , 'THZ' )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_center","text":"Queries the measurement center wavelength/frequency. Returns: Type Description float The of center frequency/wavelength value. If x scale is \"WAV\", returns the center wavelength in nm. If x scale is \"FREQ\", returns the center frequency in THz. Please refer to get_x_scale for more information. Source code in pyinst\\models.py 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 def get_center ( self ) -> float : \"\"\" Queries the measurement center wavelength/frequency. Returns: The of center frequency/wavelength value. If x scale is \"WAV\", returns the center wavelength in nm. If x scale is \"FREQ\", returns the center frequency in THz. Please refer to `get_x_scale` for more information. \"\"\" cmd = \":SENSe:WAVelength:CENTer?\" if \"WAV\" == self . get_x_scale (): center = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : center = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return center","title":"get_center()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:CENTer?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : wl = super () . get_wavelength () return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:CENTer?\" freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) else : freq = super () . get_frequency () return freq","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_span","text":"Sets the measurement condition measurement span. If the horizontal scale is \"WAV\", the span unit is nm. If the horizontal scale is \"FREQ\", the span unit is GHz. Please refer to get_x_scale for more information. Parameters: Name Type Description Default value int | float The value of measurement span. The unit depends on the horizontal setting. required Source code in pyinst\\models.py 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 def set_span ( self , value : int | float ) -> None : \"\"\"Sets the measurement condition measurement span. If the horizontal scale is \"WAV\", the span unit is nm. If the horizontal scale is \"FREQ\", the span unit is GHz. Please refer to `get_x_scale` for more information. Args: value: The value of measurement span. The unit depends on the horizontal setting. \"\"\" unit = \"NM\" if self . get_x_scale () == \"WAV\" else \"GHZ\" min_span , max_span = self . _x_span_range [ unit ] if not min_span <= value <= max_span : raise ValueError ( f \"Parameter value must be in range [ { min_span } , { max_span } ], got { value !r} \" ) cmd = \":SENSe:WAVelength:SPAN {value:.2f}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd )","title":"set_span()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_span","text":"Queries the measurement condition measurement span in specified unit. If the horizontal scale is \"WAV\", the span unit is nm. If the horizontal scale is \"FREQ\", the span unit is GHz. Please refer to get_x_scale for more information. Returns: Type Description float The value of measurement span. The unit depends on the horizontal setting. Source code in pyinst\\models.py 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 def get_span ( self ) -> float : \"\"\"Queries the measurement condition measurement span in specified unit. If the horizontal scale is \"WAV\", the span unit is nm. If the horizontal scale is \"FREQ\", the span unit is GHz. Please refer to `get_x_scale` for more information. Returns: The value of measurement span. The unit depends on the horizontal setting. \"\"\" cmd = \":SENSe:WAVelength:SPAN?\" if \"WAV\" == self . get_x_scale (): span = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : span = float ( Decimal ( self . query ( cmd )) / 10 ** 9 ) return span","title":"get_span()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_start_wavelength","text":"Queries the measurement start wavelength in nm. Returns: Type Description float The start wavelength in nm. Source code in pyinst\\models.py 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 def get_start_wavelength ( self ) -> float : \"\"\"Queries the measurement start wavelength in nm. Returns: The start wavelength in nm. \"\"\" if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STARt?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : cmd = \":SENSe:WAVelength:STOP?\" wl = LIGHTSPEED / ( float ( self . query ( cmd )) / 10 ** 12 ) return wl","title":"get_start_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_start_wavelength","text":"Sets the measurement start wavelength in nm. Parameters: Name Type Description Default wavelength int | float The start wavelength in nm. required Source code in pyinst\\models.py 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 def set_start_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Sets the measurement start wavelength in nm. Args: wavelength: The start wavelength in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STARt {wl:.6f} NM\" . format ( wl = wavelength ) else : cmd = \":SENSe:WAVelength:STOP {wl:.6f} NM\" . format ( wl = wavelength ) self . command ( cmd )","title":"set_start_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_stop_wavelength","text":"Queries the measurement stop wavelength in nm. Returns: Type Description float The stop wavelength in nm. Source code in pyinst\\models.py 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 def get_stop_wavelength ( self ) -> float : \"\"\"Queries the measurement stop wavelength in nm. Returns: The stop wavelength in nm. \"\"\" if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STOP?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : cmd = \":SENSe:WAVelength:STARt?\" wl = LIGHTSPEED / ( float ( self . query ( cmd )) / 10 ** 12 ) return wl","title":"get_stop_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_stop_wavelength","text":"Sets the measurement stop wavelength in nm. Parameters: Name Type Description Default wavelength int | float The stop wavelength in nm. required Source code in pyinst\\models.py 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 def set_stop_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Sets the measurement stop wavelength in nm. Args: wavelength: The stop wavelength in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) if \"WAV\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STOP {wl:.6f} NM\" . format ( wl = wavelength ) else : cmd = \":SENSe:WAVelength:STARt {wl:.6f} NM\" . format ( wl = wavelength ) self . command ( cmd )","title":"set_stop_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_start_frequency","text":"Queries the measurement start frequency in THz. Returns: Type Description float The start frequency in THz. Source code in pyinst\\models.py 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 def get_start_frequency ( self ) -> float : \"\"\"Queries the measurement start frequency in THz. Returns: The start frequency in THz. \"\"\" if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STARt?\" f = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) else : cmd = \":SENSe:WAVelength:STOP?\" f = LIGHTSPEED / ( float ( self . query ( cmd )) * 10 ** 9 ) return f","title":"get_start_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_start_frequency","text":"Sets the measurement start frequency in THz. Parameters: Name Type Description Default frequency int | float The start frequency in THz. required Source code in pyinst\\models.py 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 def set_start_frequency ( self , frequency : int | float ) -> None : \"\"\"Sets the measurement start frequency in THz. Args: frequency: The start frequency in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f \"Parameter frequency is out of range: { frequency !r} \" ) if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STARt {freq:.6f} THZ\" . format ( freq = frequency ) else : cmd = \":SENSe:WAVelength:STOP {freq:.6f} THZ\" . format ( freq = frequency ) self . command ( cmd )","title":"set_start_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_stop_frequency","text":"Queries the measurement stop frequency in THz. Returns: Type Description float The stop frequency in THz. Source code in pyinst\\models.py 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 def get_stop_frequency ( self ) -> float : \"\"\"Queries the measurement stop frequency in THz. Returns: The stop frequency in THz. \"\"\" if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STOP?\" f = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) else : cmd = \":SENSe:WAVelength:STARt?\" f = LIGHTSPEED / ( float ( self . query ( cmd )) * 10 ** 9 ) return f","title":"get_stop_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_stop_frequency","text":"Sets the measurement stop frequency in THz. Parameters: Name Type Description Default frequency int | float The stop frequency in THz. required Source code in pyinst\\models.py 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 def set_stop_frequency ( self , frequency : int | float ) -> None : \"\"\"Sets the measurement stop frequency in THz. Args: frequency: The stop frequency in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f \"Parameter frequency is out of range: { frequency !r} \" ) if \"FREQ\" == self . get_x_scale (): cmd = \":SENSe:WAVelength:STOP {freq:.6f} THZ\" . format ( freq = frequency ) else : cmd = \":SENSe:WAVelength:STARt {freq:.6f} THZ\" . format ( freq = frequency ) self . command ( cmd )","title":"set_stop_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.sweep","text":"Sets the sweep mode and makes a sweep. For information about the sweep modes, please refer to documentation of the instrument. Parameters: Name Type Description Default mode str Sweep mode. AUTO | REPEAT | SINGLE | STOP . 'REPEAT' Source code in pyinst\\models.py 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 def sweep ( self , mode : str = \"REPEAT\" ) -> None : \"\"\"Sets the sweep mode and makes a sweep. For information about the sweep modes, please refer to documentation of the instrument. Args: mode: Sweep mode. `AUTO` | `REPEAT` | `SINGLE` | `STOP`. \"\"\" if mode not in self . SWEEP_MODES : raise ValueError ( f \"Invalid value for parameter mode: { mode !r} \" ) if mode == \"STOP\" : self . command ( ':ABOR' ) else : self . command ( f ':INIT:SMOD { mode } ;:INIT' )","title":"sweep()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.run","text":"Makes a REPEAT sweep. Source code in pyinst\\models.py 3074 3075 3076 def run ( self ) -> None : \"\"\"Makes a REPEAT sweep.\"\"\" self . command ( ':INIT:SMOD REPEAT;:INIT' )","title":"run()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.stop","text":"Stops sweep. Source code in pyinst\\models.py 3078 3079 3080 def stop ( self ) -> None : \"\"\"Stops sweep.\"\"\" self . command ( ':ABOR' )","title":"stop()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.single","text":"Makes a SINGLE sweep. Source code in pyinst\\models.py 3082 3083 3084 def single ( self ) -> None : \"\"\"Makes a SINGLE sweep.\"\"\" self . command ( ':INIT:SMOD SINGLE;:INIT' )","title":"single()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_sweep_speed","text":"Queries the sweep speed. Returns: Type Description int 0 = Standard speed (1x), int 1 = Twice as fast as standard (2x) Source code in pyinst\\models.py 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 def get_sweep_speed ( self ) -> int : \"\"\" Queries the sweep speed. Returns: 0 = Standard speed (1x), 1 = Twice as fast as standard (2x) \"\"\" cmd = \":SENSE:SWEEP:SPEED?\" return int ( self . query ( cmd ))","title":"get_sweep_speed()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_sweep_speed","text":"Sets the sweep speed. Parameters: Name Type Description Default speed int 0 = Standard speed (1x), 1 = Twice as fast as standard (2x) required Source code in pyinst\\models.py 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 def set_sweep_speed ( self , speed : int ) -> None : \"\"\" Sets the sweep speed. Args: speed: 0 = Standard speed (1x), 1 = Twice as fast as standard (2x) \"\"\" if speed not in { 0 , 1 }: raise ValueError ( \"The value of parameter speed must be 0 or 1\" ) cmd = f \":SENSE:SWEEP:SPEED { speed : d } \" self . command ( cmd )","title":"set_sweep_speed()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_auto_zero","text":"Sets whether to enable the auto zeroing of the level. Parameters: Name Type Description Default enable bool Whether to enable the auto zeroing of the level. required Source code in pyinst\\models.py 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 def set_auto_zero ( self , enable : bool ) -> None : \"\"\"Sets whether to enable the auto zeroing of the level. Args: enable: Whether to enable the auto zeroing of the level. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter status must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = f \":CALibration:ZERO { enable : d } \" self . command ( cmd )","title":"set_auto_zero()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_auto_zero","text":"Queries whether the auto zeroing of the level is enabled. Returns: Type Description bool Whether the auto zeroing is enabled. Source code in pyinst\\models.py 3121 3122 3123 3124 3125 3126 3127 3128 3129 def get_auto_zero ( self ) -> bool : \"\"\"Queries whether the auto zeroing of the level is enabled. Returns: Whether the auto zeroing is enabled. \"\"\" cmd = \":CALibration:ZERO?\" status = bool ( int ( self . query ( cmd ))) return status","title":"get_auto_zero()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.zero_once","text":"Perform zeroing of the level once. Source code in pyinst\\models.py 3131 3132 3133 def zero_once ( self ) -> None : \"\"\"Perform zeroing of the level once.\"\"\" self . command ( \":CALibration:ZERO ONCE\" )","title":"zero_once()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_auto_analysis","text":"Sets whether to enable the automatic analysis function. Parameters: Name Type Description Default enable bool Whether to enable automatic analysis function. required Source code in pyinst\\models.py 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 def set_auto_analysis ( self , enable : bool ) -> None : \"\"\"Sets whether to enable the automatic analysis function. Args: enable: Whether to enable automatic analysis function. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = \":CALCulate:AUTO {enable:d} \" . format ( enable = enable ) self . command ( cmd )","title":"set_auto_analysis()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_auto_analysis","text":"Queries if the automatic analysis function is enabled. Returns: Type Description bool Whether the automatic analysis function is enabled. Source code in pyinst\\models.py 3146 3147 3148 3149 3150 3151 3152 3153 3154 def get_auto_analysis ( self ) -> bool : \"\"\"Queries if the automatic analysis function is enabled. Returns: Whether the automatic analysis function is enabled. \"\"\" cmd = \":CALCulate:AUTO?\" enabled = bool ( int ( self . query ( cmd ))) return enabled","title":"get_auto_analysis()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_analysis_category","text":"Sets the analysis category. Parameters: Name Type Description Default category str The type of analysis. SWTHRESH : Spectrum width analysis (THRESH) DFBLD : DFB-LD parameter analysis SMSR : SMSR analysis WDM : WDM analysis required Source code in pyinst\\models.py 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 def set_analysis_category ( self , category : str ) -> None : \"\"\"Sets the analysis category. Args: category: The type of analysis. - `SWTHRESH`: Spectrum width analysis (THRESH) - `DFBLD`: DFB-LD parameter analysis - `SMSR`: SMSR analysis - `WDM`: WDM analysis \"\"\" if category not in self . ANALYSIS_CATEGORIES : raise ValueError ( 'Invalid option of category: %r ' % category ) cmd = \":CALCulate:CATegory {cat} \" . format ( cat = category ) self . command ( cmd )","title":"set_analysis_category()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_analysis_category","text":"Queries the type of analysis. Returns: Type Description str The type of analysis. SWTHRESH | DFBLD | SMSR | WDM . Please refer to set_analysis_category for detail. Source code in pyinst\\models.py 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 def get_analysis_category ( self ) -> str : \"\"\"Queries the type of analysis. Returns: The type of analysis. `SWTHRESH` | `DFBLD` | `SMSR` | `WDM`. Please refer to `set_analysis_category` for detail. \"\"\" cat_dict = { 0 : \"SWTHRESH\" , 5 : \"DFBLD\" , 8 : \"SMSR\" , 11 : \"WDM\" } cmd = \":CALCulate:CATegory?\" cat = cat_dict [ int ( self . query ( cmd ))] return cat","title":"get_analysis_category()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_wdm_threshold","text":"Set the threshold level of channel detection for the WDM analysis function. The range of the threshold: 0.1 <= threshold <= 99.9 Parameters: Name Type Description Default threshold int | float The threshold level value in dB. required Source code in pyinst\\models.py 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 def set_wdm_threshold ( self , threshold : int | float ) -> None : \"\"\" Set the threshold level of channel detection for the WDM analysis function. The range of the threshold: 0.1 <= threshold <= 99.9 Args: threshold: The threshold level value in dB. \"\"\" if not 0.1 <= threshold <= 99.9 : raise ValueError ( f 'Parameter threshold must be in range [0.1, 99.9], got { threshold !r} ' ) cmd = \":CALCulate:PARameter:WDM:TH {th:.2f} DB\" . format ( th = threshold ) self . command ( cmd )","title":"set_wdm_threshold()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_wdm_threshold","text":"Queries the threshold level of channel detection for the WDM analysis function. Returns: Type Description float The threshold level value in dB. Source code in pyinst\\models.py 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 def get_wdm_threshold ( self ) -> float : \"\"\" Queries the threshold level of channel detection for the WDM analysis function. Returns: The threshold level value in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:TH?\" th = float ( self . query ( cmd )) return th","title":"get_wdm_threshold()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_wdm_mdiff","text":"Sets the peak bottom difference of channel detection for the WDM analysis function. The range of the mdiff: 0.01 <= mdiff <= 50 Parameters: Name Type Description Default mdiff int | float The peak-bottom difference in dB. required Source code in pyinst\\models.py 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 def set_wdm_mdiff ( self , mdiff : int | float ) -> None : \"\"\" Sets the peak bottom difference of channel detection for the WDM analysis function. The range of the mdiff: 0.01 <= mdiff <= 50 Args: mdiff: The peak-bottom difference in dB. \"\"\" if not 0.01 <= mdiff <= 50 : raise ValueError ( f 'Parameter mdiff must be in range [0.01, 50], got { mdiff !r} ' ) cmd = \":CALCulate:PARameter:WDM:MDIFf {mdiff:.2f} DB\" . format ( mdiff = mdiff ) self . command ( cmd )","title":"set_wdm_mdiff()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_wdm_mdiff","text":"Queries the peak bottom difference of channel detection for the WDM analysis function. Returns: Type Description float The peak-bottom difference in dB. Source code in pyinst\\models.py 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 def get_wdm_mdiff ( self ) -> float : \"\"\" Queries the peak bottom difference of channel detection for the WDM analysis function. Returns: The peak-bottom difference in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:MDIFf?\" mdiff = float ( self . query ( cmd )) return mdiff","title":"get_wdm_mdiff()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_wdm_dmask","text":"Sets the channel display mask threshold level for the WDM analysis function. The range of the dmask: -100 <= dmask <= 0. Set dmask to -999 will turn off the display mask. Parameters: Name Type Description Default dmask int | float The channel mask threshold level in dB. required Source code in pyinst\\models.py 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 def set_wdm_dmask ( self , dmask : int | float ) -> None : \"\"\" Sets the channel display mask threshold level for the WDM analysis function. The range of the dmask: -100 <= dmask <= 0. Set dmask to -999 will turn off the display mask. Args: dmask: The channel mask threshold level in dB. \"\"\" if dmask != - 999 and not - 100 <= dmask <= 0 : raise ValueError ( f 'Parameter dmask must be in range [-100, 0], got { dmask !r} ' ) cmd = \":CALCulate:PARameter:WDM:DMASk {dmask:.2f} DB\" . format ( dmask = dmask ) self . command ( cmd )","title":"set_wdm_dmask()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_wdm_dmask","text":"Queries the channel display mask threshold level for the WDM analysis function. If the display mask is turned off, -999.0 will be returned Returns: Type Description float The channel mask threshold level in dB. Source code in pyinst\\models.py 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 def get_wdm_dmask ( self ) -> float : \"\"\" Queries the channel display mask threshold level for the WDM analysis function. If the display mask is turned off, `-999.0` will be returned Returns: The channel mask threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:DMASk?\" dmask = float ( self . query ( cmd )) return dmask","title":"get_wdm_dmask()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_wdm_nalgo","text":"Sets the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: AFIX = AUTO FIX MFIX = MANUAL FIX ACEN = AUTO CENTER MCEN = MANUAL CENTER PIT = PIT Parameters: Name Type Description Default algo str The name of algorithm. Refer to options above. required Source code in pyinst\\models.py 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 def set_wdm_nalgo ( self , algo : str ) -> None : \"\"\" Sets the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `AFIX` = AUTO FIX - `MFIX` = MANUAL FIX - `ACEN` = AUTO CENTER - `MCEN` = MANUAL CENTER - `PIT` = PIT Args: algo: The name of algorithm. Refer to options above. \"\"\" algo_options = [ \"AFIX\" , \"MFIX\" , \"ACEN\" , \"MCEN\" , \"PIT\" ] if algo . upper () not in algo_options : raise ValueError ( \"Invalid value for algo: {value!r} \" . format ( value = algo )) cmd = \":CALCulate:PARameter:WDM:NALGo {algo} \" . format ( algo = algo ) self . command ( cmd )","title":"set_wdm_nalgo()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_wdm_nalgo","text":"Queries the measurement algorithm applied to noise level measurements made by the WDM analysis function. Bug For model AQ6370B, this method can not get a valid reply. This is caused by the corresponding issue of the instrument firmware. This issue still exists even we upgrade the instrument firmware to the latest version R03.04 . Since AQ6370B is out of date, this issue might never be fixed. But set_wdm_nalgo works normally. Other sub-models of AQ6370 (such as AQ6370C, AQ6370D) are not affected. Options of algorithms: AFIX = AUTO FIX MFIX = MANUAL FIX ACEN = AUTO CENTER MCEN = MANUAL CENTER PIT = PIT Returns: Type Description str The name of algorithm. Refer to options above. Source code in pyinst\\models.py 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 def get_wdm_nalgo ( self ) -> str : \"\"\" Queries the measurement algorithm applied to noise level measurements made by the WDM analysis function. Bug: For model AQ6370B, this method can not get a valid reply. This is caused by the corresponding issue of the instrument firmware. This issue still exists even we upgrade the instrument firmware to the latest version `R03.04`. Since AQ6370B is out of date, this issue might never be fixed. But `set_wdm_nalgo` works normally. Other sub-models of AQ6370 (such as AQ6370C, AQ6370D) are not affected. Options of algorithms: - `AFIX` = AUTO FIX - `MFIX` = MANUAL FIX - `ACEN` = AUTO CENTER - `MCEN` = MANUAL CENTER - `PIT` = PIT Returns: The name of algorithm. Refer to options above. \"\"\" algo_options = [ \"AFIX\" , \"MFIX\" , \"ACEN\" , \"MCEN\" , \"PIT\" ] cmd = \":CALCulate:PARameter:WDM:NALGo?\" algo = algo_options [ int ( self . query ( cmd ))] return algo","title":"get_wdm_nalgo()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_wdm_narea","text":"Sets the measuring range applied to noise level measurements made by the WDM analysis function. The range of the narea: 0.01 <= narea <= 10 Parameters: Name Type Description Default narea int | float The range in nm. required Source code in pyinst\\models.py 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 def set_wdm_narea ( self , narea : int | float ) -> None : \"\"\"Sets the measuring range applied to noise level measurements made by the WDM analysis function. The range of the narea: 0.01 <= narea <= 10 Args: narea: The range in nm. \"\"\" if not 0.01 <= narea <= 10 : raise ValueError ( f 'Parameter narea must be in range [0.01, 10], got { narea !r} ' ) cmd = \":CALCulate:PARameter:WDM:NARea {narea:.2f} NM\" . format ( narea = narea ) self . command ( cmd )","title":"set_wdm_narea()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_wdm_narea","text":"Quereis the measuring range applied to noise level measurements made by the WDM analysis function. Returns: Type Description float The range in nm. Source code in pyinst\\models.py 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 def get_wdm_narea ( self ) -> float : \"\"\"Quereis the measuring range applied to noise level measurements made by the WDM analysis function. Returns: The range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NARea?\" narea = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return narea","title":"get_wdm_narea()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_wdm_marea","text":"Sets the mask range during level measurement applied to noise level measurements made by the WDM analysis function. The range of the marea: 0.01 <= marea <= 10 Parameters: Name Type Description Default marea int | float The mask range in nm. required Source code in pyinst\\models.py 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 def set_wdm_marea ( self , marea : int | float ) -> None : \"\"\"Sets the mask range during level measurement applied to noise level measurements made by the WDM analysis function. The range of the marea: 0.01 <= marea <= 10 Args: marea: The mask range in nm. \"\"\" if not 0.01 <= marea <= 10 : raise ValueError ( f 'Parameter marea must be in range [0.01, 10], got { marea !r} ' ) cmd = \":CALCulate:PARameter:WDM:MARea {marea:.2f} NM\" . format ( marea = marea ) self . command ( cmd )","title":"set_wdm_marea()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_wdm_marea","text":"Queries the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Returns: Type Description float The mask range in nm. Source code in pyinst\\models.py 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 def get_wdm_marea ( self ) -> float : \"\"\"Queries the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Returns: The mask range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:MARea?\" marea = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return marea","title":"get_wdm_marea()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_wdm_falgo","text":"Sets the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: LIN = LINEAR GAUS = GAUSS LOR = LORENZ 3RD = 3RD POLY 4TH = 4TH POLY 5TH = 5TH POLY Parameters: Name Type Description Default algo str The name of the algorithm. Refer to options above. required Source code in pyinst\\models.py 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 def set_wdm_falgo ( self , algo : str ) -> None : \"\"\"Sets the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `LIN` = LINEAR - `GAUS` = GAUSS - `LOR` = LORENZ - `3RD` = 3RD POLY - `4TH` = 4TH POLY - `5TH` = 5TH POLY Args: algo: The name of the algorithm. Refer to options above. \"\"\" algo_options = [ \"LIN\" , \"GAUS\" , \"LOR\" , \"3RD\" , \"4TH\" , \"5TH\" ] if algo . upper () not in algo_options : raise ValueError ( \"Invalid value for algo: {value!r} \" . format ( value = algo )) cmd = \":CALCulate:PARameter:WDM:FALGo {algo} \" . format ( algo = algo ) self . command ( cmd )","title":"set_wdm_falgo()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_wdm_falgo","text":"Queries the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: LIN = LINEAR GAUS = GAUSS LOR = LORENZ 3RD = 3RD POLY 4TH = 4YH POLY 5TH = 5TH POLY Returns: Type Description str The name of the algorithm. Refer to options above. Source code in pyinst\\models.py 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 def get_wdm_falgo ( self ) -> str : \"\"\"Queries the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `LIN` = LINEAR - `GAUS` = GAUSS - `LOR` = LORENZ - `3RD` = 3RD POLY - `4TH` = 4YH POLY - `5TH` = 5TH POLY Returns: The name of the algorithm. Refer to options above. \"\"\" algo_options = [ \"LIN\" , \"GAUS\" , \"LOR\" , \"3RD\" , \"4TH\" , \"5TH\" ] cmd = \":CALCulate:PARameter:WDM:FALGo?\" algo = algo_options [ int ( self . query ( cmd ))] return algo","title":"get_wdm_falgo()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_wdm_nbw","text":"Sets the noise bandwidth for the WDM analysis function. The range of the nbw: 0.01 <= nbw <= 1.0 Parameters: Name Type Description Default nbw int | float The noise bandwidth in nm. required Source code in pyinst\\models.py 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 def set_wdm_nbw ( self , nbw : int | float ) -> None : \"\"\"Sets the noise bandwidth for the WDM analysis function. The range of the nbw: 0.01 <= nbw <= 1.0 Args: nbw: The noise bandwidth in nm. \"\"\" if not 0.01 <= nbw <= 1.0 : raise ValueError ( f 'Parameter nbw must be in range [0.01, 1.0], but got { nbw !r} ' ) cmd = \":CALCulate:PARameter:WDM:NBW {nbw:.2f} NM\" . format ( nbw = nbw ) self . command ( cmd )","title":"set_wdm_nbw()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_wdm_nbw","text":"Queries the noise bandwidth for the WDM analysis function. Returns: Type Description float The noise bandwidth in nm. Source code in pyinst\\models.py 3428 3429 3430 3431 3432 3433 3434 3435 3436 def get_wdm_nbw ( self ) -> float : \"\"\"Queries the noise bandwidth for the WDM analysis function. Returns: The noise bandwidth in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NBW?\" nbw = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return nbw","title":"get_wdm_nbw()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_smsr_mask","text":"Set the mask value for the SMSR analysis function. The range of the mask: 0.01 <= mask <= 99.99 Parameters: Name Type Description Default mask int | float The mask value in nm. required Source code in pyinst\\models.py 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 def set_smsr_mask ( self , mask : int | float ) -> None : \"\"\"Set the mask value for the SMSR analysis function. The range of the mask: 0.01 <= mask <= 99.99 Args: mask: The mask value in nm. \"\"\" if not 0 <= mask <= 99.99 : raise ValueError ( f 'Parameter mask must be in range [0.01, 99.99], but got { mask !r} ' ) cmd = \":CALCulate:PARameter:SMSR:MASK {mask:.2f} NM\" . format ( mask = mask ) self . command ( cmd )","title":"set_smsr_mask()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_smsr_mask","text":"Quereis the mask value for the SMSR analysis function. Returns: Type Description None The mask value in nm. Source code in pyinst\\models.py 3451 3452 3453 3454 3455 3456 3457 3458 3459 def get_smsr_mask ( self ) -> None : \"\"\"Quereis the mask value for the SMSR analysis function. Returns: The mask value in nm. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MASK?\" mask = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return mask","title":"get_smsr_mask()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_smsr_mode","text":"Sets the analysis mode for the SMSR analysis function. Note AQ6370B has no SMSR3/SMSR4 mode. Parameters: Name Type Description Default mode str The analysis mode, SMSR1 | SMSR2 | SMSR3 | SMSR4 . required Source code in pyinst\\models.py 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 def set_smsr_mode ( self , mode : str ) -> None : \"\"\"Sets the analysis mode for the SMSR analysis function. Note: AQ6370B has no SMSR3/SMSR4 mode. Args: mode: The analysis mode, `SMSR1`|`SMSR2`|`SMSR3`|`SMSR4`. \"\"\" options = [ \"SMSR1\" , \"SMSR2\" , \"SMSR3\" , \"SMSR4\" ] if mode not in options : raise ValueError ( \"Invalid option for mode: {mode!r} \" . format ( mode = mode )) cmd = \":CALCulate:PARameter:SMSR:MODE {mode} \" . format ( mode = mode ) self . command ( cmd )","title":"set_smsr_mode()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_smsr_mode","text":"Sets the analysis mode for the SMSR analysis function. Returns: Type Description str The analysis mode, SMSR1 | SMSR2 | SMSR3 | SMSR4 . Source code in pyinst\\models.py 3476 3477 3478 3479 3480 3481 3482 3483 3484 def get_smsr_mode ( self ) -> str : \"\"\"Sets the analysis mode for the SMSR analysis function. Returns: The analysis mode, `SMSR1`|`SMSR2`|`SMSR3`|`SMSR4`. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MODE?\" mode = self . query ( cmd ) . strip () return mode","title":"get_smsr_mode()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_dfbld_parameter","text":"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Parameters: Name Type Description Default item str Analytical item that sets parameter(s). required parameter str Parameter to be set. required data str Setting data. required <item> <parameter> <data> SWIDth ALGO ENVelope|THResh|RMS|PKRMs TH <NRf>[DB] TH2 <NRf>[DB] K <NRf> MFIT OFF|ON|0|1 MDIFf <NRf>[DB] SMSR SMODe SMSR1|SMSR2|SMSR3|SMSR4 SMASk <NRf>[M] MDIFf <NRf>[DB] RMS ALGO RMS|PKRMs TH <NRf>[DB] K <NRf> MDIFf <NRf>[DB] POWer SPAN <NRf>[M] OSNR MDIFf <NRf>[DB] NALGo AFIX|MFIX|ACENter|MCENter|PIT|0|1|2|3|4 NARea <NRf>[M] MARea <NRf>[M] FALGo LINear|GAUSs|LORenz|3RD|4TH|5TH|0|1|2|3|4|5 NBW <NRf>[M] SPOWer PEAK|INTegral|0|1 IRANge <NRf> Source code in pyinst\\models.py 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 def set_dfbld_parameter ( self , item : str , parameter : str , data : str ) -> None : \"\"\"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Args: item: Analytical item that sets parameter(s). parameter: Parameter to be set. data: Setting data. |`<item>`|`<parameter>`|`<data>`| |--------|-------------|--------| |SWIDth |ALGO |`ENVelope|THResh|RMS|PKRMs`| | |TH |`<NRf>[DB]`| | |TH2 |`<NRf>[DB]`| | |K |`<NRf>`| | |MFIT |`OFF|ON|0|1`| | |MDIFf |`<NRf>[DB]`| |SMSR |SMODe |`SMSR1|SMSR2|SMSR3|SMSR4`| | |SMASk |`<NRf>[M]`| | |MDIFf |`<NRf>[DB]`| |RMS |ALGO |`RMS|PKRMs`| | |TH |`<NRf>[DB]`| | |K |`<NRf>`| | |MDIFf |`<NRf>[DB]`| |POWer |SPAN |`<NRf>[M]`| |OSNR |MDIFf |`<NRf>[DB]`| | |NALGo |`AFIX|MFIX|ACENter|MCENter|PIT|0|1|2|3|4`| | |NARea |`<NRf>[M]`| | |MARea |`<NRf>[M]`| | |FALGo |`LINear|GAUSs|LORenz|3RD|4TH|5TH|0|1|2|3|4|5`| | |NBW |`<NRf>[M]`| | |SPOWer |`PEAK|INTegral|0|1`| | |IRANge |`<NRf>`| \"\"\" cmd = \":CALCulate:PARameter:DFBLd {item} , {parameter} , {data} \" . format ( item = item , parameter = parameter , data = data ) self . command ( cmd )","title":"set_dfbld_parameter()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_dfbld_parameter","text":"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Parameters: Name Type Description Default item str Analytical item that sets parameter(s). required parameter str Parameter to be set. required Returns: Type Description str A string of the value of parameter. Please refer to set_dfbld_parameter for detail. Source code in pyinst\\models.py 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 3537 3538 3539 def get_dfbld_parameter ( self , item : str , parameter : str ) -> str : \"\"\"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Args: item: Analytical item that sets parameter(s). parameter: Parameter to be set. Returns: A string of the value of parameter. Please refer to `set_dfbld_parameter` for detail. \"\"\" cmd = \":CALCulate:PARameter:DFBLd? {item} , {parameter} \" . format ( item = item , parameter = parameter ) return self . query ( cmd )","title":"get_dfbld_parameter()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_swthresh_k","text":"Sets the magnification of the THRESH method-based spectrum width analysis function. The range of the k: 1.0 <= k <= 10.0 Parameters: Name Type Description Default k int | float The magnification. required Source code in pyinst\\models.py 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 3553 def set_swthresh_k ( self , k : int | float ) -> None : \"\"\"Sets the magnification of the THRESH method-based spectrum width analysis function. The range of the k: 1.0 <= k <= 10.0 Args: k: The magnification. \"\"\" if not 1.0 <= k <= 10.0 : raise ValueError ( f 'Parameter k must be in range [1.0, 10.0], but got { k !r} ' ) cmd = \":CALCulate:PARameter:SWTHResh:K {k:.2f} \" . format ( k = k ) self . command ( cmd )","title":"set_swthresh_k()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_swthresh_k","text":"Sets the magnification of the THRESH method-based spectrum width analysis function. Returns: Type Description float The magnification. Source code in pyinst\\models.py 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 def get_swthresh_k ( self ) -> float : \"\"\"Sets the magnification of the THRESH method-based spectrum width analysis function. Returns: The magnification. \"\"\" cmd = \":CALCulate:PARameter:SWTHResh:K?\" k = float ( self . query ( cmd )) return k","title":"get_swthresh_k()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_swthresh_mfit","text":"Sets whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Parameters: Name Type Description Default en bool Whether to enable the mode fit. required Source code in pyinst\\models.py 3566 3567 3568 3569 3570 3571 3572 3573 3574 3575 3576 def set_swthresh_mfit ( self , en : bool ) -> None : \"\"\"Sets whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Args: en: Whether to enable the mode fit. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":CALCulate:PARameter:SWTHresh:MFIT {en:d} \" . format ( en = en ) self . command ( cmd )","title":"set_swthresh_mfit()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_swthresh_mfit","text":"Queries whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Returns: Type Description bool Whether to enable the mode fit. Source code in pyinst\\models.py 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 def get_swthresh_mfit ( self ) -> bool : \"\"\"Queries whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Returns: Whether to enable the mode fit. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:MFIT?\" en = bool ( int ( self . query ( cmd ))) return en","title":"get_swthresh_mfit()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_swthresh_th","text":"Sets the threshold level of the THRESH method-based spectrum width analysis function. The range of the th: 0.01 <= th <= 50.0 Parameters: Name Type Description Default th int | float The threshold level in dB. required Source code in pyinst\\models.py 3589 3590 3591 3592 3593 3594 3595 3596 3597 3598 3599 3600 3601 def set_swthresh_th ( self , th : int | float ) -> None : \"\"\"Sets the threshold level of the THRESH method-based spectrum width analysis function. The range of the th: 0.01 <= th <= 50.0 Args: th: The threshold level in dB. \"\"\" if not 0.01 <= th <= 50.0 : raise ValueError ( f 'Parameter th must be in range [0.01, 50.0], but got { th !r} ' ) cmd = \":CALCulate:PARameter:SWTHresh:TH {th:.2f} DB\" . format ( th = th ) self . command ( cmd )","title":"set_swthresh_th()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_swthresh_th","text":"Queries the threshold level of the THRESH method-based spectrum width analysis function. Returns: Type Description float The threshold level in dB. Source code in pyinst\\models.py 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 def get_swthresh_th ( self ) -> float : \"\"\"Queries the threshold level of the THRESH method-based spectrum width analysis function. Returns: The threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:TH?\" th = float ( self . query ( cmd )) return th","title":"get_swthresh_th()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_analysis_data","text":"Queries the analysis results from the last time analysis was executed. For the output formats of analysis results, please refer to documents from the instrument vendor. Returns: Type Description str The analysis data. Source code in pyinst\\models.py 3614 3615 3616 3617 3618 3619 3620 3621 3622 3623 3624 def get_analysis_data ( self ) -> str : \"\"\"Queries the analysis results from the last time analysis was executed. For the output formats of analysis results, please refer to documents from the instrument vendor. Returns: The analysis data. \"\"\" return self . query ( ':CALC:DATA?' )","title":"get_analysis_data()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_osnr","text":"Queries the SNR value from the last time WDM analysis was executed. Note that only under WDM analysis category, the return value is valid. Otherwise, 0 is returned. Returns: Type Description float The value of the OSNR in dB. Source code in pyinst\\models.py 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 def get_osnr ( self ) -> float : \"\"\"Queries the SNR value from the last time WDM analysis was executed. Note that only under WDM analysis category, the return value is valid. Otherwise, 0 is returned. Returns: The value of the OSNR in dB. \"\"\" cmd = \":CALCulate:DATA:CSNR?\" osnr = float ( self . query ( cmd ) . split ( \",\" )[ 0 ]) return osnr","title":"get_osnr()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_marker_x_scale","text":"Queries the horizontal scale for the marker values. Note that when the measurement x scale is set, the marker x scale will be set to the same option automatically. So the marker x scale will be consistent with the measurement x scale if it is not set explicitly. Please refer to set_x_scale for more information. Returns: Type Description str The horizontal scale. \"WAV\" | \"FREQ\" . Source code in pyinst\\models.py 3639 3640 3641 3642 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 def get_marker_x_scale ( self ) -> str : \"\"\"Queries the horizontal scale for the marker values. Note that when the measurement x scale is set, the marker x scale will be set to the same option automatically. So the marker x scale will be consistent with the measurement x scale if it is not set explicitly. Please refer to `set_x_scale` for more information. Returns: The horizontal scale. `\"WAV\"` | `\"FREQ\"`. \"\"\" cmd = \":CALCulate:MARKer:UNIT?\" scale = self . X_SCALES [ int ( self . query ( cmd ))] return scale","title":"get_marker_x_scale()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_marker_x_scale","text":"Sets the units of display for the marker values. Note that when the measurement x scale is set, the marker x scale will be set to the same option automatically. So the marker x scale will be consistent with the measurement x scale if it is not set explicitly. Please refer to set_x_scale for more information. Parameters: Name Type Description Default scale str The unit of marker X. \"WAV\" | \"FREQ\" . required Source code in pyinst\\models.py 3654 3655 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 def set_marker_x_scale ( self , scale : str ) -> None : \"\"\"Sets the units of display for the marker values. Note that when the measurement x scale is set, the marker x scale will be set to the same option automatically. So the marker x scale will be consistent with the measurement x scale if it is not set explicitly. Please refer to `set_x_scale` for more information. Args: scale: The unit of marker X. `\"WAV\"` | `\"FREQ\"`. \"\"\" if scale not in self . X_SCALES : raise ValueError ( f \"Invalid value for parameter scale: { scale !r} \" ) cmd = f \":CALCulate:MARKer:UNIT { scale } \" self . command ( cmd )","title":"set_marker_x_scale()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_marker_active_state","text":"Queries the active state of a specified marker. A marker should be set into active state before further operations. Note that you should set the moving marker (marker number 0) active before you set any of the fixed markers active (marker number 1 to 4). Parameters: Name Type Description Default marker int Marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required Returns: Type Description bool True = active, False = inactive. Source code in pyinst\\models.py 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 3685 3686 3687 3688 def get_marker_active_state ( self , marker : int ) -> bool : \"\"\"Queries the active state of a specified marker. A marker should be set into active state before further operations. Note that you should set the moving marker (marker number 0) active before you set any of the fixed markers active (marker number 1 to 4). Args: marker: Marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. Returns: `True` = active, `False` = inactive. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid value for marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:STATe? {marker:d} \" . format ( marker = marker ) state = bool ( int ( self . query ( cmd ))) return state","title":"get_marker_active_state()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_marker_active_state","text":"Set the active state of a specified marker. A marker should be set into active state before further operations. Note that you should set the moving marker (marker number 0) active before you set any of the fixed markers active (marker number 1 to 4). Parameters: Name Type Description Default marker int Marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required state bool True = active, False = inactive. required Source code in pyinst\\models.py 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699 3700 3701 3702 3703 3704 3705 3706 3707 def set_marker_active_state ( self , marker : int , state : bool ) -> None : \"\"\"Set the active state of a specified marker. A marker should be set into active state before further operations. Note that you should set the moving marker (marker number 0) active before you set any of the fixed markers active (marker number 1 to 4). Args: marker: Marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. state: `True` = active, `False` = inactive. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid value for marker: {marker!r} \" . format ( marker = marker )) if not isinstance ( state , bool ): raise TypeError ( f \"Parameter state must be a bool, not ' { type ( state ) . __name__ } '.\" ) cmd = f \":CALCULATE:MARKER:STATE { marker : d } , { state : d } \" self . command ( cmd )","title":"set_marker_active_state()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_marker_x","text":"Places a specified marker in a specified position. Note This method only takes effect when: A measurement sweep must be performed. The sweep should be completed and stoped. Parameters: Name Type Description Default marker int The marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required x int | float The X value of the specified marker. The unit depends on the current setting of marker x scale. If the marker x scale is \"WAV\", returns the x value in nm. If marker x scale is \"FREQ\", returns the x value in THz. Please refer to get_marker_x_scale for information. required Source code in pyinst\\models.py 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 3731 3732 def set_marker_x ( self , marker : int , x : int | float ) -> None : \"\"\"Places a specified marker in a specified position. Note: This method only takes effect when: 1. A measurement sweep must be performed. 2. The sweep should be completed and stoped. Args: marker: The marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. x: The X value of the specified marker. The unit depends on the current setting of marker x scale. If the marker x scale is \"WAV\", returns the x value in nm. If marker x scale is \"FREQ\", returns the x value in THz. Please refer to `get_marker_x_scale` for information. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) unit = \"NM\" if self . get_marker_x_scale () == \"WAV\" else \"THZ\" cmd = \":CALCulate:MARKer:X {marker:d} , {x:.6f}{unit} \" . format ( marker = marker , x = x , unit = unit ) self . command ( cmd )","title":"set_marker_x()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_marker_x","text":"Queries the X value of the specified marker. Parameters: Name Type Description Default marker int The marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required Returns: Type Description float The X value of the specified marker. The unit depends on the current setting of marker x scale. If the marker x scale is \"WAV\", returns the x value in nm. If marker x scale is \"FREQ\", returns the x value in THz. Please refer to get_marker_x_scale for information. Source code in pyinst\\models.py 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 def get_marker_x ( self , marker : int ) -> float : \"\"\"Queries the X value of the specified marker. Args: marker: The marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. Returns: The X value of the specified marker. The unit depends on the current setting of marker x scale. If the marker x scale is \"WAV\", returns the x value in nm. If marker x scale is \"FREQ\", returns the x value in THz. Please refer to `get_marker_x_scale` for information. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:X? {marker:d} \" . format ( marker = marker ) if \"WAV\" == self . get_marker_x_scale (): x = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) else : x = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return x","title":"get_marker_x()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_marker_y","text":"Queries the Y value of the specified marker. This unit of the marker level to be queried is dependent on the Y-axis unit of the active trace. Parameters: Name Type Description Default marker int The marker number. 0 | 1 | 2 | 3 | 4 . 0 represents to the moving marker. required Returns: Type Description float The y value of the marker. Source code in pyinst\\models.py 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 def get_marker_y ( self , marker : int ) -> float : \"\"\"Queries the Y value of the specified marker. This unit of the marker level to be queried is dependent on the Y-axis unit of the active trace. Args: marker: The marker number. `0` | `1` | `2` | `3` | `4`. `0` represents to the moving marker. Returns: The y value of the marker. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:Y? {marker:d} \" . format ( marker = marker ) y = float ( self . query ( cmd )) return y","title":"get_marker_y()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_y_scale_mode","text":"Sets the scale mode of the main scale of the level axis. Parameters: Name Type Description Default mode str The scale mode of level axis. \"LOG\" = Logarighmic, \"LIN\" = Linear. required Source code in pyinst\\models.py 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 def set_y_scale_mode ( self , mode : str ) -> None : \"\"\"Sets the scale mode of the main scale of the level axis. Args: mode: The scale mode of level axis. `\"LOG\"` = Logarighmic, `\"LIN\"` = Linear. \"\"\" if mode not in ( \"LOG\" , \"LIN\" ): raise ValueError ( \"Invalid mode: {mode!r} \" . format ( mode = mode )) cmd = \":DISPlay:TRACe:Y1:SPACing {mode} \" . format ( mode = mode ) self . command ( cmd )","title":"set_y_scale_mode()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_y_scale_mode","text":"Queries the scale mode of the main scale of the level axis. Returns: Name Type Description mode str The scale mode of level axis. \"LOG\" = Logarighmic, \"LIN\" = Linear. Source code in pyinst\\models.py 3789 3790 3791 3792 3793 3794 3795 3796 3797 3798 def get_y_scale_mode ( self ) -> str : \"\"\"Queries the scale mode of the main scale of the level axis. Returns: mode: The scale mode of level axis. `\"LOG\"` = Logarighmic, `\"LIN\"` = Linear. \"\"\" cmd = \":DISPlay:TRACe:Y1:SPACing?\" mode = [ \"LOG\" , \"LIN\" ][ int ( self . query ( cmd ))] return mode","title":"get_y_scale_mode()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_peak_to_center","text":"Detects the peak wavelength and sets it as the measurement center waveform. Source code in pyinst\\models.py 3800 3801 3802 3803 3804 3805 def set_peak_to_center ( self ) -> None : \"\"\"Detects the peak wavelength and sets it as the measurement center waveform. \"\"\" cmd = \":CALCulate:MARKer:MAXimum:SCENter\" self . command ( cmd )","title":"set_peak_to_center()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_ref_level","text":"Sets the reference level of the main scale of the level axis. Parameters: Name Type Description Default value int | float The value of the ref level. required unit str The unit of the ref level. \"DBM\" | \"W\" | \"MW\" . required Source code in pyinst\\models.py 3807 3808 3809 3810 3811 3812 3813 3814 3815 3816 3817 def set_ref_level ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the reference level of the main scale of the level axis. Args: value: The value of the ref level. unit: The unit of the ref level. `\"DBM\"` | `\"W\"` | `\"MW\"`. \"\"\" if unit not in [ 'DBM' , 'W' , 'MW' ]: raise ValueError ( 'Invalid unit: {unit!r} ' . format ( unit = unit )) cmd = \":DISPlay:TRACe:Y1:RLEVel {value:.6E}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd )","title":"set_ref_level()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_ref_level","text":"Sets/queries the reference level of the main scale of the level axis. Returns: Type Description float The value of the ref level in unit dBm or W depends on the Y scale mode. Please refer to get_y_scale_mode for information. Source code in pyinst\\models.py 3819 3820 3821 3822 3823 3824 3825 3826 3827 3828 3829 def get_ref_level ( self ) -> float : \"\"\"Sets/queries the reference level of the main scale of the level axis. Returns: The value of the ref level in unit dBm or W depends on the Y scale mode. Please refer to `get_y_scale_mode` for information. \"\"\" cmd = \":DISPlay:TRACe:Y1:RLEVel?\" level = float ( self . query ( cmd )) return level","title":"get_ref_level()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_peak_to_ref","text":"Detects the peak level and sets it for the reference level. Source code in pyinst\\models.py 3831 3832 3833 3834 def set_peak_to_ref ( self ) -> None : \"\"\"Detects the peak level and sets it for the reference level.\"\"\" cmd = \":CALCulate:MARKer:MAXimum:SRLevel\" self . command ( cmd )","title":"set_peak_to_ref()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_auto_ref_level","text":"Sets ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Parameters: Name Type Description Default enable bool Whether to enable auto ref level. required Source code in pyinst\\models.py 3836 3837 3838 3839 3840 3841 3842 3843 3844 3845 3846 def set_auto_ref_level ( self , enable : bool ) -> None : \"\"\"Sets ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Args: enable: Whether to enable auto ref level. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = \":CALCulate:MARKer:MAXimum:SRLevel:AUTO {enable:d} \" . format ( enable = enable ) self . command ( cmd )","title":"set_auto_ref_level()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_auto_ref_level","text":"Queries ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Returns: Type Description bool If this function is enabled. Source code in pyinst\\models.py 3848 3849 3850 3851 3852 3853 3854 3855 3856 3857 def get_auto_ref_level ( self ) -> bool : \"\"\"Queries ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Returns: If this function is enabled. \"\"\" cmd = \":CALCulate:MARKer:MAXimum:SRLevel:AUTO?\" enabled = bool ( int ( self . query ( cmd ))) return enabled","title":"get_auto_ref_level()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.clear_all_markers","text":"Clears all markers. Source code in pyinst\\models.py 3859 3860 3861 def clear_all_markers ( self ) -> None : \"\"\"Clears all markers.\"\"\" self . command ( ':CALCulate:MARKer:AOFF' )","title":"clear_all_markers()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_active_trace","text":"Sets the active trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Source code in pyinst\\models.py 3863 3864 3865 3866 3867 3868 3869 3870 3871 3872 def set_active_trace ( self , trace_name : str ) -> None : \"\"\"Sets the active trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:ACTive {trace_name} ' . format ( trace_name = trace_name ) self . command ( cmd )","title":"set_active_trace()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_active_trace","text":"Queries the active trace. Returns: Type Description str The trace name, TRA | TRB | TRC | TRD | TRE | TRF | TRG . Source code in pyinst\\models.py 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 def get_active_trace ( self ) -> str : \"\"\"Queries the active trace. Returns: The trace name, `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG`. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:ACTive?' trace_name = self . query ( cmd ) . strip () return trace_name","title":"get_active_trace()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_trace_attribute","text":"Sets the attributes of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required attribute str WRIT | FIX | MAX | MIN | RAVG | CALC required Source code in pyinst\\models.py 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 3896 3897 3898 def set_trace_attribute ( self , trace_name : str , attribute : str ) -> None : \"\"\"Sets the attributes of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` attribute: `WRIT` | `FIX` | `MAX` | `MIN` | `RAVG` | `CALC` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) if attribute not in [ 'WRIT' , 'FIX' , 'MAX' , 'MIN' , 'RAVG' , 'CALC' ]: raise ValueError ( 'Invalid attribute: {attr!r} ' . format ( attr = attribute )) cmd = ':TRACe:ATTRibute: {trace} {attribute} ' . format ( trace = trace_name , attribute = attribute ) self . command ( cmd )","title":"set_trace_attribute()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_trace_attribute","text":"Queries the attributes of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Name Type Description attribute str WRIT | FIX | MAX | MIN | RAVG | CALC Source code in pyinst\\models.py 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 def get_trace_attribute ( self , trace_name : str ) -> str : \"\"\"Queries the attributes of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: attribute: `WRIT` | `FIX` | `MAX` | `MIN` | `RAVG` | `CALC` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:ATTRibute: {trace} ?' . format ( trace = trace_name ) ATTRS = [ 'WRIT' , 'FIX' , 'MAX' , 'MIN' , 'RAVG' , 'CALC' ] attr = ATTRS [ int ( self . query ( cmd ))] return attr","title":"get_trace_attribute()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.set_trace_display_status","text":"Sets the display status of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required display bool Whether to display the trace. required Source code in pyinst\\models.py 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 3928 def set_trace_display_status ( self , trace_name : str , display : bool ) -> None : \"\"\"Sets the display status of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` display: Whether to display the trace. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) if not isinstance ( display , bool ): raise TypeError ( f \"Parameter display must be a bool, not ' { type ( display ) . __name__ } '.\" ) cmd = ':TRACe:STATe: {trace_name} {display:d} ' . format ( trace_name = trace_name , display = display ) self . command ( cmd )","title":"set_trace_display_status()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_trace_display_status","text":"Queries the display status of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description bool Whether the trace is displayed. Source code in pyinst\\models.py 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 def get_trace_display_status ( self , trace_name : str ) -> bool : \"\"\"Queries the display status of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: Whether the trace is displayed. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:STATe: {trace_name} ?' . format ( trace_name = trace_name ) displayed = bool ( int ( self . query ( cmd ))) return displayed","title":"get_trace_display_status()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.clear_trace","text":"Deletes the data of a specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Source code in pyinst\\models.py 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 def clear_trace ( self , trace_name : str ) -> None : \"\"\"Deletes the data of a specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:DELete {trace_name} ' . format ( trace_name = trace_name ) self . command ( cmd )","title":"clear_trace()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.clear_all_traces","text":"Clears the data for all traces. Source code in pyinst\\models.py 3956 3957 3958 def clear_all_traces ( self ) -> None : \"\"\"Clears the data for all traces. \"\"\" self . command ( ':TRACe:DELete:ALL' )","title":"clear_all_traces()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_trace_data_x","text":"Queries the wavelength axis data of the specified trace. Data is output in the unit of wavelength value (nm), regardless of whether this unit is in the wavelength mode or in the frequency mode. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description List [ float ] A list of the x axis data in nm. Source code in pyinst\\models.py 3960 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 3975 3976 def get_trace_data_x ( self , trace_name : str ) -> List [ float ]: \"\"\"Queries the wavelength axis data of the specified trace. Data is output in the unit of wavelength value (nm), regardless of whether this unit is in the wavelength mode or in the frequency mode. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: A list of the x axis data in nm. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = f ':TRACe:DATA:X? { trace_name } ' result = [ float ( i ) * 10 ** 9 for i in self . query ( cmd ) . split ( ',' )] return result","title":"get_trace_data_x()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.get_trace_data_y","text":"Queries the level axis data of specified trace. The data is output in order of its wavelength from the shortest level to the longest, irrespective of the wavelength/frequency mode. When the level scale is LOG, data is output in LOG values. When the level scale is Linear, data is output in linear values. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description List [ float ] A list of the y axis data in nm. Source code in pyinst\\models.py 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 def get_trace_data_y ( self , trace_name : str ) -> List [ float ]: \"\"\"Queries the level axis data of specified trace. The data is output in order of its wavelength from the shortest level to the longest, irrespective of the wavelength/frequency mode. When the level scale is LOG, data is output in LOG values. When the level scale is Linear, data is output in linear values. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: A list of the y axis data in nm. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = f ':TRACe:DATA:Y? { trace_name } ' result = [ float ( i ) for i in self . query ( cmd ) . split ( ',' )] return result","title":"get_trace_data_y()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.capture_screen","text":"Capture the screen and returns the BMP iamge data as bytes. Returns: Type Description bytes The image data of the screen capture. Source code in pyinst\\models.py 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 def capture_screen ( self ) -> bytes : \"\"\"Capture the screen and returns the BMP iamge data as bytes. Returns: The image data of the screen capture. \"\"\" # create a unique name with nearly no chance to conflict temp_filename = 'tmp- {timestamp:X} ' . format ( timestamp = int ( time . time () * 10 ** 6 )) # save image to internal memory self . command ( ':MMEMORY:STORE:GRAPHICS COLOR,BMP,\" {filename} \",INTERNAL' . format ( filename = temp_filename )) self . opc bin_data = self . query_binary_values ( ':MMEMORY:DATA? \" {filename} .BMP\",internal' . format ( filename = temp_filename ), datatype = 'B' ) bytes_data = bytes ( bin_data ) # delete temp file from internal memory self . command ( ':MMEMORY:DELETE \" {filename} .BMP\",internal' . format ( filename = temp_filename )) return bytes_data","title":"capture_screen()"},{"location":"api/models/#pyinst.models.BaseModelAQ63xx.save_screen","text":"Capture the screen and save as a .bmp file. Bug For model AQ6360, this method takes rather long time (about 60 sec) to return. We are contacting with Yokogawa to see if this issue could be solved. Parameters: Name Type Description Default file_path str The file path to save the screen capture. required Source code in pyinst\\models.py 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027 4028 4029 4030 4031 4032 def save_screen ( self , file_path : str ) -> None : \"\"\"Capture the screen and save as a .bmp file. Bug: For model AQ6360, this method takes rather long time (about 60 sec) to return. We are contacting with Yokogawa to see if this issue could be solved. Args: file_path: The file path to save the screen capture. \"\"\" data = self . capture_screen () if os . path . exists ( file_path ): raise PermissionError ( 'The file path {path} already exists.' . format ( path = file_path )) with open ( file_path , 'wb' ) as f : f . write ( data )","title":"save_screen()"},{"location":"api/models/#pyinst.models.ModelAQ6360","text":"Bases: BaseModelAQ63xx Optical Spectrum Analyzer AQ6360 series from Yokogawa.","title":"ModelAQ6360"},{"location":"api/models/#pyinst.models.ModelAQ6360.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAQ6360.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAQ6360.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelAQ6360.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 4058 4059 4060 4061 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 700.0","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelAQ6360.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 4063 4064 4065 4066 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1650.0","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelAQ6370","text":"Bases: BaseModelAQ63xx Optical Spectrum Analyzer AQ6370 series from Yokogawa, including AQ6370, AQ6370B, AQ6370C, AQ6370D, etc.","title":"ModelAQ6370"},{"location":"api/models/#pyinst.models.ModelAQ6370.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAQ6370.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAQ6370.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelAQ6370.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 4092 4093 4094 4095 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 600.0","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelAQ6370.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 4097 4098 4099 4100 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1700.0","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelAQ6150","text":"Bases: VisaInstrument , TypeWM Source code in pyinst\\models.py 4111 4112 def __init__ ( self , resource_name , ** kwargs : Any ): super ( ModelAQ6150 , self ) . __init__ ( resource_name , ** kwargs )","title":"ModelAQ6150"},{"location":"api/models/#pyinst.models.ModelAQ6150.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAQ6150.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAQ6150.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelAQ6150.run","text":"Executes (stops) repeat measurement. Parameters: Name Type Description Default state bool True = Execute, False = Stop. True Source code in pyinst\\models.py 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 def run ( self , state : bool = True ) -> None : \"\"\" Executes (stops) repeat measurement. Args: state: `True` = Execute, `False` = Stop. \"\"\" if not isinstance ( state , bool ): raise TypeError ( f \"Parameter state must be a bool, not ' { type ( state ) . __name__ } '.\" ) cmd = ':INITiate:CONTinuous {state:d} ' . format ( state = state ) self . command ( cmd )","title":"run()"},{"location":"api/models/#pyinst.models.ModelAQ6150.single","text":"Executes a single measurement. Source code in pyinst\\models.py 4126 4127 4128 4129 def single ( self ) -> None : \"\"\"Executes a single measurement.\"\"\" cmd = ':INITiate' self . command ( cmd )","title":"single()"},{"location":"api/models/#pyinst.models.ModelAQ6150.stop","text":"Stops repeat measurement. Source code in pyinst\\models.py 4131 4132 4133 4134 4135 def stop ( self ) -> None : \"\"\" Stops repeat measurement. \"\"\" self . run ( False )","title":"stop()"},{"location":"api/models/#pyinst.models.ModelAQ6150.is_running","text":"Queries the repeat measurement state. Returns: Type Description bool True = Execute, False = Stop. Source code in pyinst\\models.py 4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 def is_running ( self ) -> bool : \"\"\" Queries the repeat measurement state. Returns: `True` = Execute, `False` = Stop. \"\"\" cmd = ':INITiate:CONTinuous?' state = bool ( int ( self . query ( cmd ))) return state","title":"is_running()"},{"location":"api/models/#pyinst.models.ModelAQ6150.measure_frequency","text":"Performs a single measurement and queries the peak frequency in single view mode with a single measurement. Returns: Type Description float The peak frequency in THz. Source code in pyinst\\models.py 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 def measure_frequency ( self ) -> float : \"\"\"Performs a single measurement and queries the peak frequency in single view mode with a single measurement. Returns: The peak frequency in THz. \"\"\" cmd = \":MEASure:POWer:FREQuency?\" freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) if freq == 0 : raise ValueError ( 'No optical input signal.' ) return freq","title":"measure_frequency()"},{"location":"api/models/#pyinst.models.ModelAQ6150.measure_wavelength","text":"Performs a single measurement and queries the peak wavelength in single view mode in single measurement. Returns: Type Description float The peak wavelength in nm. Source code in pyinst\\models.py 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 def measure_wavelength ( self ) -> float : \"\"\"Performs a single measurement and queries the peak wavelength in single view mode in single measurement. Returns: The peak wavelength in nm. \"\"\" cmd = \":MEASure:POWer:WAVelength?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) if wl == 0 : raise ValueError ( 'No optical input signal.' ) return wl","title":"measure_wavelength()"},{"location":"api/models/#pyinst.models.ModelAQ6150.get_frequency","text":"Queries the peak frequency in single view mode with a single measurement. Returns: Type Description float The peak frequency in THz. Source code in pyinst\\models.py 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 def get_frequency ( self ) -> float : \"\"\"Queries the peak frequency in single view mode with a single measurement. Returns: The peak frequency in THz. \"\"\" cmd = \":FETCh:POWer:FREQuency?\" freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) if freq == 0 : raise ValueError ( 'No optical input signal.' ) return freq","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelAQ6150.get_wavelength","text":"Queries the peak wavelength in single view mode in single measurement. Returns: Type Description float The peak wavelength in nm. Source code in pyinst\\models.py 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 def get_wavelength ( self ) -> float : \"\"\"Queries the peak wavelength in single view mode in single measurement. Returns: The peak wavelength in nm. \"\"\" cmd = \":FETCh:POWer:WAVelength?\" wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) if wl == 0 : raise ValueError ( 'No optical input signal.' ) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld","text":"Bases: BaseInstrument , TypeTS The base class for old chamber models by Espec: MC-711 MT3065 Note In order to communicate, corresponding configurations must be made on the chamber. Device ID: Correspond with the dev_id in the __init__ method. Defaults to 0. Parameters: Name Type Description Default resource_name str The serial port name. required dev_id int The device ID of the chamber. 0 baudrate int Baud rate such as 9600 or 115200 etc.. 19200 read_timeout int | float Timeout in milliseconds for read operations. 0.5 **kwargs Any Directly passed to serial.Serial() . {} Source code in pyinst\\models.py 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 def __init__ ( self , resource_name : str , dev_id : int = 0 , baudrate : int = 19200 , read_timeout : int | float = 0.5 , ** kwargs : Any ): \"\"\" Args: resource_name: The serial port name. dev_id: The device ID of the chamber. baudrate: Baud rate such as 9600 or 115200 etc.. read_timeout: Timeout in milliseconds for read operations. **kwargs: Directly passed to `serial.Serial()`. \"\"\" super ( BaseModelEspecOld , self ) . __init__ ( resource_name ) if dev_id not in range ( 16 ): raise ValueError ( 'Device ID must be between 0 and 15' ) self . __dev_id = dev_id self . __serial = serial . Serial ( port = resource_name , baudrate = baudrate , timeout = read_timeout , ** kwargs ) self . __serial . setRTS () self . __serial . setDTR () self . __serial . reset_input_buffer () self . __resource_name = resource_name self . _check_communication ()","title":"BaseModelEspecOld"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.resource_name","text":"The serial port name. Source code in pyinst\\models.py 4238 4239 4240 4241 @property def resource_name ( self ) -> str : \"\"\"The serial port name.\"\"\" return self . __resource_name","title":"resource_name()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.ts_type","text":"The temperature source type. Source code in pyinst\\models.py 4243 4244 4245 4246 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The temperature source type.\"\"\" return TemperatureSourceType . CHAMBER","title":"ts_type()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.close","text":"Close the chamber connection and release the instrument resource. Source code in pyinst\\models.py 4248 4249 4250 def close ( self ) -> None : \"\"\"Close the chamber connection and release the instrument resource.\"\"\" self . __serial . close ()","title":"close()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.command","text":"Source code in pyinst\\models.py 4261 4262 4263 4264 4265 4266 def command ( self , cmd : str ) -> None : self . _write ( cmd ) # Read reply r = self . __serial . read ( 5 ) if r != b ' \\x06 00FF' : raise ValueError ( f 'Unexpected reply from the chamber: { r !r} ' )","title":"command()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.query","text":"Source code in pyinst\\models.py 4268 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 def query ( self , cmd : str ) -> str : self . _write ( cmd ) # Read reply PREFIX = b ' \\x02 ' TERMINATOR = b ' \\x03 ' r = self . __serial . read ( 1 ) if r != PREFIX : raise ValueError ( f 'Unexpected reply from the chamber: { r !r} ' ) dev_id = int ( self . __serial . read ( 2 ) . decode (), 16 ) if dev_id != self . __dev_id : raise ValueError ( f 'Device ID mismatch: expected= { self . __dev_id !r} , reply= { dev_id !r} ' ) r = self . __serial . read ( 2 ) data = b '' while True : r = self . __serial . read ( 1 ) if r == TERMINATOR : checksum_bytes = self . __serial . read ( 2 ) checksum = int ( checksum_bytes . decode (), 16 ) break else : data += r reply_body = f ' { dev_id : 02X } ' . encode () + b 'FF' + data + TERMINATOR full_reply = PREFIX + reply_body + checksum_bytes if sum ( reply_body ) & 0xFF != checksum : raise ValueError ( f 'Invalid checksum of reply: { full_reply } ' ) return data . decode ()","title":"query()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.run","text":"Run the chamber in selected mode and params, or stops the chamber. Parameters: Name Type Description Default mode ChamberOperatingMode The operating mode to run the chamber. ChamberOperatingMode.CONSTANT p_num Optional [ int ] The program number. Integers from 0 to 39. None step_num Optional [ int ] The step number to start the program running. Integers from 0. None Source code in pyinst\\models.py 4301 4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 4318 4319 4320 4321 4322 4323 4324 4325 def run ( self , mode : ChamberOperatingMode = ChamberOperatingMode . CONSTANT , p_num : Optional [ int ] = None , step_num : Optional [ int ] = None , ): \"\"\"Run the chamber in selected mode and params, or stops the chamber. Args: mode: The operating mode to run the chamber. p_num: The program number. Integers from 0 to 39. step_num: The step number to start the program running. Integers from 0. \"\"\" if mode == ChamberOperatingMode . OFF : self . command ( 'FFWW0D110601000A' ) else : if mode == ChamberOperatingMode . PROGRAM : if not 0 <= p_num <= 39 : raise ValueError ( f \"Parameter p_num is out of range: { p_num !r} \" ) if not step_num >= 0 : raise ValueError ( f \"Parameter step_num is out of range: { step_num !r} \" ) self . _select_program ( p_num , step_num ) mode_code = 1 if mode == ChamberOperatingMode . CONSTANT else 0 self . command ( f 'FFWW0D110901 { mode_code : 04d } ' ) self . command ( 'FFWW0D110701000A' )","title":"run()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.stop","text":"Stops the chamber. Source code in pyinst\\models.py 4338 4339 4340 def stop ( self ) -> None : \"\"\"Stops the chamber.\"\"\" self . run ( mode = ChamberOperatingMode . OFF )","title":"stop()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.is_running","text":"Queries whether the chamber is running. Returns: Type Description bool Whether the chamber is runing. Source code in pyinst\\models.py 4351 4352 4353 4354 4355 4356 4357 def is_running ( self ) -> bool : \"\"\"Queries whether the chamber is running. Returns: Whether the chamber is runing. \"\"\" return self . _get_state ()[ 0 ]","title":"is_running()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.get_operating_mode","text":"Queries the chamber operating mode. Returns: Type Description ChamberOperatingMode The chamber operating mode. Source code in pyinst\\models.py 4359 4360 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 def get_operating_mode ( self ) -> ChamberOperatingMode : \"\"\"Queries the chamber operating mode. Returns: The chamber operating mode. \"\"\" running , in_program , _ = self . _get_state () if not running : mode = ChamberOperatingMode . OFF else : mode = ChamberOperatingMode . PROGRAM if in_program else ChamberOperatingMode . CONSTANT return mode","title":"get_operating_mode()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.in_error","text":"Source code in pyinst\\models.py 4372 4373 def in_error ( self ) -> bool : return self . _get_state ()[ 2 ]","title":"in_error()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.set_target_temp","text":"Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\models.py 4375 4376 4377 4378 4379 4380 4381 4382 4383 4384 4385 4386 def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" value = round ( value * 10 ) if value < 0 : value = 65536 + value cmd = 'FFWW0D119705 {temp:04X} 0000000000000000' . format ( temp = value ) self . command ( cmd )","title":"set_target_temp()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.get_target_temp","text":"Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\models.py 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399 def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" cmd = 'FFWR0D111401' data = self . query ( cmd ) raw = int ( data , 16 ) signed_val = ( raw - 65536 ) if raw >= 65536 / 2 else raw return signed_val / 10","title":"get_target_temp()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.get_current_temp","text":"Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\models.py 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" cmd = 'FFWR0D111701' data = self . query ( cmd ) raw = int ( data , 16 ) signed_val = ( raw - 65536 ) if raw >= 65536 / 2 else raw return signed_val / 10","title":"get_current_temp()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.set_temp_unit","text":"Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\models.py 4414 4415 4416 4417 4418 4419 4420 4421 4422 def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" if unit != TemperatureUnit . C : raise ValueError ( 'The temperature unit of this Chamber is fixed to C.' )","title":"set_temp_unit()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.get_temp_unit","text":"Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\models.py 4424 4425 4426 4427 4428 4429 4430 4431 def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" return TemperatureUnit . C","title":"get_temp_unit()"},{"location":"api/models/#pyinst.models.ModelMC711","text":"Bases: BaseModelEspecOld See base class","title":"ModelMC711"},{"location":"api/models/#pyinst.models.ModelMC711.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelMT3065","text":"Bases: BaseModelEspecOld See base class","title":"ModelMT3065"},{"location":"api/models/#pyinst.models.ModelMT3065.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelMC811","text":"Bases: RawSerialInstrument , TypeTS MC-811 is a chamber model by GWS. Note In order to communicate, corresponding configurations must be made on the chamber. Communication: Serial Protocol: STEN Baudrate/Parity/Bytesize/Stopbits/Termination: Correspond with the settings in the __init__ method. Default values: baudrate = 19200 parity = NONE Bytesize = 8 bits Stopbits: 1 bit Termination: <CR><LF> Device ID: None Parameters: Name Type Description Default resource_name str The serial port name. required baudrate int Baud rate such as 9600 or 115200 etc.. 19200 bytesize SerialByteSize SerialByteSize = SerialByteSize.EIGHTBITS, SerialByteSize.EIGHTBITS parity SerialParity SerialParity = SerialParity.NONE, SerialParity.NONE stopbits SerialStopBits SerialStopBits = SerialStopBits.ONE, SerialStopBits.ONE termination str The write and read termination character. '\\r\\n' **kwargs Any Directly passed to RawSerialInstrument.__init__ . {} Source code in pyinst\\models.py 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 def __init__ ( self , resource_name : str , baudrate : int = 19200 , bytesize : SerialByteSize = SerialByteSize . EIGHTBITS , parity : SerialParity = SerialParity . NONE , stopbits : SerialStopBits = SerialStopBits . ONE , termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: The serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. bytesize: SerialByteSize = SerialByteSize.EIGHTBITS, parity: SerialParity = SerialParity.NONE, stopbits: SerialStopBits = SerialStopBits.ONE, termination: The write and read termination character. **kwargs: Directly passed to `RawSerialInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , baudrate = baudrate , bytesize = bytesize , parity = parity , stopbits = stopbits , write_termination = termination , read_termination = termination , ** kwargs ) self . __fix_cmd_issue ()","title":"ModelMC811"},{"location":"api/models/#pyinst.models.ModelMC811.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelMC811.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelMC811.ts_type","text":"The temperature source type. Source code in pyinst\\models.py 4505 4506 4507 4508 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The temperature source type.\"\"\" return TemperatureSourceType . CHAMBER","title":"ts_type()"},{"location":"api/models/#pyinst.models.ModelMC811.run","text":"Run the chamber in selected mode and params, or stops the chamber. Parameters: Name Type Description Default mode ChamberOperatingMode The operating mode to run the chamber. ChamberOperatingMode.CONSTANT p_num Optional [ int ] The program number. Integers from 1 to 20. None step_num Optional [ int ] The step number to start the program running. Integers from 1. None Source code in pyinst\\models.py 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 def run ( self , mode : ChamberOperatingMode = ChamberOperatingMode . CONSTANT , p_num : Optional [ int ] = None , step_num : Optional [ int ] = None , ): \"\"\"Run the chamber in selected mode and params, or stops the chamber. Args: mode: The operating mode to run the chamber. p_num: The program number. Integers from 1 to 20. step_num: The step number to start the program running. Integers from 1. \"\"\" if mode == ChamberOperatingMode . OFF : cmd = 'MODE, OFF' self . command ( cmd ) elif mode == ChamberOperatingMode . CONSTANT : cmd = 'MODE, CONSTANT' self . command ( cmd ) elif mode == ChamberOperatingMode . PROGRAM : if not 0 <= p_num <= 19 : raise ValueError ( f \"Parameter p_num out of range: { p_num !r} \" ) elif not step_num >= 0 : raise ValueError ( f \"Parameter step_number should be a positive integer.\" ) cmd = f \"PRGM, RUN, RAM: { p_num + 1 : d } , STEP { step_num + 1 : d } \" # the number show on the chamber is 1 larger self . command ( cmd ) else : raise ValueError ( f \"Invalid operating mode: { mode !r} \" )","title":"run()"},{"location":"api/models/#pyinst.models.ModelMC811.stop","text":"Stops the chamber. Source code in pyinst\\models.py 4545 4546 4547 def stop ( self ) -> None : \"\"\"Stops the chamber.\"\"\" self . run ( mode = ChamberOperatingMode . OFF )","title":"stop()"},{"location":"api/models/#pyinst.models.ModelMC811.is_running","text":"Queries whether the chamber is running. Returns: Type Description bool Whether the chamber is running. Source code in pyinst\\models.py 4554 4555 4556 4557 4558 4559 4560 def is_running ( self ) -> bool : \"\"\"Queries whether the chamber is running. Returns: Whether the chamber is running. \"\"\" return self . _get_state in { 'CONSTANT' , 'RUN' }","title":"is_running()"},{"location":"api/models/#pyinst.models.ModelMC811.get_operating_mode","text":"Queries the chamber operating mode. Returns: Type Description ChamberOperatingMode The chamber operating mode. Source code in pyinst\\models.py 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 def get_operating_mode ( self ) -> ChamberOperatingMode : \"\"\"Queries the chamber operating mode. Returns: The chamber operating mode. \"\"\" state = self . _get_state () if self . is_running (): if state == 'CONSTANT' : mode = ChamberOperatingMode . CONSTANT elif state == 'RUN' : mode = ChamberOperatingMode . PROGRAM else : mode = ChamberOperatingMode . OFF return mode","title":"get_operating_mode()"},{"location":"api/models/#pyinst.models.ModelMC811.set_target_temp","text":"Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\models.py 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" value = round ( value , 1 ) cmd = 'TEMP, S {value:.1f} ' . format ( value = value ) self . command ( cmd )","title":"set_target_temp()"},{"location":"api/models/#pyinst.models.ModelMC811.get_target_temp","text":"Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\models.py 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" cmd = 'TEMP?' temp = float ( self . query ( cmd ) . split ( ',' )[ 1 ]) return temp","title":"get_target_temp()"},{"location":"api/models/#pyinst.models.ModelMC811.get_current_temp","text":"Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\models.py 4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" cmd = 'TEMP?' temp = float ( self . query ( cmd ) . split ( ',' )[ 0 ]) return temp","title":"get_current_temp()"},{"location":"api/models/#pyinst.models.ModelMC811.set_temp_unit","text":"Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\models.py 4611 4612 4613 4614 4615 4616 4617 4618 4619 def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" if unit != TemperatureUnit . C : raise ValueError ( 'The temperature unit of this Chamber is fixed to C.' )","title":"set_temp_unit()"},{"location":"api/models/#pyinst.models.ModelMC811.get_temp_unit","text":"Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\models.py 4621 4622 4623 4624 4625 4626 4627 4628 def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" return TemperatureUnit . C","title":"get_temp_unit()"},{"location":"api/models/#pyinst.models.ModelATS535","text":"Bases: VisaInstrument , TypeTS ATS-535 is a thermo-stream model by Temptronic. Note that before operating with temperature directly (means not in Cycle mode), you should set the thermo-stream to the Operator screen, and make sure the test head is lower down, and the air flow is on. Examples: ts = ModelATS535 ( '<resource-name>' ) ts . reset_operator () # check the test head is down if not ts . is_head_down (): raise OperationalError ( 'The thermo-stream test head is up.' ) # turn on the air flow ts . flow () # operate with the temperature directly ts . set_target_temp ( 35 ) t = ts . get_current_temp () Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 4655 4656 4657 4658 4659 4660 4661 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: directly passed to `VisaInstrument.__init__` \"\"\" super ( ModelATS535 , self ) . __init__ ( resource_name , ** kwargs )","title":"ModelATS535"},{"location":"api/models/#pyinst.models.ModelATS535.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelATS535.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelATS535.ts_type","text":"The temperature source type. Source code in pyinst\\models.py 4663 4664 4665 4666 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The temperature source type.\"\"\" return TemperatureSourceType . THERMO_STREAM","title":"ts_type()"},{"location":"api/models/#pyinst.models.ModelATS535.head_up","text":"Raise up the test head. Source code in pyinst\\models.py 4668 4669 4670 def head_up ( self ) -> None : \"\"\"Raise up the test head.\"\"\" self . command ( 'HEAD 0' )","title":"head_up()"},{"location":"api/models/#pyinst.models.ModelATS535.head_down","text":"Lower down the test head. Source code in pyinst\\models.py 4672 4673 4674 def head_down ( self ) -> None : \"\"\"Lower down the test head.\"\"\" self . command ( 'HEAD 1' )","title":"head_down()"},{"location":"api/models/#pyinst.models.ModelATS535.is_head_down","text":"Queries if the test head is lowered down. Returns: Type Description bool If the test head is lowered down. Source code in pyinst\\models.py 4676 4677 4678 4679 4680 4681 4682 4683 def is_head_down ( self ) -> bool : \"\"\"Queries if the test head is lowered down. Returns: If the test head is lowered down. \"\"\" is_down = bool ( int ( self . query ( 'HEAD?' ))) return is_down","title":"is_head_down()"},{"location":"api/models/#pyinst.models.ModelATS535.flow","text":"Turn the main nozzle air flow on or off. Parameters: Name Type Description Default on bool True = turn on, False = turn off. True Source code in pyinst\\models.py 4685 4686 4687 4688 4689 4690 4691 4692 def flow ( self , on : bool = True ) -> None : \"\"\"Turn the main nozzle air flow on or off. Args: on: `True` = turn on, `False` = turn off. \"\"\" cmd = 'FLOW {:d} ' . format ( on ) self . command ( cmd )","title":"flow()"},{"location":"api/models/#pyinst.models.ModelATS535.enable_dut_mode","text":"Enable (disable) DUT mode. Parameters: Name Type Description Default en bool True = DUT mode on (DUT control); False = DUT mode off (air control). True Source code in pyinst\\models.py 4694 4695 4696 4697 4698 4699 4700 4701 4702 4703 def enable_dut_mode ( self , en : bool = True ) -> None : \"\"\"Enable (disable) DUT mode. Args: en: True = DUT mode on (DUT control); False = DUT mode off (air control). \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = 'DUTM {en:d} ' . format ( en = en ) self . command ( cmd )","title":"enable_dut_mode()"},{"location":"api/models/#pyinst.models.ModelATS535.is_dut_mode","text":"Queries if DUT mode is on. Returns: Type Description bool True = DUT mode on (DUT control); False = DUT mode off (air control). Source code in pyinst\\models.py 4705 4706 4707 4708 4709 4710 4711 4712 def is_dut_mode ( self ) -> bool : \"\"\"Queries if DUT mode is on. Returns: True = DUT mode on (DUT control); False = DUT mode off (air control). \"\"\" state = bool ( int ( self . query ( 'DUTM?' ))) return state","title":"is_dut_mode()"},{"location":"api/models/#pyinst.models.ModelATS535.disable_dut_mode","text":"Disable DUT mode. Source code in pyinst\\models.py 4714 4715 4716 def disable_dut_mode ( self ) -> None : \"\"\"Disable DUT mode.\"\"\" self . enable_dut_mode ( False )","title":"disable_dut_mode()"},{"location":"api/models/#pyinst.models.ModelATS535.reset_operator","text":"Reset (force) the System to the Operator screen. Source code in pyinst\\models.py 4718 4719 4720 4721 def reset_operator ( self ) -> None : \"\"\"Reset (force) the System to the Operator screen.\"\"\" self . command ( 'RSTO' ) time . sleep ( 0.3 )","title":"reset_operator()"},{"location":"api/models/#pyinst.models.ModelATS535.set_n","text":"Select a setpoint to be the current setpoint. Parameters: Name Type Description Default n int n is 0 - 17 when on the Cycle screen. n is 0 to 2 when on the Operator screen (0=hot, 1=ambient, 2=cold). required Source code in pyinst\\models.py 4727 4728 4729 4730 4731 4732 4733 4734 4735 def set_n ( self , n : int ) -> None : \"\"\"Select a setpoint to be the current setpoint. Args: n: - n is 0 - 17 when on the Cycle screen. - n is 0 to 2 when on the Operator screen (0=hot, 1=ambient, 2=cold). \"\"\" return self . command ( 'SETN %d ' % n )","title":"set_n()"},{"location":"api/models/#pyinst.models.ModelATS535.set_p","text":"Set the currently selected setpoint's temperature. Source code in pyinst\\models.py 4737 4738 4739 def set_p ( self , p : int | float ) -> None : \"\"\"Set the currently selected setpoint's temperature.\"\"\" return self . command ( 'SETP %.1f ' % p )","title":"set_p()"},{"location":"api/models/#pyinst.models.ModelATS535.get_p_setting","text":"Read the current temperature setpoint. Source code in pyinst\\models.py 4741 4742 4743 4744 def get_p_setting ( self ) -> float : \"\"\"Read the current temperature setpoint.\"\"\" p = float ( self . query ( 'SETP?' )) return p","title":"get_p_setting()"},{"location":"api/models/#pyinst.models.ModelATS535.set_ramp","text":"Set the ramp rate for the currently selected setpoint, in \u00b0C per minute. Parameters: Name Type Description Default ramp int | float The ramp rate in \u00b0C per minute. required Source code in pyinst\\models.py 4746 4747 4748 4749 4750 4751 4752 4753 4754 4755 4756 4757 4758 4759 def set_ramp ( self , ramp : int | float ) -> None : \"\"\"Set the ramp rate for the currently selected setpoint, in \u00b0C per minute. Args: ramp: The ramp rate in \u00b0C per minute. \"\"\" if 0 <= ramp <= 99.9 : t = ' {:.1f} ' . format ( ramp ) elif 99.9 < ramp <= 9999 : t = ' {:d} ' . format ( ramp ) else : raise ValueError ( 'Parameter ramp out of range.' ) return self . command ( 'RAMP {} ' . format ( t ))","title":"set_ramp()"},{"location":"api/models/#pyinst.models.ModelATS535.get_ramp","text":"Read the setting of RAMP. Returns: Type Description float The ramp rate in \u00b0C per minute. Source code in pyinst\\models.py 4761 4762 4763 4764 4765 4766 4767 4768 4769 def get_ramp ( self ) -> float : \"\"\"Read the setting of RAMP. Returns: The ramp rate in \u00b0C per minute. \"\"\" cmd = 'RAMP?' ramp = float ( self . query ( cmd )) return ramp","title":"get_ramp()"},{"location":"api/models/#pyinst.models.ModelATS535.set_target_temp","text":"Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\models.py 4771 4772 4773 4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" if value < 20 : n = 2 elif 20 <= value <= 30 : n = 1 else : n = 0 self . set_n ( n ) self . set_p ( value )","title":"set_target_temp()"},{"location":"api/models/#pyinst.models.ModelATS535.get_target_temp","text":"Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\models.py 4787 4788 4789 4790 4791 4792 4793 4794 def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" return self . get_p_setting ()","title":"get_target_temp()"},{"location":"api/models/#pyinst.models.ModelATS535.get_current_temp","text":"Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\models.py 4796 4797 4798 4799 4800 4801 4802 4803 4804 4805 4806 def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" temp = float ( self . query ( 'TEMP?' )) if temp > 400 : raise ValueError ( 'Invalid current temperature.' ) return temp","title":"get_current_temp()"},{"location":"api/models/#pyinst.models.ModelATS535.set_temp_unit","text":"Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\models.py 4808 4809 4810 4811 4812 4813 4814 4815 4816 def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" if unit != TemperatureUnit . C : raise ValueError ( 'The temperature unit of this thermo-stream is fixed to C.' )","title":"set_temp_unit()"},{"location":"api/models/#pyinst.models.ModelATS535.get_temp_unit","text":"Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\models.py 4818 4819 4820 4821 4822 4823 4824 4825 def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" return TemperatureUnit . C","title":"get_temp_unit()"},{"location":"api/models/#pyinst.models.ModelTC3625","text":"Bases: RawSerialInstrument , TypeTS TC-36-25 is a TEC model by TE Technology. You may have to configure some parameters via the GUI provided by the vendor before your first use, this class will only perform the temperature control. Parameters: Name Type Description Default resource_name str Serial port name. required baudrate int Baud rate such as 9600 or 115200 etc.. 9600 read_termination str Read termination character. '^' write_termination str Write termination character. '\\r' Source code in pyinst\\models.py 4836 4837 4838 4839 4840 4841 4842 4843 4844 4845 4846 4847 4848 4849 4850 4851 4852 4853 def __init__ ( self , resource_name : str , baudrate : int = 9600 , read_termination : str = '^' , write_termination : str = ' \\r ' , ** kwargs : Any ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super ( ModelTC3625 , self ) . __init__ ( resource_name , baudrate = baudrate , read_termination = read_termination , write_termination = write_termination , ** kwargs )","title":"ModelTC3625"},{"location":"api/models/#pyinst.models.ModelTC3625.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelTC3625.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelTC3625.ts_type","text":"The temperature source type. Source code in pyinst\\models.py 4855 4856 4857 4858 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The temperature source type.\"\"\" return TemperatureSourceType . TEC","title":"ts_type()"},{"location":"api/models/#pyinst.models.ModelTC3625.formatted_query","text":"Send a formated command to the TEC and return the result value. Parameters: Name Type Description Default cmd_code int Comand code is an int between 0 and 0xFF. required value int An int value sent with the command. Defaults to 0 if it is not needed. Between -0x80000000 and 0x7FFFFFFF. 0 Returns: Type Description int The Source code in pyinst\\models.py 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 4871 4872 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 4887 4888 4889 4890 4891 4892 def formatted_query ( self , cmd_code : int , value : int = 0 ) -> int : \"\"\" Send a formated command to the TEC and return the result value. Args: cmd_code: Comand code is an int between 0 and 0xFF. value: An int value sent with the command. Defaults to 0 if it is not needed. Between -0x80000000 and 0x7FFFFFFF. Returns: The \"\"\" if not 0 <= value <= 0xFF : raise ValueError ( 'Parameter cmd_code out of range: {!r} ' . format ( cmd_code )) if not - 0x80000000 <= value <= 0x7FFFFFFF : raise ValueError ( 'Parameter value out of range: {!r} ' . format ( value )) STX = '*' # Start of text character that always prepend to the cmd. ADDR = 0 # The address of this device is fixed to 0 cmd_body = ' {addr:02x}{cmd_code:02x}{val:08x} ' . format ( addr = ADDR , cmd_code = cmd_code , val = signed_to_unsigned ( value , byte_count = 4 )) check_sum = calc_check_sum ( cmd_body . encode ()) cmd = ' {pre}{cmd_body}{check_sum:02x} ' . format ( pre = STX , cmd_body = cmd_body , check_sum = check_sum ) result = self . query ( cmd )[ 1 :] result_content = result [ 0 : - 2 ] result_check_sum = int ( result [ - 2 :], base = 16 ) calculated_check_sum = calc_check_sum ( result_content . encode ()) if result_check_sum != calculated_check_sum : raise ValueError ( \"Mismatched checksum of the reply.\" ) if result_content == \"X\" * 8 : raise ValueError ( \"Mismatched checksum of the command.\" ) result_value = unsigned_to_signed ( int ( result_content , base = 16 ), 4 ) return result_value","title":"formatted_query()"},{"location":"api/models/#pyinst.models.ModelTC3625.set_target_temp","text":"Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\models.py 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" cmd_value = round ( value * 100 ) rtn_value = self . formatted_query ( 0x1c , cmd_value ) if cmd_value != rtn_value : raise ValueError ( 'The return value mismatched with the cmd value: {!r} / {!r} ' . format ( rtn_value , cmd_value ))","title":"set_target_temp()"},{"location":"api/models/#pyinst.models.ModelTC3625.get_target_temp","text":"Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\models.py 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" rtn_value = self . formatted_query ( 0x03 ) t = rtn_value / 100 return t","title":"get_target_temp()"},{"location":"api/models/#pyinst.models.ModelTC3625.get_current_temp","text":"Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\models.py 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" rtn_value = self . formatted_query ( 0x01 ) t = rtn_value / 100 return t","title":"get_current_temp()"},{"location":"api/models/#pyinst.models.ModelTC3625.set_temp_unit","text":"Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\models.py 4935 4936 4937 4938 4939 4940 4941 4942 4943 4944 4945 def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" unit = TemperatureUnit ( unit ) rtn_value = self . formatted_query ( 0x32 , unit . value ) if rtn_value != unit . value : raise ValueError ( 'The return value mismatched with the cmd value: {!r} / {!r} ' . format ( rtn_value , unit ))","title":"set_temp_unit()"},{"location":"api/models/#pyinst.models.ModelTC3625.get_temp_unit","text":"Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\models.py 4947 4948 4949 4950 4951 4952 4953 4954 4955 def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" rtn_value = self . formatted_query ( 0x4b ) return TemperatureUnit ( rtn_value )","title":"get_temp_unit()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter","text":"Bases: VisaInstrument , TypeOTF Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' Source code in pyinst\\models.py 4960 4961 4962 4963 4964 4965 4966 4967 4968 4969 4970 4971 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super () . __init__ ( resource_name , read_termination = read_termination , write_termination = write_termination , ** kwargs )","title":"BaseModelSantecBandwidthTunableFilter"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 4973 4974 4975 4976 4977 4978 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" cmd = ':FREQuency? MIN' freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return freq","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 4980 4981 4982 4983 4984 4985 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" cmd = ':FREQuency? MAX' freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return freq","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 4987 4988 4989 4990 4991 4992 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = ':WAVelength? MIN' wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 4994 4995 4996 4997 4998 4999 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = ':WAVelength? MAX' wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.min_bandwidth_in_nm","text":"The minimum bandwidth in nm. Source code in pyinst\\models.py 5001 5002 5003 5004 5005 5006 @property def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" cmd = ':BANDwidth? MIN' bw = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return bw","title":"min_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.max_bandwidth_in_nm","text":"The maximum bandwidth in nm. Source code in pyinst\\models.py 5008 5009 5010 5011 5012 5013 @property def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" cmd = ':BANDwidth? MAX' bw = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return bw","title":"max_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.min_bandwidth_in_ghz","text":"The minimum bandwidth in GHz. Source code in pyinst\\models.py 5015 5016 5017 5018 @property def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return super () . min_bandwidth_in_ghz","title":"min_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.max_bandwidth_in_ghz","text":"The maximum bandwidth in GHz. Source code in pyinst\\models.py 5020 5021 5022 5023 @property def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return super () . max_bandwidth_in_ghz","title":"max_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 5025 5026 5027 5028 5029 5030 5031 5032 5033 5034 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" cmd = ':FREQuency?' freq = float ( Decimal ( self . query ( cmd )) / 10 ** 12 ) return freq","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 5036 5037 5038 5039 5040 5041 5042 5043 5044 5045 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( 'Parameter frequency out of range: {freq!r} ' . format ( freq = frequency )) cmd = ':FREQuency {freq:.5f} THz' . format ( freq = frequency ) self . command ( cmd )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 5047 5048 5049 5050 5051 5052 5053 5054 5055 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = ':WAVelength?' wl = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( 'Parameter wavelength out of range: {wl!r} ' . format ( wl = wavelength )) cmd = ':WAVelength {wl:.3f} nm' . format ( wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.get_bandwidth_in_nm","text":"Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\models.py 5068 5069 5070 5071 5072 5073 5074 5075 5076 5077 def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" cmd = ':BANDwidth?' bw = float ( Decimal ( self . query ( cmd )) * 10 ** 9 ) return bw","title":"get_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.set_bandwidth_in_nm","text":"Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\models.py 5079 5080 5081 5082 5083 5084 5085 5086 5087 5088 5089 def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" if not self . min_bandwidth_in_nm <= value <= self . max_bandwidth_in_nm : raise ValueError ( 'Parameter value out of range: {val!r} ' . format ( val = value )) cmd = ':BANDwidth {value:.3f} nm' . format ( value = value ) self . command ( cmd )","title":"set_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.get_bandwidth_in_ghz","text":"Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\models.py 5091 5092 5093 5094 5095 5096 5097 5098 def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" return super () . get_bandwidth_in_ghz ()","title":"get_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter.set_bandwidth_in_ghz","text":"Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\models.py 5100 5101 5102 5103 5104 5105 5106 5107 def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" return super () . set_bandwidth_in_ghz ( value )","title":"set_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.ModelOTF970","text":"Bases: BaseModelSantecBandwidthTunableFilter","title":"ModelOTF970"},{"location":"api/models/#pyinst.models.ModelOTF970.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelOTF970.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelOTF970.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelOTF980","text":"Bases: BaseModelSantecBandwidthTunableFilter","title":"ModelOTF980"},{"location":"api/models/#pyinst.models.ModelOTF980.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelOTF980.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelOTF980.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelOTF930","text":"Bases: VisaInstrument , TypeOTF Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' Source code in pyinst\\models.py 5145 5146 5147 5148 5149 5150 5151 5152 5153 5154 5155 5156 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super () . __init__ ( resource_name , read_termination = read_termination , write_termination = write_termination , ** kwargs )","title":"ModelOTF930"},{"location":"api/models/#pyinst.models.ModelOTF930.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelOTF930.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelOTF930.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelOTF930.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 5158 5159 5160 5161 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelOTF930.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 5163 5164 5165 5166 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelOTF930.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 5168 5169 5170 5171 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1520.0","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelOTF930.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 5173 5174 5175 5176 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1610.0","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelOTF930.min_bandwidth_in_nm","text":"The minimum bandwidth in nm. Source code in pyinst\\models.py 5178 5179 5180 5181 @property def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" return float ( 'nan' )","title":"min_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.ModelOTF930.max_bandwidth_in_nm","text":"The maximum bandwidth in nm. Source code in pyinst\\models.py 5183 5184 5185 5186 @property def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" return float ( 'nan' )","title":"max_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.ModelOTF930.min_bandwidth_in_ghz","text":"The minimum bandwidth in GHz. Source code in pyinst\\models.py 5188 5189 5190 5191 @property def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return float ( 'nan' )","title":"min_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.ModelOTF930.max_bandwidth_in_ghz","text":"The maximum bandwidth in GHz. Source code in pyinst\\models.py 5193 5194 5195 5196 @property def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return float ( 'nan' )","title":"max_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.ModelOTF930.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 5198 5199 5200 5201 5202 5203 5204 5205 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelOTF930.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 5207 5208 5209 5210 5211 5212 5213 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelOTF930.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 5215 5216 5217 5218 5219 5220 5221 5222 5223 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = 'WA' wl = float ( self . query ( cmd )) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelOTF930.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 5225 5226 5227 5228 5229 5230 5231 5232 5233 5234 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( 'Parameter wavelength out of range: {wl!r} ' . format ( wl = wavelength )) cmd = 'WA {wl:.3f} ' . format ( wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelOTF930.get_bandwidth_in_nm","text":"Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\models.py 5236 5237 5238 5239 5240 5241 5242 5243 def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" raise Error ( 'The bandwidth of this OTF model is not tunable.' )","title":"get_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.ModelOTF930.set_bandwidth_in_nm","text":"Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\models.py 5245 5246 5247 5248 5249 5250 5251 5252 def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" raise Error ( 'The bandwidth of this OTF model is not tunable.' )","title":"set_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.ModelOTF930.get_bandwidth_in_ghz","text":"Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\models.py 5254 5255 5256 5257 5258 5259 5260 5261 def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" raise Error ( 'The bandwidth of this OTF model is not tunable.' )","title":"get_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.ModelOTF930.set_bandwidth_in_ghz","text":"Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\models.py 5263 5264 5265 5266 5267 5268 5269 5270 def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" raise Error ( 'The bandwidth of this OTF model is not tunable.' )","title":"set_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.ModelBTF10011","text":"Bases: RawSerialInstrument , TypeOTF Source code in pyinst\\models.py 5281 5282 def __init__ ( self , resource_name : str , baudrate : int = 115200 , read_termination : str = \" \\r\\n \" , write_termination : str = \" \\r\\n \" , ** kwargs : Any ): super () . __init__ ( resource_name , baudrate , read_termination , write_termination , ** kwargs )","title":"ModelBTF10011"},{"location":"api/models/#pyinst.models.ModelBTF10011.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelBTF10011.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelBTF10011.detais","text":"","title":"detais"},{"location":"api/models/#pyinst.models.ModelBTF10011.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 5284 5285 5286 5287 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelBTF10011.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 5289 5290 5291 5292 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelBTF10011.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 5294 5295 5296 5297 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1525.0","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelBTF10011.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 5299 5300 5301 5302 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1565.0","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelBTF10011.min_bandwidth_in_ghz","text":"The minimum bandwidth in GHz. Source code in pyinst\\models.py 5304 5305 5306 5307 @property def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return super () . min_bandwidth_in_ghz","title":"min_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.ModelBTF10011.max_bandwidth_in_ghz","text":"The maximum bandwidth in GHz. Source code in pyinst\\models.py 5309 5310 5311 5312 @property def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return super () . max_bandwidth_in_ghz","title":"max_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.ModelBTF10011.min_bandwidth_in_nm","text":"The minimum bandwidth in nm. Source code in pyinst\\models.py 5314 5315 5316 5317 @property def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" return 1.0","title":"min_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.ModelBTF10011.max_bandwidth_in_nm","text":"The maximum bandwidth in nm. Source code in pyinst\\models.py 5319 5320 5321 5322 @property def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" return 18","title":"max_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.ModelBTF10011.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 5340 5341 5342 5343 5344 5345 5346 5347 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelBTF10011.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 5349 5350 5351 5352 5353 5354 5355 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelBTF10011.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 5357 5358 5359 5360 5361 5362 5363 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return self . __get_wl_bw ()[ 0 ]","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelBTF10011.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 5365 5366 5367 5368 5369 5370 5371 5372 5373 5374 5375 5376 5377 5378 5379 5380 5381 5382 5383 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f 'Parameter wavelength is out of range: { wavelength !r} ' ) self . write ( f 'w { wavelength : .2f } ' ) reply = '' while True : rx = self . read () . lower () reply += rx if 'done' in rx or 'error' in rx : break if 'unknown' in reply : raise ValueError ( 'Unkonwn linewidth.' ) if 'error' in reply : raise ValueError ( 'Failed to set wavelength.' )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelBTF10011.get_bandwidth_in_ghz","text":"Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\models.py 5385 5386 5387 5388 5389 5390 5391 5392 def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" return super () . get_bandwidth_in_ghz ()","title":"get_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.ModelBTF10011.set_bandwidth_in_ghz","text":"Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\models.py 5394 5395 5396 5397 5398 5399 5400 5401 def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" return super () . set_bandwidth_in_ghz ( value )","title":"set_bandwidth_in_ghz()"},{"location":"api/models/#pyinst.models.ModelBTF10011.get_bandwidth_in_nm","text":"Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\models.py 5403 5404 5405 5406 5407 5408 5409 5410 def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" self . __get_wl_bw ()[ 1 ]","title":"get_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.ModelBTF10011.set_bandwidth_in_nm","text":"Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\models.py 5412 5413 5414 5415 5416 5417 5418 5419 5420 5421 5422 5423 5424 5425 5426 5427 5428 5429 5430 5431 5432 def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" if not self . min_bandwidth_in_nm <= value <= self . max_bandwidth_in_nm : raise ValueError ( f 'Parameter value is out of range: { value !r} ' ) wl = self . get_wavelength () self . write ( f 'w { wl : .2f } , { value : .2f } ' ) reply = '' while True : rx = self . read () . lower () reply += rx if 'done(a)' in rx or 'error' in rx : break if 'out of range' in reply : raise ValueError ( 'Out of range.' ) if 'error' in reply : raise ValueError ( 'Failed to set bandwidth.' )","title":"set_bandwidth_in_nm()"},{"location":"api/models/#pyinst.models.ModelNSW","text":"Bases: BaseInstrument , TypeSW The Smart Optical Switch produced by NeoPhotonics. Parameters: Name Type Description Default resource_name str The USB S/N of the device. You can use get_usb_devices() method to list all the available devices. required slot_or_type int | str For optical switch with 1x2/2x2/1x4 optical switch slots, this parameter is the slot in the frame. For 1x8 and 1x16 optical switch, this parameter defines the type of the optical switch. - 1 | 2 | 3 : The slot in the frame. - '1 8': This optical switch is 1x8 type. - '1 16': This optical switch is 1x16 type. required Source code in pyinst\\models.py 5447 5448 5449 5450 5451 5452 5453 5454 5455 5456 5457 5458 5459 5460 5461 5462 5463 5464 5465 5466 5467 5468 5469 5470 5471 5472 5473 5474 5475 5476 def __init__ ( self , resource_name : str , slot_or_type : int | str ) -> None : \"\"\" Args: resource_name: The USB S/N of the device. You can use get_usb_devices() method to list all the available devices. slot_or_type: For optical switch with 1x2/2x2/1x4 optical switch slots, this parameter is the slot in the frame. For 1x8 and 1x16 optical switch, this parameter defines the type of the optical switch. - `1`|`2`|`3`: The slot in the frame. - '1*8': This optical switch is 1x8 type. - '1*16': This optical switch is 1x16 type. \"\"\" super ( ModelNSW , self ) . __init__ ( resource_name ) if isinstance ( slot_or_type , int ): self . __index = slot_or_type - 1 else : index_map = { '1' : 0 , '2' : 1 , '3' : 2 , '1*8' : 3 , '1*16' : 4 , } try : self . __index = index_map [ slot_or_type ] except KeyError : raise KeyError ( 'Invalid value for slot_or_type: %r ' % slot_or_type ) self . __usb_dev = NeoUsbDevice ( resource_name ) self . __reg_ch_sel = 16 * self . __index + 130","title":"ModelNSW"},{"location":"api/models/#pyinst.models.ModelNSW.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelNSW.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelNSW.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelNSW.get_usb_devices","text":"The USB S/N of all the available devices. Source code in pyinst\\models.py 5478 5479 5480 5481 @classmethod def get_usb_devices ( cls ) -> List [ str ]: \"\"\"The USB S/N of all the available devices.\"\"\" return [ i [ \"Serial Number\" ] . upper () for i in NeoUsbDevice . get_devices_information ()]","title":"get_usb_devices()"},{"location":"api/models/#pyinst.models.ModelNSW.close","text":"Release the instrument resource. Source code in pyinst\\models.py 5483 5484 5485 def close ( self ) -> None : \"Release the instrument resource.\" pass","title":"close()"},{"location":"api/models/#pyinst.models.ModelNSW.set_channel","text":"Switch to the specified channel route. Parameters: Name Type Description Default channel int The channel number. required Source code in pyinst\\models.py 5493 5494 5495 5496 5497 5498 5499 5500 5501 5502 5503 def set_channel ( self , channel : int ) -> None : \"\"\" Switch to the specified channel route. Args: channel: The channel number. \"\"\" self . __usb_dev . write_registers ( 0xC2 , self . __reg_ch_sel , channel . to_bytes ( 1 , 'big' )) time . sleep ( 0.4 ) if self . get_channel () != channel : raise ValueError ( 'Set switch channel failed.' )","title":"set_channel()"},{"location":"api/models/#pyinst.models.ModelNSW.get_channel","text":"Queries the current channel route of the switch. Returns: Type Description int The channel number of current route. Source code in pyinst\\models.py 5505 5506 5507 5508 5509 5510 5511 5512 5513 5514 5515 def get_channel ( self ) -> int : \"\"\" Queries the current channel route of the switch. Returns: The channel number of current route. \"\"\" channel = int . from_bytes ( self . __usb_dev . read_registers ( 0xC2 , self . __reg_ch_sel , 1 ), 'big' ) if channel <= 0 : raise ValueError ( 'Invalid channel number.' ) return channel","title":"get_channel()"},{"location":"api/models/#pyinst.models.ModelAT5524","text":"Bases: VisaInstrument , TypeSW Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 5523 5524 5525 5526 5527 5528 5529 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelAT5524 , self ) . __init__ ( resource_name , ** kwargs )","title":"ModelAT5524"},{"location":"api/models/#pyinst.models.ModelAT5524.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelAT5524.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelAT5524.get_channel","text":"Queries the current channel route of the switch. Returns: Type Description int The channel number of current route. Source code in pyinst\\models.py 5531 5532 5533 5534 5535 5536 5537 5538 def get_channel ( self ) -> int : \"\"\" Queries the current channel route of the switch. Returns: The channel number of current route. \"\"\" return int ( self . query ( 'SW?' ))","title":"get_channel()"},{"location":"api/models/#pyinst.models.ModelAT5524.set_channel","text":"Switch to the specified channel route. Parameters: Name Type Description Default channel int The channel number. required Source code in pyinst\\models.py 5540 5541 5542 5543 5544 5545 5546 5547 5548 5549 5550 5551 5552 def set_channel ( self , channel : int ) -> None : \"\"\" Switch to the specified channel route. Args: channel: The channel number. \"\"\" cmd = 'SW {ch:d} ' . format ( ch = channel ) self . command ( cmd ) time . sleep ( 0.5 ) if self . get_channel () != channel : raise ValueError ( 'Set switch channel failed.' )","title":"set_channel()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1","text":"Bases: VisaInstrument , TypeMSW mOSX-C1 is a optical matrix switch by VIAVI. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Any directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 5579 5580 5581 5582 5583 5584 5585 5586 5587 def __init__ ( self , resource_name : str , slot : int , ** kwargs : Any ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelMAP_mOSX_C1 , self ) . __init__ ( resource_name , ** kwargs ) self . __device = ' {slot:d} , {device} ' . format ( slot = slot , device = 1 )","title":"ModelMAP_mOSX_C1"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.get_switch_topology","text":"Returns the configured switch topology Returns: Name Type Description M int number of input ports N int number of output ports Notes For common connection mode, M = total number of ports, N = 0. Source code in pyinst\\models.py 5589 5590 5591 5592 5593 5594 5595 5596 5597 5598 5599 5600 5601 5602 5603 def get_switch_topology ( self ) -> Tuple [ int , int ]: \"\"\" Returns the configured switch topology Returns: M: number of input ports N: number of output ports Notes: For common connection mode, M = total number of ports, N = 0. \"\"\" cmd = ':MODUle:TYPE? {device} ' . format ( device = self . __device ) rpl = self . query ( cmd ) config = tuple ( int ( i ) for i in rpl . split ( ',' )) return config","title":"get_switch_topology()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.set_switch_topology","text":"Sets the switch topology to emulate an MxN switch or common connection. All the channels will be cleared after topology changed. Parameters: Name Type Description Default n_in int Number of input ports (0 for common connection mode). required n_out int Number of output ports (0 for common connection mode). required Source code in pyinst\\models.py 5605 5606 5607 5608 5609 5610 5611 5612 5613 5614 5615 5616 5617 5618 5619 def set_switch_topology ( self , n_in : int , n_out : int ) -> None : \"\"\" Sets the switch topology to emulate an MxN switch or common connection. All the channels will be cleared after topology changed. Args: n_in: Number of input ports (0 for common connection mode). n_out: Number of output ports (0 for common connection mode). \"\"\" cmd = ':MODUle:TYPe {device} , {n_in} , {n_out} ' . format ( device = self . __device , n_in = n_in , n_out = n_out ) self . command ( cmd )","title":"set_switch_topology()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.list_channels","text":"Returns a list of all configured connections and their status. Returns: Type Description List [ Tuple [ int , int , bool ]] All configured connections and their status. [(port1, port2, state), ...]. List [ Tuple [ int , int , bool ]] For state, False = Disabled, True = Enabled. Source code in pyinst\\models.py 5621 5622 5623 5624 5625 5626 5627 5628 5629 5630 5631 5632 5633 5634 5635 5636 5637 5638 def list_channels ( self ) -> List [ Tuple [ int , int , bool ]]: \"\"\" Returns a list of all configured connections and their status. Returns: All configured connections and their status. [(port1, port2, state), ...]. For state, False = Disabled, True = Enabled. \"\"\" cmd = ':ROUTe:LIST? {device} ' . format ( device = self . __device ) rpl = self . query ( cmd ) channels = [] for s in rpl . split ( ',' ): spl = s . split () port1 , port2 = ( int ( i ) for i in spl [ 0 ] . split ( '-' )) state = bool ( int ( spl [ 1 ])) channels . append (( port1 , port2 , state )) return channels","title":"list_channels()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.connect","text":"Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use check to confirm whether either port is already in use. Parameters: Name Type Description Default port1 int The valid port at one end of the path. required port2 int The valid port at the other end of the path. required enable bool Whether to enable the connection. True Source code in pyinst\\models.py 5640 5641 5642 5643 5644 5645 5646 5647 5648 5649 5650 5651 5652 5653 5654 5655 5656 5657 5658 5659 5660 5661 5662 5663 5664 5665 5666 def connect ( self , port1 : int , port2 : int , enable : bool = True ) -> None : \"\"\" Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use `check` to confirm whether either port is already in use. Args: port1: The valid port at one end of the path. port2: The valid port at the other end of the path. enable: Whether to enable the connection. \"\"\" m , n = self . get_switch_topology () if m == n : raise ValueError ( 'Invalid port value: please select 2 different ports. port1= {port1} , port2= {port2} ' . format ( port1 = port1 , port2 = port2 )) if n == 0 : if port1 > m or port2 > m : raise ValueError ( 'Invalid port value: exceed max port number {m} . port1= {port1} , port2= {port2} ' . format ( m = m , port1 = port1 , port2 = port2 )) else : if not ( port1 <= m ) ^ ( port2 <= m ): raise ValueError ( 'Invalid port value for {m} x {n} switch: port1= {port1} , port2= {port2} ' . format ( m = m , n = n , port1 = port1 , port2 = port2 )) cmd = ':ROUTe:CLOSe {device} , {port1:d} , {port2:d} , {state:d} ' . format ( device = self . __device , port1 = port1 , port2 = port2 , state = enable ) self . command ( cmd )","title":"connect()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.connected_with","text":"Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Parameters: Name Type Description Default port int The port number to check connection information. required Returns: Type Description Optional [ int ] Connection information for the specified port. Optional [ int ] None = No connection exists. Optional [ int ] Optional [ int ] int N = Port number at other end of the connection. Source code in pyinst\\models.py 5668 5669 5670 5671 5672 5673 5674 5675 5676 5677 5678 5679 5680 5681 5682 5683 5684 5685 5686 5687 def connected_with ( self , port : int ) -> Optional [ int ]: \"\"\" Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Args: port: The port number to check connection information. Returns: Connection information for the specified port. None = No connection exists. int N = Port number at other end of the connection. \"\"\" cmd = ':ROUTe:CLOSe? {device} , {port:d} ' . format ( device = self . __device , port = port ) rpl = self . query ( cmd ) return int ( rpl ) or None","title":"connected_with()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.clear","text":"Clears a configured optical connection connected to the specified port. Parameters: Name Type Description Default port int The port at either end of the configured connection. required Source code in pyinst\\models.py 5689 5690 5691 5692 5693 5694 5695 5696 5697 def clear ( self , port : int ) -> None : \"\"\" Clears a configured optical connection connected to the specified port. Args: port: The port at either end of the configured connection. \"\"\" cmd = ':ROUTe:CLEAR {device} , {port:d} ' . format ( device = self . __device , port = port ) self . command ( cmd )","title":"clear()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.clear_all","text":"Clears all configured optical connections. Source code in pyinst\\models.py 5699 5700 5701 5702 def clear_all ( self ) -> None : \"\"\"Clears all configured optical connections.\"\"\" cmd = ':ROUTe:CLEAR:ALL {device} ' . format ( device = self . __device ) self . command ( cmd )","title":"clear_all()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.check","text":"To check if port1 and port2 are both not in use. Parameters: Name Type Description Default port1 int The port at one end of the path. required port2 int The port at the other end of the path. required Returns: Type Description bool True = Both ports available (not in use). bool False = Conflict; one or both ports already in use. Source code in pyinst\\models.py 5704 5705 5706 5707 5708 5709 5710 5711 5712 5713 5714 5715 5716 5717 5718 5719 5720 5721 def check ( self , port1 : int , port2 : int ) -> bool : \"\"\" To check if port1 and port2 are both not in use. Args: port1: The port at one end of the path. port2: The port at the other end of the path. Returns: True = Both ports available (not in use). False = Conflict; one or both ports already in use. \"\"\" cmd = ':ROUTe:CHECK? {device} , {port1:d} , {port2:d} ' . format ( device = self . __device , port1 = port1 , port2 = port2 ) rpl = self . query ( cmd ) return bool ( int ( rpl ))","title":"check()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.enable","text":"Sets the connection state of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required enable bool True = Enable | False = Disable. True Source code in pyinst\\models.py 5723 5724 5725 5726 5727 5728 5729 5730 5731 5732 5733 5734 def enable ( self , port : int , enable : bool = True ) -> None : \"\"\" Sets the connection state of a configured optical connection. Args: port: The port at either end of the connection. enable: True = Enable | False = Disable. \"\"\" cmd = ':ROUTe:ENABle {device} , {port:d} , {state:d} ' . format ( device = self . __device , port = port , state = enable ) self . command ( cmd )","title":"enable()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.disable","text":"Disable the connection of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required Source code in pyinst\\models.py 5736 5737 5738 5739 5740 5741 5742 5743 def disable ( self , port : int ) -> None : \"\"\" Disable the connection of a configured optical connection. Args: port: The port at either end of the connection. \"\"\" return self . enable_channel ( port , enable = False )","title":"disable()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.is_enabled","text":"Returns the connection state of a configured optical connection. Returns: Type Description bool True = Enabled | False = Disabled Source code in pyinst\\models.py 5745 5746 5747 5748 5749 5750 5751 5752 5753 5754 def is_enabled ( self , port : int ) -> bool : \"\"\" Returns the connection state of a configured optical connection. Returns: True = Enabled | False = Disabled \"\"\" cmd = ':ROUTe:ENABle? {device} , {port:d} ' . format ( device = self . __device , port = port ) rpl = self . query ( cmd ) return bool ( int ( rpl ))","title":"is_enabled()"},{"location":"api/models/#pyinst.models.ModelE3631A","text":"Bases: VisaInstrument , TypePS Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required port int The port number among three output ports. - 1 : +6V - 2 : +25V - 3 : -25V required **kwargs Any directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 5775 5776 5777 5778 5779 5780 5781 5782 5783 5784 5785 5786 5787 5788 def __init__ ( self , resource_name : str , port : int , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. port: The port number among three output ports. - `1`: +6V - `2`: +25V - `3`: -25V **kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , ** kwargs ) if port not in { 1 , 2 , 3 }: raise ValueError ( f \"Invalid parameter port: { port !r} \" ) self . __port = port","title":"ModelE3631A"},{"location":"api/models/#pyinst.models.ModelE3631A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelE3631A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelE3631A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelE3631A.params","text":"","title":"params"},{"location":"api/models/#pyinst.models.ModelE3631A.port","text":"The selected port number among three output ports. Source code in pyinst\\models.py 5798 5799 5800 5801 @property def port ( self ) -> int : \"\"\"The selected port number among three output ports.\"\"\" return self . __port","title":"port()"},{"location":"api/models/#pyinst.models.ModelE3631A.min_voltage","text":"The minimum programmable voltage level in V. Source code in pyinst\\models.py 5803 5804 5805 5806 5807 5808 5809 @property @__select_port def min_voltage ( self ) -> float : \"\"\"The minimum programmable voltage level in V.\"\"\" cmd = \":VOLTage? MIN\" v = float ( self . query ( cmd )) return v","title":"min_voltage()"},{"location":"api/models/#pyinst.models.ModelE3631A.max_voltage","text":"The maximum programmable voltage level in V. Source code in pyinst\\models.py 5811 5812 5813 5814 5815 5816 5817 @property @__select_port def max_voltage ( self ) -> float : \"\"\"The maximum programmable voltage level in V.\"\"\" cmd = \":VOLTage? MAX\" v = float ( self . query ( cmd )) return v","title":"max_voltage()"},{"location":"api/models/#pyinst.models.ModelE3631A.min_current","text":"The minimum programmable current level in A. Source code in pyinst\\models.py 5819 5820 5821 5822 5823 5824 5825 @property @__select_port def min_current ( self ) -> float : \"\"\"The minimum programmable current level in A.\"\"\" cmd = \":CURRent? MIN\" i = float ( self . query ( cmd )) return i","title":"min_current()"},{"location":"api/models/#pyinst.models.ModelE3631A.max_current","text":"The maximum programmable current level in A. Source code in pyinst\\models.py 5827 5828 5829 5830 5831 5832 5833 @property @__select_port def max_current ( self ) -> float : \"\"\"The maximum programmable current level in A.\"\"\" cmd = \":CURRent? MAX\" i = float ( self . query ( cmd )) return i","title":"max_current()"},{"location":"api/models/#pyinst.models.ModelE3631A.enable","text":"Enables (or disables) the outputs of the power supply. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 @__select_port def enable ( self , en : bool = True ) -> None : \"\"\" Enables (or disables) the outputs of the power supply. Args: en: `True` = Enable, `False` = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = f ':OUTPut { [ \"OFF\" , \"ON\" ][ int ( en )] } ' self . command ( cmd )","title":"enable()"},{"location":"api/models/#pyinst.models.ModelE3631A.disable","text":"Disables the output of the power supply. Source code in pyinst\\models.py 5848 5849 5850 def disable ( self ) -> None : \"\"\"Disables the output of the power supply.\"\"\" self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.ModelE3631A.is_enabled","text":"Queries whether the output of the power supply is enabled. Returns: Type Description bool True = Enabled, False = Disabled Source code in pyinst\\models.py 5852 5853 5854 5855 5856 5857 5858 5859 5860 5861 5862 @__select_port def is_enabled ( self ) -> bool : \"\"\" Queries whether the output of the power supply is enabled. Returns: `True` = Enabled, `False` = Disabled \"\"\" cmd = \":OUTPut?\" status = bool ( int ( self . query ( cmd ))) return status","title":"is_enabled()"},{"location":"api/models/#pyinst.models.ModelE3631A.set_voltage_limit","text":"Sets the immediate voltage level of the power supply. Parameters: Name Type Description Default value int | float The voltage level in V. required Source code in pyinst\\models.py 5864 5865 5866 5867 5868 5869 5870 5871 5872 5873 5874 5875 @__select_port def set_voltage_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate voltage level of the power supply. Args: value: The voltage level in V. \"\"\" if not 0 <= value <= self . max_voltage : raise ValueError ( f \"The voltage limit value out of range: { value !r} \" ) cmd = f \":VOLTage { value : .4f } \" self . command ( cmd )","title":"set_voltage_limit()"},{"location":"api/models/#pyinst.models.ModelE3631A.get_voltage_limit","text":"Queries the immediate voltage level of the power supply. Returns: Type Description float The voltage level in V. Source code in pyinst\\models.py 5877 5878 5879 5880 5881 5882 5883 5884 5885 5886 5887 @__select_port def get_voltage_limit ( self ) -> float : \"\"\" Queries the immediate voltage level of the power supply. Returns: The voltage level in V. \"\"\" cmd = \":VOLTage?\" v = float ( self . query ( cmd )) return v","title":"get_voltage_limit()"},{"location":"api/models/#pyinst.models.ModelE3631A.measure_voltage","text":"Queries the voltage measured at the sense terminals of the power supply. Returns: Type Description float The voltage measured in V. Source code in pyinst\\models.py 5889 5890 5891 5892 5893 5894 5895 5896 5897 5898 5899 @__select_port def measure_voltage ( self ) -> float : \"\"\"Queries the voltage measured at the sense terminals of the power supply. Returns: The voltage measured in V. \"\"\" cmd = \":MEASure:VOLTage?\" v = float ( self . query ( cmd )) return v","title":"measure_voltage()"},{"location":"api/models/#pyinst.models.ModelE3631A.set_current_limit","text":"Sets the immediate current level of the power supply. Parameters: Name Type Description Default value int | float The current level in A. required Source code in pyinst\\models.py 5901 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 @__select_port def set_current_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate current level of the power supply. Args: value: The current level in A. \"\"\" if not 0 <= value <= self . max_current : raise ValueError ( f \"The current limit value out of range: { value !r} \" ) cmd = f \":CURRent { value : .4f } \" self . command ( cmd )","title":"set_current_limit()"},{"location":"api/models/#pyinst.models.ModelE3631A.get_current_limit","text":"Queries the immediate current level of the power supply. Returns: Type Description float The current level in A. Source code in pyinst\\models.py 5914 5915 5916 5917 5918 5919 5920 5921 5922 5923 5924 @__select_port def get_current_limit ( self ) -> float : \"\"\" Queries the immediate current level of the power supply. Returns: The current level in A. \"\"\" cmd = \":CURRent?\" i = float ( self . command ( cmd )) return i","title":"get_current_limit()"},{"location":"api/models/#pyinst.models.ModelE3631A.measure_current","text":"Queries the current measured across the current sense resistor inside the power supply. Returns: Type Description float The current measured in A. Source code in pyinst\\models.py 5926 5927 5928 5929 5930 5931 5932 5933 5934 5935 5936 @__select_port def measure_current ( self ) -> float : \"\"\"Queries the current measured across the current sense resistor inside the power supply. Returns: The current measured in A. \"\"\" cmd = \":MEASure:CURRent?\" i = float ( self . command ( cmd )) return i","title":"measure_current()"},{"location":"api/models/#pyinst.models.ModelE3633A","text":"Bases: VisaInstrument , TypePSwithOvpOcpFunctions Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required **kwargs Any directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 5949 5950 5951 5952 5953 5954 5955 def __init__ ( self , resource_name : str , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , ** kwargs )","title":"ModelE3633A"},{"location":"api/models/#pyinst.models.ModelE3633A.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelE3633A.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelE3633A.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelE3633A.set_output_range","text":"Selects an output range to be programmed. Note For model E3633A, the programming ranges are: LOW: 0 V to 8.24 V, 0 A to 20.60 A HIGH: 0 V to 20.60 V, 0 A to 10.30 A Parameters: Name Type Description Default option str \"LOW\" | \"HIGH\" required Source code in pyinst\\models.py 5957 5958 5959 5960 5961 5962 5963 5964 5965 5966 5967 5968 5969 5970 def set_output_range ( self , option : str ) -> None : \"\"\"Selects an output range to be programmed. Note: For model E3633A, the programming ranges are: - LOW: 0 V to 8.24 V, 0 A to 20.60 A - HIGH: 0 V to 20.60 V, 0 A to 10.30 A Args: option: `\"LOW\"` | `\"HIGH\"` \"\"\" cmd = f \":VOLTage:RANGe { option } \" self . command ( cmd )","title":"set_output_range()"},{"location":"api/models/#pyinst.models.ModelE3633A.get_output_range","text":"Queries current selected output range. Please refer to set_output_range() for more information. Returns: Type Description str \"LOW\" | \"HIGH\" Source code in pyinst\\models.py 5972 5973 5974 5975 5976 5977 5978 5979 def get_output_range ( self ) -> str : \"\"\"Queries current selected output range. Please refer to `set_output_range()` for more information. Returns: `\"LOW\"` | `\"HIGH\"` \"\"\"","title":"get_output_range()"},{"location":"api/models/#pyinst.models.ModelE3633A.min_voltage","text":"The minimum programmable voltage level in V. Source code in pyinst\\models.py 5981 5982 5983 5984 5985 5986 @property def min_voltage ( self ) -> float : \"\"\"The minimum programmable voltage level in V.\"\"\" cmd = \":VOLTage? MIN\" v = float ( self . query ( cmd )) return v","title":"min_voltage()"},{"location":"api/models/#pyinst.models.ModelE3633A.max_voltage","text":"The maximum programmable voltage level in V. Source code in pyinst\\models.py 5988 5989 5990 5991 5992 5993 @property def max_voltage ( self ) -> float : \"\"\"The maximum programmable voltage level in V.\"\"\" cmd = \":VOLTage? MAX\" v = float ( self . query ( cmd )) return v","title":"max_voltage()"},{"location":"api/models/#pyinst.models.ModelE3633A.min_current","text":"The minimum programmable current level in A. Source code in pyinst\\models.py 5995 5996 5997 5998 5999 6000 @property def min_current ( self ) -> float : \"\"\"The minimum programmable current level in A.\"\"\" cmd = \":CURRent? MIN\" i = float ( self . query ( cmd )) return i","title":"min_current()"},{"location":"api/models/#pyinst.models.ModelE3633A.max_current","text":"The maximum programmable current level in A. Source code in pyinst\\models.py 6002 6003 6004 6005 6006 6007 @property def max_current ( self ) -> float : \"\"\"The maximum programmable current level in A.\"\"\" cmd = \":CURRent? MAX\" i = float ( self . query ( cmd )) return i","title":"max_current()"},{"location":"api/models/#pyinst.models.ModelE3633A.enable","text":"Enables (or disables) the outputs of the power supply. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 6009 6010 6011 6012 6013 6014 6015 6016 6017 6018 6019 def enable ( self , en : bool = True ) -> None : \"\"\" Enables (or disables) the outputs of the power supply. Args: en: `True` = Enable, `False` = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = f ':OUTPut { [ \"OFF\" , \"ON\" ][ int ( en )] } ' self . command ( cmd )","title":"enable()"},{"location":"api/models/#pyinst.models.ModelE3633A.disable","text":"Disables the output of the power supply. Source code in pyinst\\models.py 6021 6022 6023 def disable ( self ) -> None : \"\"\"Disables the output of the power supply.\"\"\" self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.ModelE3633A.is_enabled","text":"Queries whether the output of the power supply is enabled. Returns: Type Description bool True = Enabled, False = Disabled Source code in pyinst\\models.py 6025 6026 6027 6028 6029 6030 6031 6032 6033 6034 def is_enabled ( self ) -> bool : \"\"\" Queries whether the output of the power supply is enabled. Returns: `True` = Enabled, `False` = Disabled \"\"\" cmd = \":OUTPut?\" status = bool ( int ( self . query ( cmd ))) return status","title":"is_enabled()"},{"location":"api/models/#pyinst.models.ModelE3633A.set_voltage_limit","text":"Sets the immediate voltage level of the power supply. Parameters: Name Type Description Default value int | float The voltage level in V. required Source code in pyinst\\models.py 6036 6037 6038 6039 6040 6041 6042 6043 6044 6045 6046 def set_voltage_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate voltage level of the power supply. Args: value: The voltage level in V. \"\"\" if not 0 <= value <= self . max_voltage : raise ValueError ( f \"The voltage limit value out of range: { value !r} \" ) cmd = f \":VOLTage { value : .4f } \" self . command ( cmd )","title":"set_voltage_limit()"},{"location":"api/models/#pyinst.models.ModelE3633A.get_voltage_limit","text":"Queries the immediate voltage level of the power supply. Returns: Type Description float The voltage level in V. Source code in pyinst\\models.py 6048 6049 6050 6051 6052 6053 6054 6055 6056 6057 def get_voltage_limit ( self ) -> float : \"\"\" Queries the immediate voltage level of the power supply. Returns: The voltage level in V. \"\"\" cmd = \":VOLTage?\" v = float ( self . query ( cmd )) return v","title":"get_voltage_limit()"},{"location":"api/models/#pyinst.models.ModelE3633A.measure_voltage","text":"Queries the voltage measured at the sense terminals of the power supply. Returns: Type Description float The voltage measured in V. Source code in pyinst\\models.py 6059 6060 6061 6062 6063 6064 6065 6066 6067 6068 def measure_voltage ( self ) -> float : \"\"\"Queries the voltage measured at the sense terminals of the power supply. Returns: The voltage measured in V. \"\"\" cmd = \":MEASure:VOLTage?\" v = float ( self . query ( cmd )) return v","title":"measure_voltage()"},{"location":"api/models/#pyinst.models.ModelE3633A.set_current_limit","text":"Sets the immediate current level of the power supply. Parameters: Name Type Description Default value int | float The current level in A. required Source code in pyinst\\models.py 6070 6071 6072 6073 6074 6075 6076 6077 6078 6079 6080 def set_current_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate current level of the power supply. Args: value: The current level in A. \"\"\" if not 0 <= value <= self . max_current : raise ValueError ( f \"The current limit value out of range: { value !r} \" ) cmd = f \":CURRent { value : .4f } \" self . command ( cmd )","title":"set_current_limit()"},{"location":"api/models/#pyinst.models.ModelE3633A.get_current_limit","text":"Queries the immediate current level of the power supply. Returns: Type Description float The current level in A. Source code in pyinst\\models.py 6082 6083 6084 6085 6086 6087 6088 6089 6090 6091 def get_current_limit ( self ) -> float : \"\"\" Queries the immediate current level of the power supply. Returns: The current level in A. \"\"\" cmd = \":CURRent?\" i = float ( self . command ( cmd )) return i","title":"get_current_limit()"},{"location":"api/models/#pyinst.models.ModelE3633A.measure_current","text":"Queries the current measured across the current sense resistor inside the power supply. Returns: Type Description float The current measured in A. Source code in pyinst\\models.py 6093 6094 6095 6096 6097 6098 6099 6100 6101 6102 def measure_current ( self ) -> float : \"\"\"Queries the current measured across the current sense resistor inside the power supply. Returns: The current measured in A. \"\"\" cmd = \":MEASure:CURRent?\" i = float ( self . command ( cmd )) return i","title":"measure_current()"},{"location":"api/models/#pyinst.models.ModelE3633A.set_ocp_level","text":"Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use is_ocp_tripped() to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the clear_ocp() method after the condition that caused the OCP trip is removed. Parameters: Name Type Description Default level int | float The OCP level in A. required Source code in pyinst\\models.py 6104 6105 6106 6107 6108 6109 6110 6111 6112 6113 6114 6115 6116 6117 6118 def set_ocp_level ( self , level : int | float ) -> None : \"\"\" Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use `is_ocp_tripped()` to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the `clear_ocp()` method after the condition that caused the OCP trip is removed. Args: level: The OCP level in A. \"\"\" cmd = f \":CURRent:PROTection { level : .4f } \" self . command ( cmd )","title":"set_ocp_level()"},{"location":"api/models/#pyinst.models.ModelE3633A.get_ocp_level","text":"Returns the overcurrent protection trip level presently programmed. See set_ocp_level() for more details. Returns: Type Description float The OCP level in A. Source code in pyinst\\models.py 6120 6121 6122 6123 6124 6125 6126 6127 6128 6129 6130 def get_ocp_level ( self ) -> float : \"\"\"Returns the overcurrent protection trip level presently programmed. See `set_ocp_level()` for more details. Returns: The OCP level in A. \"\"\" cmd = f \":CURRent:PROTection?\" ocp = float ( self . query ( cmd )) return ocp","title":"get_ocp_level()"},{"location":"api/models/#pyinst.models.ModelE3633A.enable_ocp","text":"Enables (or disables) the overcurrent protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\models.py 6132 6133 6134 6135 6136 6137 6138 6139 6140 6141 6142 def enable_ocp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overcurrent protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = f \":CURRent:PROTection:STATe { enable : d } \" self . command ( cmd )","title":"enable_ocp()"},{"location":"api/models/#pyinst.models.ModelE3633A.disable_ocp","text":"Disables the overcurrent protection function of the power supply. Source code in pyinst\\models.py 6144 6145 6146 6147 def disable_ocp ( self ) -> None : \"\"\"Disables the overcurrent protection function of the power supply. \"\"\" self . enable_ocp ( False )","title":"disable_ocp()"},{"location":"api/models/#pyinst.models.ModelE3633A.is_ocp_enabled","text":"Queries whether the overcurrent protection function of the power supply is enabled. Returns: Type Description bool Whether the OCP function is enabled. Source code in pyinst\\models.py 6149 6150 6151 6152 6153 6154 6155 6156 6157 6158 def is_ocp_enabled ( self ) -> bool : \"\"\"Queries whether the overcurrent protection function of the power supply is enabled. Returns: Whether the OCP function is enabled. \"\"\" cmd = \":CURRent:PROTection:STATe?\" enabled = bool ( int ( self . query ( cmd ))) return enabled","title":"is_ocp_enabled()"},{"location":"api/models/#pyinst.models.ModelE3633A.is_ocp_tripped","text":"Queries if the overcurrent protection circuit is tripped and not cleared. Returns: Type Description bool If the overcurrent protection circuit is tripped and not cleared. Source code in pyinst\\models.py 6160 6161 6162 6163 6164 6165 6166 6167 6168 6169 def is_ocp_tripped ( self ) -> bool : \"\"\"Queries if the overcurrent protection circuit is tripped and not cleared. Returns: If the overcurrent protection circuit is tripped and not cleared. \"\"\" cmd = \":CURRent:PROTection:TRIPped?\" tripped = bool ( int ( self . query ( cmd ))) return tripped","title":"is_ocp_tripped()"},{"location":"api/models/#pyinst.models.ModelE3633A.clear_ocp","text":"This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\models.py 6171 6172 6173 6174 6175 6176 6177 6178 6179 6180 6181 def clear_ocp ( self ) -> None : \"\"\"This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note: Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. \"\"\" cmd = \":CURRent:PROTection:CLEar\" self . command ( cmd )","title":"clear_ocp()"},{"location":"api/models/#pyinst.models.ModelE3633A.set_ovp_level","text":"Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use is_ovp_tripped() to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the clear_ovp() method after the condition that caused the OVP trip is removed. Parameters: Name Type Description Default level int | float The OVP level in V. required Source code in pyinst\\models.py 6183 6184 6185 6186 6187 6188 6189 6190 6191 6192 6193 6194 6195 6196 6197 def set_ovp_level ( self , level : int | float ) -> None : \"\"\" Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use `is_ovp_tripped()` to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the `clear_ovp()` method after the condition that caused the OVP trip is removed. Args: level: The OVP level in V. \"\"\" cmd = f \":VOLTage:PROTection { level : .4f } \" self . command ( cmd )","title":"set_ovp_level()"},{"location":"api/models/#pyinst.models.ModelE3633A.get_ovp_level","text":"Returns the overvoltage protection trip level presently programmed. See set_ovp_level() for more details. Returns: Type Description float The OVP level in V. Source code in pyinst\\models.py 6199 6200 6201 6202 6203 6204 6205 6206 6207 6208 6209 def get_ovp_level ( self ) -> float : \"\"\"Returns the overvoltage protection trip level presently programmed. See `set_ovp_level()` for more details. Returns: The OVP level in V. \"\"\" cmd = \":VOLTage:PROTection?\" ovp = float ( self . query ( cmd )) return ovp","title":"get_ovp_level()"},{"location":"api/models/#pyinst.models.ModelE3633A.enable_ovp","text":"Enables (or disables) the overvoltage protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\models.py 6211 6212 6213 6214 6215 6216 6217 6218 6219 6220 6221 def enable_ovp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overvoltage protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = f \":VOLTage:PROTection:STATe { enable : d } \" self . command ( cmd )","title":"enable_ovp()"},{"location":"api/models/#pyinst.models.ModelE3633A.disable_ovp","text":"Disables the overvoltage protection function of the power supply. Source code in pyinst\\models.py 6223 6224 6225 6226 def disable_ovp ( self ) -> None : \"\"\"Disables the overvoltage protection function of the power supply. \"\"\" self . enable_ovp ( False )","title":"disable_ovp()"},{"location":"api/models/#pyinst.models.ModelE3633A.is_ovp_enabled","text":"Queries whether the overvoltage protection function of the power supply is enabled. Returns: Type Description bool Whether the OVP function is enabled. Source code in pyinst\\models.py 6228 6229 6230 6231 6232 6233 6234 6235 6236 6237 def is_ovp_enabled ( self ) -> bool : \"\"\"Queries whether the overvoltage protection function of the power supply is enabled. Returns: Whether the OVP function is enabled. \"\"\" cmd = \":VOLTage:PROTection:STATe?\" enabled = bool ( int ( self . query ( cmd ))) return enabled","title":"is_ovp_enabled()"},{"location":"api/models/#pyinst.models.ModelE3633A.is_ovp_tripped","text":"Queries if the overvoltage protection circuit is tripped and not cleared. Returns: Type Description bool If the overvoltage protection circuit is tripped and not cleared. Source code in pyinst\\models.py 6239 6240 6241 6242 6243 6244 6245 6246 6247 6248 def is_ovp_tripped ( self ) -> bool : \"\"\"Queries if the overvoltage protection circuit is tripped and not cleared. Returns: If the overvoltage protection circuit is tripped and not cleared. \"\"\" cmd = \":VOLTage:PROTection:TRIPped?\" tripped = bool ( int ( self . query ( cmd ))) return tripped","title":"is_ovp_tripped()"},{"location":"api/models/#pyinst.models.ModelE3633A.clear_ovp","text":"This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\models.py 6250 6251 6252 6253 6254 6255 6256 6257 6258 6259 6260 6261 def clear_ovp ( self ) -> None : \"\"\"This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note: Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. \"\"\" cmd = \":VOLTage:PROTection:CLEar\" self . command ( cmd )","title":"clear_ovp()"},{"location":"api/models/#pyinst.models.ModelPDLE101","text":"Bases: VisaInstrument , TypePDLE Source code in pyinst\\models.py 6278 6279 6280 6281 def __init__ ( self , resource_name : str , write_termination : str = '' , read_termination : str = '#' , ** kwargs : Any ) -> None : super ( ModelPDLE101 , self ) . __init__ ( resource_name , write_termination = write_termination , read_termination = read_termination , ** kwargs )","title":"ModelPDLE101"},{"location":"api/models/#pyinst.models.ModelPDLE101.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelPDLE101.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelPDLE101.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelPDLE101.opc","text":"Source code in pyinst\\models.py 6286 6287 6288 6289 @property def opc ( self ): # PDLE-101 does not support *OPC query, return '1' for compliance return '1'","title":"opc()"},{"location":"api/models/#pyinst.models.ModelPDLE101.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 6291 6292 6293 6294 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelPDLE101.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 6296 6297 6298 6299 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelPDLE101.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 6301 6302 6303 6304 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1520.0","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelPDLE101.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 6306 6307 6308 6309 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1570.0","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelPDLE101.min_pdl","text":"The minimum settable PDL value. Source code in pyinst\\models.py 6311 6312 6313 6314 @property def min_pdl ( self ) -> float : \"\"\"The minimum settable PDL value.\"\"\" return 0.1","title":"min_pdl()"},{"location":"api/models/#pyinst.models.ModelPDLE101.max_pdl","text":"The maximum settable PDL value. Source code in pyinst\\models.py 6316 6317 6318 6319 @property def max_pdl ( self ) -> float : \"\"\"The maximum settable PDL value.\"\"\" return 20.0","title":"max_pdl()"},{"location":"api/models/#pyinst.models.ModelPDLE101.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 6321 6322 6323 6324 6325 6326 6327 6328 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelPDLE101.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 6330 6331 6332 6333 6334 6335 6336 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelPDLE101.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 6338 6339 6340 6341 6342 6343 6344 6345 6346 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \"*WAV?\" wl = float ( self . __format_result ( self . query ( cmd ))) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelPDLE101.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 6348 6349 6350 6351 6352 6353 6354 6355 6356 6357 6358 6359 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"The parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \"*WAV { round ( wavelength ) : d } #\" err_code = self . __format_result ( self . query ( cmd )) if err_code != 'E00' : raise Error ( f 'Error code: { err_code } ' )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelPDLE101.set_pdl_value","text":"Parameters: Name Type Description Default value int | float The PDL setting value in dB. required Source code in pyinst\\models.py 6361 6362 6363 6364 6365 6366 6367 6368 6369 6370 6371 def set_pdl_value ( self , value : int | float ) -> None : \"\"\" Args: value: The PDL setting value in dB. \"\"\" if not self . min_pdl <= value <= self . max_pdl : raise ValueError ( f \"The parameter value is out of range: { value !r} \" ) cmd = f '*PDL { value : .1f } #' err_code = self . __format_result ( self . query ( cmd )) if err_code != 'E00' : raise Error ( f 'Error code: { err_code } ' )","title":"set_pdl_value()"},{"location":"api/models/#pyinst.models.ModelPDLE101.get_pdl_value","text":"Returns: Type Description float The PDL setting value in dB. Source code in pyinst\\models.py 6373 6374 6375 6376 6377 6378 6379 6380 def get_pdl_value ( self ) -> float : \"\"\" Returns: The PDL setting value in dB. \"\"\" cmd = '*PDL?' pdl = float ( self . __format_result ( self . query ( cmd ))) return pdl","title":"get_pdl_value()"},{"location":"api/models/#pyinst.models.ModelPSY201","text":"Bases: VisaInstrument , TypePOLC Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\models.py 6394 6395 6396 6397 6398 6399 6400 6401 6402 6403 6404 def __init__ ( self , resource_name : str , write_termination : str = ' \\r\\n ' , read_termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super ( ModelPSY201 , self ) . __init__ ( resource_name , write_termination = write_termination , read_termination = read_termination , ** kwargs )","title":"ModelPSY201"},{"location":"api/models/#pyinst.models.ModelPSY201.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelPSY201.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelPSY201.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelPSY201.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 6406 6407 6408 6409 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelPSY201.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 6411 6412 6413 6414 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelPSY201.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 6416 6417 6418 6419 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1480.0","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelPSY201.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 6421 6422 6423 6424 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1620.0","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelPSY201.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 6426 6427 6428 6429 6430 6431 6432 6433 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelPSY201.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 6435 6436 6437 6438 6439 6440 6441 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelPSY201.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 6443 6444 6445 6446 6447 6448 6449 6450 6451 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":CONFigure:WLENgth?\" wl = float ( self . query ( cmd )) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelPSY201.set_wavelength","text":"Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Parameters: Name Type Description Default wavelength int | float The optical wavelength in nm. required Source code in pyinst\\models.py 6453 6454 6455 6456 6457 6458 6459 6460 6461 6462 6463 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Args: wavelength: The optical wavelength in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \":CONFigure:WLENgth { wavelength : d } \" self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelPSY201.get_sop","text":"Query measured SOP (Stokes parameters) S1, S2, S3. Returns: Type Description Tuple [ float , float , float ] The stokes parameters S1, S2, S3. Source code in pyinst\\models.py 6519 6520 6521 6522 6523 6524 6525 6526 6527 def get_sop ( self ) -> Tuple [ float , float , float ]: \"\"\"Query measured SOP (Stokes parameters) S1, S2, S3. Returns: The stokes parameters S1, S2, S3. \"\"\" cmd = \":MEASure:SOP? \" s1 , s2 , s3 = ( float ( i ) for i in self . query ( cmd ) . split ( ',' )) return s1 , s2 , s3","title":"get_sop()"},{"location":"api/models/#pyinst.models.ModelPSY201.get_dop","text":"Query measured degree of polarization. Returns: Type Description float The degree of polarization. Source code in pyinst\\models.py 6529 6530 6531 6532 6533 6534 6535 6536 6537 def get_dop ( self ) -> float : \"\"\"Query measured degree of polarization. Returns: The degree of polarization. \"\"\" cmd = ':MEASure:DOP?' dop = float ( self . query ( cmd )) return dop","title":"get_dop()"},{"location":"api/models/#pyinst.models.ModelPSY201.set_sop","text":"Set SOP by Stokes parameters and enable tracking. Parameters: Name Type Description Default s1 int | float 1st dimention of the Stokes parameters. required s2 int | float 2nd dimention of the Stokes parameters. required s3 int | float 3rd dimention of the Stokes parameters. required Tips Stokes parameters are auto-normalized to unit vector before tracking: SOP will be set to (s1/A, s2/A, s3/A) where A = sqrt(s1*s1, s2*s2, s3*s3) Note s1=s2=s3=0 is not allowed. Source code in pyinst\\models.py 6539 6540 6541 6542 6543 6544 6545 6546 6547 6548 6549 6550 6551 6552 6553 6554 6555 6556 6557 6558 6559 6560 6561 def set_sop ( self , s1 : int | float , s2 : int | float , s3 : int | float ) -> None : \"\"\"Set SOP by Stokes parameters and enable tracking. Args: s1: 1st dimention of the Stokes parameters. s2: 2nd dimention of the Stokes parameters. s3: 3rd dimention of the Stokes parameters. Tips: Stokes parameters are auto-normalized to unit vector before tracking: SOP will be set to `(s1/A, s2/A, s3/A)` where `A = sqrt(s1*s1, s2*s2, s3*s3)` Note: `s1=s2=s3=0` is not allowed. \"\"\" if s1 == s2 == s3 == 0 : raise ValueError ( \"s1=s2=s3=0 is not allowed.\" ) cmd = f \":CONTrol:SOP { s1 : .2f } , { s2 : .2f } , { s3 : .2f } \" self . command ( cmd )","title":"set_sop()"},{"location":"api/models/#pyinst.models.ModelPSY201.set_sop_in_spherical","text":"Set SOP in spherical coordinates and enable tracking. Parameters: Name Type Description Default theta int | float 1st dimension in degree of the spherical coordinates. 0 to 360 (degrees). required phi int | float 2nd dimention in degree of the spherical cordinates. 0 to 180 (degrees). required Source code in pyinst\\models.py 6563 6564 6565 6566 6567 6568 6569 6570 6571 6572 6573 6574 6575 def set_sop_in_spherical ( self , theta : int | float , phi : int | float ) -> None : \"\"\" Set SOP in spherical coordinates and enable tracking. Args: theta: 1st dimension in degree of the spherical coordinates. 0 to 360 (degrees). phi: 2nd dimention in degree of the spherical cordinates. 0 to 180 (degrees). \"\"\" if not 0 <= theta <= 360 : raise ValueError ( f \"Parameter theta is out of range: { theta !r} \" ) if not 0 <= phi <= 180 : raise ValueError ( f \"Parameter phi is out of range: { phi !r} \" ) cmd = f \":CONTrol:ANGLe { theta : .2f } , { phi : .2f } \" self . command ( cmd )","title":"set_sop_in_spherical()"},{"location":"api/models/#pyinst.models.ModelPSY201.start_scrambling","text":"Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. DISCrete : Discrete scrambling. TRIangle : Triangle scrambling. TORNado : Tornado scrambling. Additional scrambling parameter _type is required. required rate int | float Scrambling rate. Different mode may have different units. required **params Any Additional scrambling params if any. _type (int) : For TORNado mode only. 0 = Fixed axis, 1 = Rotating axis. {} Note Different mode has different unit for scrambling rate: Discrete: points/s Triangle: 2\u03c0 rad/s Tornado: rev/s Source code in pyinst\\models.py 6577 6578 6579 6580 6581 6582 6583 6584 6585 6586 6587 6588 6589 6590 6591 6592 6593 6594 6595 6596 6597 6598 6599 6600 6601 6602 6603 6604 6605 def start_scrambling ( self , mode : str , rate : int | float , ** params : Any ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `DISCrete`: Discrete scrambling. - `TRIangle`: Triangle scrambling. - `TORNado`: Tornado scrambling. Additional scrambling parameter `_type` is required. rate: Scrambling rate. Different mode may have different units. **params: Additional scrambling params if any. * `_type (int)`: For `TORNado` mode only. `0` = Fixed axis, `1` = Rotating axis. Note: Different mode has different unit for scrambling rate: - Discrete: points/s - Triangle: 2\u03c0 rad/s - Tornado: rev/s \"\"\" if mode . upper () . startswith ( 'DISC' ): self . _discrete_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TRI' ): self . _triangle_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TORN' ): self . _tornado_scramble ( True , _type = params [ '_type' ], rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" )","title":"start_scrambling()"},{"location":"api/models/#pyinst.models.ModelPSY201.stop_scrambling","text":"Stop scrambling. Source code in pyinst\\models.py 6607 6608 6609 def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" self . _tornado_scramble ( False )","title":"stop_scrambling()"},{"location":"api/models/#pyinst.models.ModelPSY101","text":"Bases: VisaInstrument , TypePOLC Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '#' write_termination str Write termination character. '' **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\models.py 6623 6624 6625 6626 6627 6628 6629 6630 6631 def __init__ ( self , resource_name : str , read_termination : str = '#' , write_termination : str = '' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs )","title":"ModelPSY101"},{"location":"api/models/#pyinst.models.ModelPSY101.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelPSY101.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelPSY101.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelPSY101.opc","text":"Source code in pyinst\\models.py 6636 6637 6638 6639 @property def opc ( self ): # PSY-101 does not support *OPC query, return '1' for compliance return '1'","title":"opc()"},{"location":"api/models/#pyinst.models.ModelPSY101.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 6641 6642 6643 6644 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelPSY101.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 6646 6647 6648 6649 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelPSY101.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 6651 6652 6653 6654 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1500.0","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelPSY101.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 6656 6657 6658 6659 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1600.0","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelPSY101.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 6661 6662 6663 6664 6665 6666 6667 6668 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelPSY101.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 6670 6671 6672 6673 6674 6675 6676 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelPSY101.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 6678 6679 6680 6681 6682 6683 6684 6685 6686 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \"*WAV?\" wl = float ( self . __format_result ( self . query ( cmd ))) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelPSY101.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 6688 6689 6690 6691 6692 6693 6694 6695 6696 6697 6698 6699 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"The parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \"*WAV { round ( wavelength ) : d } #\" err_code = self . __format_result ( self . query ( cmd )) if err_code != 'E00' : raise Error ( f 'Error code: { err_code } ' )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelPSY101.start_scrambling","text":"Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. RANdom : Random scrambling. SAW : Saw wave scrambling. required rate int | float Scrambling rate in Hz. required **params Any Not used for PSY-101. {} Source code in pyinst\\models.py 6741 6742 6743 6744 6745 6746 6747 6748 6749 6750 6751 6752 6753 6754 6755 6756 6757 6758 def start_scrambling ( self , mode : str , rate : int | float , ** params : Any ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `RANdom`: Random scrambling. - `SAW`: Saw wave scrambling. rate: Scrambling rate in Hz. **params: Not used for PSY-101. \"\"\" if mode . upper () . startswith ( 'RAN' ): self . _random_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'SAW' ): self . _saw_scramble ( True , rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" )","title":"start_scrambling()"},{"location":"api/models/#pyinst.models.ModelPSY101.stop_scrambling","text":"Stop scrambling. Source code in pyinst\\models.py 6760 6761 6762 def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" self . _random_scramble ( False )","title":"stop_scrambling()"},{"location":"api/models/#pyinst.models.ModelMPC202","text":"Bases: VisaInstrument , TypePOLC Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\models.py 6780 6781 6782 6783 6784 6785 6786 6787 6788 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs )","title":"ModelMPC202"},{"location":"api/models/#pyinst.models.ModelMPC202.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelMPC202.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelMPC202.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelMPC202.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 6790 6791 6792 6793 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelMPC202.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 6795 6796 6797 6798 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelMPC202.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 6800 6801 6802 6803 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1260.0","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelMPC202.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 6805 6806 6807 6808 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1650.0","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelMPC202.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 6810 6811 6812 6813 6814 6815 6816 6817 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelMPC202.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 6819 6820 6821 6822 6823 6824 6825 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelMPC202.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 6827 6828 6829 6830 6831 6832 6833 6834 6835 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":CONFigure:WLENgth?\" wl = float ( self . query ( cmd )) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelMPC202.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 6837 6838 6839 6840 6841 6842 6843 6844 6845 6846 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \":CONFigure:WLENgth { wavelength : d } \" self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelMPC202.start_scrambling","text":"Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. DISCrete : Discrete scrambling. TRIangle : Triangle scrambling. RAYLeigh : Rayleigh scrambling. TORNado : Tornado scrambling. Additional scrambling parameter _type is required. required rate int | float Scrambling rate. Different mode may have different units. required **params Any Additional scrambling params if any. _type (int) : For TORNado mode only. 0 = Fixed axis, 1 = Rotating axis. {} Note Different mode has different unit for scrambling rate: Discrete: points/s Triangle: 2\u03c0 rad/s Rayleigh: rad/s Tornado: rev/s Source code in pyinst\\models.py 6918 6919 6920 6921 6922 6923 6924 6925 6926 6927 6928 6929 6930 6931 6932 6933 6934 6935 6936 6937 6938 6939 6940 6941 6942 6943 6944 6945 6946 6947 6948 6949 6950 def start_scrambling ( self , mode : str , rate : int | float , ** params : Any ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `DISCrete`: Discrete scrambling. - `TRIangle`: Triangle scrambling. - `RAYLeigh`: Rayleigh scrambling. - `TORNado`: Tornado scrambling. Additional scrambling parameter `_type` is required. rate: Scrambling rate. Different mode may have different units. **params: Additional scrambling params if any. * `_type (int)`: For `TORNado` mode only. `0` = Fixed axis, `1` = Rotating axis. Note: Different mode has different unit for scrambling rate: - Discrete: points/s - Triangle: 2\u03c0 rad/s - Rayleigh: rad/s - Tornado: rev/s \"\"\" if mode . upper () . startswith ( 'DISC' ): self . _discrete_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TRI' ): self . _triangle_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'RAYL' ): self . _rayleigh_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TORN' ): self . _tornado_scramble ( True , _type = params [ '_type' ], rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" )","title":"start_scrambling()"},{"location":"api/models/#pyinst.models.ModelMPC202.stop_scrambling","text":"Stop scrambling. Source code in pyinst\\models.py 6952 6953 6954 def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" self . _tornado_scramble ( False )","title":"stop_scrambling()"},{"location":"api/models/#pyinst.models.ModelEPS1000","text":"Bases: BaseInstrument , TypePOLC Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required timeout int | float Timeout in milliseconds for all resource I/O operations. 3 **kwargs Any Directly passed to rm.open_resource . {} Source code in pyinst\\models.py 6969 6970 6971 6972 6973 6974 6975 6976 6977 6978 6979 6980 6981 6982 6983 6984 6985 6986 6987 6988 6989 6990 6991 6992 6993 6994 6995 6996 6997 6998 def __init__ ( self , resource_name : str , timeout : int | float = 3 , ** kwargs : Any ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. timeout: Timeout in milliseconds for all resource I/O operations. **kwargs: Directly passed to `rm.open_resource`. \"\"\" super () . __init__ ( resource_name , ** kwargs ) baudrate = 230400 device_list = ftd . listDevices () for i in range ( len ( device_list )): desc = ftd . getDeviceInfoDetail ( i )[ \"description\" ] . decode () if desc . startswith ( 'EPS1000' ): sn = desc . split ()[ - 1 ] else : continue if resource_name . endswith ( sn ): self . __device_num = i break else : raise ValueError ( 'Device not found: {model} | S/N: {sn} ' . format ( model = self . model , sn = resource_name )) self . __device = ftd . open ( self . __device_num ) self . __device . setBaudRate ( baudrate ) self . __device . setDataCharacteristics ( 8 , 0 , 0 ) self . __device . setTimeouts ( round ( timeout * 1000 ), round ( timeout * 1000 )) self . __connected = True","title":"ModelEPS1000"},{"location":"api/models/#pyinst.models.ModelEPS1000.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelEPS1000.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelEPS1000.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelEPS1000.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 7000 7001 7002 7003 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelEPS1000.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 7005 7006 7007 7008 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelEPS1000.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 7010 7011 7012 7013 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return 1510.3","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelEPS1000.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 7015 7016 7017 7018 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return 1639.1","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelEPS1000.close","text":"Release the instrument resource. Source code in pyinst\\models.py 7020 7021 7022 7023 def close ( self ) -> None : \"\"\"Release the instrument resource.\"\"\" self . __device . close () self . __connected = False","title":"close()"},{"location":"api/models/#pyinst.models.ModelEPS1000.set_qwp","text":"qwp_n = 0, 1, 2, 3, 4, 5 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (rad/s) Source code in pyinst\\models.py 7063 7064 7065 7066 7067 7068 7069 7070 7071 7072 7073 7074 7075 7076 7077 7078 7079 7080 7081 7082 7083 7084 7085 7086 def set_qwp ( self , qwp_n , direction , speed ) -> None : \"\"\" qwp_n = 0, 1, 2, 3, 4, 5 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (rad/s) \"\"\" control_reg_addr = qwp_n + 1 speed_reg_addr0 = qwp_n * 2 + 11 speed_reg_addr1 = qwp_n * 2 + 12 if direction == 0 : self . __write_register ( control_reg_addr , 0 ) elif direction == 1 : self . __write_register ( control_reg_addr , 1 ) elif direction == - 1 : self . __write_register ( control_reg_addr , 3 ) else : raise ValueError ( 'Invalid value for direction: {} . Options: 0(Disabled), 1(Forward), -1(Backward)' . format ( direction )) speed_msb = int (( speed * 100 ) / ( 2 ** 16 )) & 0xffff speed_lsb = int (( speed * 100 )) & 0xffff self . __write_register ( speed_reg_addr0 , speed_lsb ) self . __write_register ( speed_reg_addr1 , speed_msb )","title":"set_qwp()"},{"location":"api/models/#pyinst.models.ModelEPS1000.set_hwp","text":"direction = 0(Disabled), 1(Forward), -1(Backward) speed = (krad/s) Source code in pyinst\\models.py 7088 7089 7090 7091 7092 7093 7094 7095 7096 7097 7098 7099 7100 7101 7102 7103 7104 7105 7106 7107 7108 7109 7110 7111 7112 def set_hwp ( self , direction , speed ) -> None : \"\"\" direction = 0(Disabled), 1(Forward), -1(Backward) speed = (krad/s) \"\"\" control_reg_addr = 0 speed_reg_addr0 = 9 speed_reg_addr1 = 10 if direction == 0 : self . __write_register ( control_reg_addr , 0 ) elif direction == 1 : self . __write_register ( control_reg_addr , 1 ) elif direction == - 1 : self . __write_register ( control_reg_addr , 3 ) else : raise ValueError ( 'Invalid value for direction: {} . Options: 0(Disabled), 1(Forward), -1(Backward)' . format ( direction )) speed_msb = int (( speed * 100 ) / ( 2 ** 16 )) & 0xffff speed_lsb = int (( speed * 100 )) & 0xffff self . __write_register ( speed_reg_addr0 , speed_lsb ) self . __write_register ( speed_reg_addr1 , speed_msb )","title":"set_hwp()"},{"location":"api/models/#pyinst.models.ModelEPS1000.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 7114 7115 7116 7117 7118 7119 7120 7121 7122 7123 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" value = int ( self . __read_register ( addr = 25 )) freq = ( value + 1828 ) / 10 return freq","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelEPS1000.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 7125 7126 7127 7128 7129 7130 7131 7132 7133 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" value = round ( frequency * 10 - 1828 ) self . write_register ( addr = 25 , data = value ) time . sleep ( 0.1 )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelEPS1000.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 7135 7136 7137 7138 7139 7140 7141 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return super () . get_wavelength ()","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelEPS1000.set_wavelength","text":"Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Parameters: Name Type Description Default wavelength int | float The optical wavelength in nm. required Source code in pyinst\\models.py 7143 7144 7145 7146 7147 7148 7149 7150 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Args: wavelength: The optical wavelength in nm. \"\"\" return super () . set_wavelength ( wavelength )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelEPS1000.start_scrambling","text":"speed unit: rad/s when mode is 'Peaked', the max rate is 2000000rad/s when mode is 'Rayleigh', the max rate is 1000000rad/s when mode is 'Marvell', the unit is rad/s Source code in pyinst\\models.py 7152 7153 7154 7155 7156 7157 7158 7159 7160 7161 7162 7163 7164 7165 7166 7167 7168 7169 7170 7171 7172 7173 7174 7175 7176 7177 7178 7179 7180 7181 7182 7183 7184 7185 7186 7187 7188 7189 7190 7191 7192 7193 7194 7195 7196 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : ''' speed unit: rad/s when mode is 'Peaked', the max rate is 2000000rad/s when mode is 'Rayleigh', the max rate is 1000000rad/s when mode is 'Marvell', the unit is rad/s ''' speed = rate if mode == 'Peaked' : if 0 <= speed <= 20000000 : speed_10 = round ( speed / 10 ) lsb = speed_10 & 0xFFFF msb = ( 2 << 14 ) | ( speed_10 >> 16 ) self . write_register ( addr = 23 , data = lsb ) self . write_register ( addr = 24 , data = msb ) else : raise ValueError ( \"Speed is out of range, the max speed of 'Peaked' mode is 2000000rad/s\" ) elif mode == 'Rayleigh' : if 0 <= speed <= 10000000 : speed_10 = round ( speed / 10 ) lsb = speed_10 & 0xFFFF msb = ( 3 << 14 ) | ( speed_10 >> 16 ) self . write_register ( addr = 23 , data = lsb ) self . write_register ( addr = 24 , data = msb ) else : raise ValueError ( \"Speed is out of range, the max speed of 'Rayleigh' mode is 1000000rad/s\" ) elif mode == 'Marvell' : self . stop_scrambling () self . write_register ( addr = 23 , data = 0 ) self . write_register ( addr = 24 , data = 0 ) time . sleep ( 0.1 ) qwp_speed = speed / 6 offset = 0.02 self . set_qwp ( qwp_n = 0 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_qwp ( qwp_n = 1 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) self . set_qwp ( qwp_n = 2 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_hwp ( direction =- 1 , speed = 0.01 ) # -1 is backward. 0.01 could be just rad/s self . set_qwp ( qwp_n = 3 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) self . set_qwp ( qwp_n = 4 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_qwp ( qwp_n = 5 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) if qwp_speed < 10 : self . set_hwp ( direction = 0 , speed = 0 )","title":"start_scrambling()"},{"location":"api/models/#pyinst.models.ModelEPS1000.stop_scrambling","text":"Stop scrambling. Source code in pyinst\\models.py 7198 7199 7200 def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" self . start_scrambling ( 'Peaked' , 0 )","title":"stop_scrambling()"},{"location":"api/models/#pyinst.models.ModelPMD1000","text":"Bases: VisaInstrument , TypePMDE Source code in pyinst\\models.py 7213 7214 def __init__ ( self , resource_name : str , read_termination : str = '#' , write_termination : str = '' , ** kwargs : Any ): super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs )","title":"ModelPMD1000"},{"location":"api/models/#pyinst.models.ModelPMD1000.model","text":"","title":"model"},{"location":"api/models/#pyinst.models.ModelPMD1000.brand","text":"","title":"brand"},{"location":"api/models/#pyinst.models.ModelPMD1000.details","text":"","title":"details"},{"location":"api/models/#pyinst.models.ModelPMD1000.opc","text":"Source code in pyinst\\models.py 7219 7220 7221 7222 @property def opc ( self ): # PMD1000 does not support *OPC query, return '1' for compliance return '1'","title":"opc()"},{"location":"api/models/#pyinst.models.ModelPMD1000.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 7224 7225 7226 7227 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return 191.6","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelPMD1000.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 7229 7230 7231 7232 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return 195.9","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelPMD1000.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 7234 7235 7236 7237 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return super () . min_wavelength","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelPMD1000.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 7239 7240 7241 7242 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return super () . max_wavelength","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelPMD1000.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 7244 7245 7246 7247 7248 7249 7250 7251 7252 7253 7254 7255 7256 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" ch_str = self . _formatted_query ( '*CHA?' ) if ch_str [ 0 ] != 'C' : raise ValueError ( 'Unexpected Reply' ) ch = int ( ch_str [ 1 :]) freq = 191.6 + ( ch - 1 ) * 0.05 return freq","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelPMD1000.set_frequency","text":"Set optical frequency value. Note The PMD-1000 can only set to several discrete values on the ITU C-band: frequency = 191.6 + n*0.05, 0 <= n <= 86 If the frequency is not on the ITU grid, it will be set to the nearest valid value, and no exception will be raised. Parameters: Name Type Description Default frequency int | float optical frequency in THz. required Source code in pyinst\\models.py 7258 7259 7260 7261 7262 7263 7264 7265 7266 7267 7268 7269 7270 7271 7272 7273 7274 7275 7276 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency value. Note: The PMD-1000 can only set to several discrete values on the ITU C-band: frequency = 191.6 + n*0.05, 0 <= n <= 86 If the frequency is not on the ITU grid, it will be set to the nearest valid value, and no exception will be raised. Args: frequency: optical frequency in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f 'frequency is out of range: { frequency !r} ' ) ch = round (( frequency - 191.6 ) / 0.05 ) + 1 self . query ( '*CHC %03d #' % ch )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelPMD1000.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 7278 7279 7280 7281 7282 7283 7284 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return super () . get_wavelength ()","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelPMD1000.set_wavelength","text":"Set optical wavelength. Please refer to set_frequency . Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 7286 7287 7288 7289 7290 7291 7292 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Please refer to `set_frequency`. Args: wavelength: The optical wavelength setting in nm. \"\"\" return super () . set_wavelength ( wavelength )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelPMD1000.get_pmd_value","text":"Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: Name Type Description pmd float The DGD value in ps. sopmd float The 2nd order pmd in ps**2. Source code in pyinst\\models.py 7294 7295 7296 7297 7298 7299 7300 7301 7302 7303 7304 7305 def get_pmd_value ( self ) -> Tuple [ float , float ]: \"\"\" Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\" cmd = \"*PMD:CON CAL?\" r = self . _formatted_query ( cmd ) pmd , sopmd = ( float ( i ) for i in r . split ( ',' )) return pmd , sopmd","title":"get_pmd_value()"},{"location":"api/models/#pyinst.models.ModelPMD1000.set_pmd_value","text":"Set PMD (DGD) and SOPMD (Second Order PMD) target value. Parameters: Name Type Description Default pmd int | float The DGD value in ps. required sopmd int | float The 2nd order pmd in ps**2. required Note The pmd and sopmd setting of the PMD-1000 is not continuous. The pmd and sopmd will be set to the nearest supported values, so the real value will not be exactly the same with the setting values. Source code in pyinst\\models.py 7307 7308 7309 7310 7311 7312 7313 7314 7315 7316 7317 7318 7319 7320 7321 7322 7323 7324 7325 7326 def set_pmd_value ( self , pmd : int | float , sopmd : int | float ) -> None : \"\"\" Set PMD (DGD) and SOPMD (Second Order PMD) target value. Args: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. Note: The pmd and sopmd setting of the PMD-1000 is not continuous. The pmd and sopmd will be set to the nearest supported values, so the real value will not be exactly the same with the setting values. \"\"\" if not 0 <= pmd <= 182.4 : raise ValueError ( f 'pmd is out of range: { pmd } ' ) if not 0 <= sopmd <= 8319.9 : raise ValueError ( f 'sopmd is out of range: { sopmd } ' ) err_code = self . _formatted_query ( '*PMD:CON %.2f , %.2f #' % ( pmd , sopmd )) if err_code != 'E00' : raise ValueError ( f 'Error code = { err_code } ' )","title":"set_pmd_value()"},{"location":"development/class-hierarchy/","text":"Class Hierarchy \u00a4 The main part of PyInst is a series of Instrument Model classes, which are used to communicate with corresponding instruments. pyinst.abc module is used to define interfaces for these classes. In addition, PyInst includes some constants, error types, and utility functions. This page describes the basic inheritance structure of these classes. BaseInstrument is the base class of all the Instrument Model classes. It has 2 subclasses: VisaInstrument and RawSerialInstrument . VisaInstrument is the base class to communicate with VISA compatible instruments. RawSerialInstrument is used on instruments that communicate with serial but is not compatible with VISA standard. Every Instrument Model class should inherit the BaseInstrument class or its subclasses. The Instrument Model class should also inherit one or more Instrument Type classes in the abc module. These abstract classes in the abc module defines abstract interfaces for the Instrument Model classes. Here are some example class diagrams (not all properties and methods are listed): VISA compatible instrument classDiagram class BaseInstrument { model ins_type ... close() create() } class VisaInstrument { idn opc ... query() command() } class TypeVOA { min_att max_att ... get_att() set_att() } class BaseModelN77xx_VOA_with_OPM { min_frequency max_frequency ... get_att() set_att() } class ModelN7764A { } BaseInstrument <|-- VisaInstrument VisaInstrument <|-- BaseModelN77xx_VOA_with_OPM TypeVOA <|-- BaseModelN77xx_VOA_with_OPM BaseModelN77xx_VOA_with_OPM <|-- ModelN7764A Raw serial instrument classDiagram class BaseInstrument { model ins_type ... close() create() } class RawSerialInstrument { command() query() } class TypeTS { get_current_temp() get_target_temp() } class ModelMC811 { ts_type run() is_running() } BaseInstrument <|-- RawSerialInstrument RawSerialInstrument <|-- ModelMC811 TypeTS <|-- ModelMC811","title":"Class Hierarchy"},{"location":"development/class-hierarchy/#class-hierarchy","text":"The main part of PyInst is a series of Instrument Model classes, which are used to communicate with corresponding instruments. pyinst.abc module is used to define interfaces for these classes. In addition, PyInst includes some constants, error types, and utility functions. This page describes the basic inheritance structure of these classes. BaseInstrument is the base class of all the Instrument Model classes. It has 2 subclasses: VisaInstrument and RawSerialInstrument . VisaInstrument is the base class to communicate with VISA compatible instruments. RawSerialInstrument is used on instruments that communicate with serial but is not compatible with VISA standard. Every Instrument Model class should inherit the BaseInstrument class or its subclasses. The Instrument Model class should also inherit one or more Instrument Type classes in the abc module. These abstract classes in the abc module defines abstract interfaces for the Instrument Model classes. Here are some example class diagrams (not all properties and methods are listed): VISA compatible instrument classDiagram class BaseInstrument { model ins_type ... close() create() } class VisaInstrument { idn opc ... query() command() } class TypeVOA { min_att max_att ... get_att() set_att() } class BaseModelN77xx_VOA_with_OPM { min_frequency max_frequency ... get_att() set_att() } class ModelN7764A { } BaseInstrument <|-- VisaInstrument VisaInstrument <|-- BaseModelN77xx_VOA_with_OPM TypeVOA <|-- BaseModelN77xx_VOA_with_OPM BaseModelN77xx_VOA_with_OPM <|-- ModelN7764A Raw serial instrument classDiagram class BaseInstrument { model ins_type ... close() create() } class RawSerialInstrument { command() query() } class TypeTS { get_current_temp() get_target_temp() } class ModelMC811 { ts_type run() is_running() } BaseInstrument <|-- RawSerialInstrument RawSerialInstrument <|-- ModelMC811 TypeTS <|-- ModelMC811","title":"Class Hierarchy"},{"location":"development/extension/","text":"Extension \u00a4 Follow this instruction if you want to extend the package with your own Instrument Model classes: Inherit BaseInstrument or one of its subclasses. Inherit one or more Instrument Type classes Override the abstract methods inherited from these base classes. You can also define some particular properties or methods.","title":"Extension"},{"location":"development/extension/#extension","text":"Follow this instruction if you want to extend the package with your own Instrument Model classes: Inherit BaseInstrument or one of its subclasses. Inherit one or more Instrument Type classes Override the abstract methods inherited from these base classes. You can also define some particular properties or methods.","title":"Extension"},{"location":"user-guide/","text":"User guide \u00a4 Installation Tutorial Background knowledge Communicating with your instrument Getting the instrument configuration right Use common interfaces for versatility Use *OPC query to synchronize (VISA compatible instruments) What next Migration guide Instrument Resource Names References","title":"User guide"},{"location":"user-guide/#user-guide","text":"Installation Tutorial Background knowledge Communicating with your instrument Getting the instrument configuration right Use common interfaces for versatility Use *OPC query to synchronize (VISA compatible instruments) What next Migration guide Instrument Resource Names References","title":"User guide"},{"location":"user-guide/installation/","text":"Installation \u00a4 PyInst \u00a4 PyInst runs on python version 3.8.10 or higher. PyInst is published on the private pypi server at NeoPhotonics Wuhan site. You can install it using pip: pip install --index-url http://10.20.22.13:50010/simple/ pyinst Note This server is only accessible on the local network of NeoPhotonics Wuhan site. If it is the first time you use this pypi server, you may need to add the server address to the trusted-host: pip config set install.trusted-host 10.20.22.13 Drivers \u00a4 VISA Backend \u00a4 PyInst communicates with VISA compatible instruments via PyVISA . In order for PyVISA to work, you need to have a suitable backend. PyVISA includes a backend that wraps the National Instruments\u2019s VISA library (NI-VISA). However, you need to download and install the library yourself. There are multiple VISA implementations from different vendors. PyVISA is tested against National Instruments\u2019s VISA and Keysight IO Library Suite which can both be downloaded for free (you do not need a development environment only the driver library). It is suggested to install NI-VISA as the VISA backend. Instrument Drivers \u00a4 If an instrument is connected via USB, usually you need to install the driver provided by the instrument manufacturer (VISA compatible instruments are not included). Please follow the manual from the instrument manufacturer. Tools \u00a4 It is suggested to install one of the VISA tools such as NI Measurement & Automation Explorer (MAX) or Keysight Connection Expert . This is not required for PyInst to work, but can be used to scan for VISA instruments and get their resource names. NI MAX will automatically be installed when you install the NI-VISA driver as the visa backend. Keysight Connection Expert is included in the IO Libraries Suite .","title":"Installation"},{"location":"user-guide/installation/#installation","text":"","title":"Installation"},{"location":"user-guide/installation/#pyinst","text":"PyInst runs on python version 3.8.10 or higher. PyInst is published on the private pypi server at NeoPhotonics Wuhan site. You can install it using pip: pip install --index-url http://10.20.22.13:50010/simple/ pyinst Note This server is only accessible on the local network of NeoPhotonics Wuhan site. If it is the first time you use this pypi server, you may need to add the server address to the trusted-host: pip config set install.trusted-host 10.20.22.13","title":"PyInst"},{"location":"user-guide/installation/#drivers","text":"","title":"Drivers"},{"location":"user-guide/installation/#visa-backend","text":"PyInst communicates with VISA compatible instruments via PyVISA . In order for PyVISA to work, you need to have a suitable backend. PyVISA includes a backend that wraps the National Instruments\u2019s VISA library (NI-VISA). However, you need to download and install the library yourself. There are multiple VISA implementations from different vendors. PyVISA is tested against National Instruments\u2019s VISA and Keysight IO Library Suite which can both be downloaded for free (you do not need a development environment only the driver library). It is suggested to install NI-VISA as the VISA backend.","title":"VISA Backend"},{"location":"user-guide/installation/#instrument-drivers","text":"If an instrument is connected via USB, usually you need to install the driver provided by the instrument manufacturer (VISA compatible instruments are not included). Please follow the manual from the instrument manufacturer.","title":"Instrument Drivers"},{"location":"user-guide/installation/#tools","text":"It is suggested to install one of the VISA tools such as NI Measurement & Automation Explorer (MAX) or Keysight Connection Expert . This is not required for PyInst to work, but can be used to scan for VISA instruments and get their resource names. NI MAX will automatically be installed when you install the NI-VISA driver as the visa backend. Keysight Connection Expert is included in the IO Libraries Suite .","title":"Tools"},{"location":"user-guide/migration-guide/","text":"Migration guide (from beta versions) \u00a4 For many reasons, some of the APIs in pyinst has been redesigned compared to the old beta versions. This guide will list almost all of the breaking change to help you upgrade from the old beta versions. PyInst also provided a legacy mode which will make it (almost) compatible with the codes based on the old versions. Legacy mode \u00a4 You can enable those deprecated methods in older legacy versions: from pyinst import deprecated_monkey_patch deprecated_monkey_patch () from pyinst import ModelN7752A opm = ModelN7752A ( '...' , slot = 5 ) opm . get_cal () Make sure that you have called deprecated_monkey_patch() before you instantiate any Instrument Model objects. After monkey patch, PyInst will additionally support those deprecated methods. If a method with the same name exists in both the beta version and the latest version and behaves differently, the method will be executed according to the latest version. In this case, there are a few incompatibilities with the beta-based code. Note that you should update your code to be compatible with the latest version as soon as possible. Legacy mode is a temporary workaround that may be removed at any time in the future. An deprecated warning will be raised when you call those methods. Breaking Changes \u00a4 TypeOPM (Affects all Instrument Model classes of type OPM) \u00a4 min_cal Deprecated. Use min_pow_cal instead. max_cal Deprecated. Use max_pow_cal instead. get_cal Deprecated. Use get_pow_cal instead. set_cal Deprecated. Use set_pow_cal instead. TypeVOA (Affects all Instrument Model classes of type VOA) \u00a4 min_offset Deprecated. Use min_att_offset instead. max_offset Deprecated. Use max_att_offset instead. get_offset Deprecated. Use get_att_offset instead. set_offset Deprecated. Use set_att_offset instead. ModelOTF970 , ModelOTF980 \u00a4 get_bandwidth_offset , set_bandwidth_offset Removed. This is an instrument calibration function. There is no need to control it during testing. get_power_unit , set_power_unit , get_power_value Removed. OTF is not used for power monitoring. peak_search Removed. TypePS (Affects all Instrument Model classes of type PS) \u00a4 set_voltage Deprecated. Use set_voltage_limit instead. get_voltage Deprecated. Use get_voltage_limit instead. set_current Deprecated. Use set_current_limit instead. get_current Deprecated. Use get_current_limit instead. set_ovp Deprecated. Use set_ovp_level instead. get_ovp Deprecated. Use get_ovp_level instead. set_ovp_status Deprecated. Use enable_ovp or disable_ovp instead. get_ovp_status Deprecated. Use is_ovp_enabled instead. ovp_is_tripped Deprecated. Use is_ovp_tripped instead. ModelAQ6370 , ModelAQ6360 \u00a4 auto_analysis Deprecated. Use set_auto_analysis instead. set_analysis_cat Deprecated. Use set_analysis_category instead. analysis_setting , get_analysis_setting Deprecated. A series of new methods are used to implement the original function. Please refer to the API document. get_analysis_setting_map Removed. set_marker_x Changed. Please refer to the API document. set_span Changed. Please refer to the API document. set_start_stop_wavelength Deprecated. Use set_start_wavelength , set_stop_wavelength instead. set_start_stop_frequency Deprecated. Use set_start_frequency , set_stop_frequency instead. setup , get_setup Deprecated. A series of new methods are used to implement the original function. Please refer to the API document. format_data Deprecated. set_trace_display Deprecated. Use set_trace_display_status instead. ModelM8292A \u00a4 get_trace_item_names Deprecated. Use get_trace_item_names instead. get_trace_values Deprecated. Use get_trace_values instead. get_trace_units Deprecated. Use get_trace_units instead. get_trace_data Deprecated. Use get_data_table instead. smart_setup Changed. Please refer to the API document.","title":"Migration Guide"},{"location":"user-guide/migration-guide/#migration-guide-from-beta-versions","text":"For many reasons, some of the APIs in pyinst has been redesigned compared to the old beta versions. This guide will list almost all of the breaking change to help you upgrade from the old beta versions. PyInst also provided a legacy mode which will make it (almost) compatible with the codes based on the old versions.","title":"Migration guide (from beta versions)"},{"location":"user-guide/migration-guide/#legacy-mode","text":"You can enable those deprecated methods in older legacy versions: from pyinst import deprecated_monkey_patch deprecated_monkey_patch () from pyinst import ModelN7752A opm = ModelN7752A ( '...' , slot = 5 ) opm . get_cal () Make sure that you have called deprecated_monkey_patch() before you instantiate any Instrument Model objects. After monkey patch, PyInst will additionally support those deprecated methods. If a method with the same name exists in both the beta version and the latest version and behaves differently, the method will be executed according to the latest version. In this case, there are a few incompatibilities with the beta-based code. Note that you should update your code to be compatible with the latest version as soon as possible. Legacy mode is a temporary workaround that may be removed at any time in the future. An deprecated warning will be raised when you call those methods.","title":"Legacy mode"},{"location":"user-guide/migration-guide/#breaking-changes","text":"","title":"Breaking Changes"},{"location":"user-guide/migration-guide/#typeopm-affects-all-instrument-model-classes-of-type-opm","text":"min_cal Deprecated. Use min_pow_cal instead. max_cal Deprecated. Use max_pow_cal instead. get_cal Deprecated. Use get_pow_cal instead. set_cal Deprecated. Use set_pow_cal instead.","title":"TypeOPM (Affects all Instrument Model classes of type OPM)"},{"location":"user-guide/migration-guide/#typevoa-affects-all-instrument-model-classes-of-type-voa","text":"min_offset Deprecated. Use min_att_offset instead. max_offset Deprecated. Use max_att_offset instead. get_offset Deprecated. Use get_att_offset instead. set_offset Deprecated. Use set_att_offset instead.","title":"TypeVOA (Affects all Instrument Model classes of type VOA)"},{"location":"user-guide/migration-guide/#modelotf970-modelotf980","text":"get_bandwidth_offset , set_bandwidth_offset Removed. This is an instrument calibration function. There is no need to control it during testing. get_power_unit , set_power_unit , get_power_value Removed. OTF is not used for power monitoring. peak_search Removed.","title":"ModelOTF970, ModelOTF980"},{"location":"user-guide/migration-guide/#typeps-affects-all-instrument-model-classes-of-type-ps","text":"set_voltage Deprecated. Use set_voltage_limit instead. get_voltage Deprecated. Use get_voltage_limit instead. set_current Deprecated. Use set_current_limit instead. get_current Deprecated. Use get_current_limit instead. set_ovp Deprecated. Use set_ovp_level instead. get_ovp Deprecated. Use get_ovp_level instead. set_ovp_status Deprecated. Use enable_ovp or disable_ovp instead. get_ovp_status Deprecated. Use is_ovp_enabled instead. ovp_is_tripped Deprecated. Use is_ovp_tripped instead.","title":"TypePS (Affects all Instrument Model classes of type PS)"},{"location":"user-guide/migration-guide/#modelaq6370-modelaq6360","text":"auto_analysis Deprecated. Use set_auto_analysis instead. set_analysis_cat Deprecated. Use set_analysis_category instead. analysis_setting , get_analysis_setting Deprecated. A series of new methods are used to implement the original function. Please refer to the API document. get_analysis_setting_map Removed. set_marker_x Changed. Please refer to the API document. set_span Changed. Please refer to the API document. set_start_stop_wavelength Deprecated. Use set_start_wavelength , set_stop_wavelength instead. set_start_stop_frequency Deprecated. Use set_start_frequency , set_stop_frequency instead. setup , get_setup Deprecated. A series of new methods are used to implement the original function. Please refer to the API document. format_data Deprecated. set_trace_display Deprecated. Use set_trace_display_status instead.","title":"ModelAQ6370, ModelAQ6360"},{"location":"user-guide/migration-guide/#modelm8292a","text":"get_trace_item_names Deprecated. Use get_trace_item_names instead. get_trace_values Deprecated. Use get_trace_values instead. get_trace_units Deprecated. Use get_trace_units instead. get_trace_data Deprecated. Use get_data_table instead. smart_setup Changed. Please refer to the API document.","title":"ModelM8292A"},{"location":"user-guide/references/","text":"References \u00a4 Basic Knowledge \u00a4 What is VISA A brief history of VISA NI-VISA Overview What is SCPI SCPI 1999.0 IVI Specifications Manuals \u00a4 Manuals from instrument manufacturers","title":"References"},{"location":"user-guide/references/#references","text":"","title":"References"},{"location":"user-guide/references/#basic-knowledge","text":"What is VISA A brief history of VISA NI-VISA Overview What is SCPI SCPI 1999.0 IVI Specifications","title":"Basic Knowledge"},{"location":"user-guide/references/#manuals","text":"Manuals from instrument manufacturers","title":"Manuals"},{"location":"user-guide/resource-names/","text":"Instrument resource names \u00a4 When instantiating an Instrument Model class, you must tell the initialization function the resource name of the instrument you want to connect to. For a specific Instrument Model class, the meaning of the resource_name parameter can be found in the API Reference . We can roughly divide these instruemnts into two cases: VISA compatible instruments Other instruments based on the manufacturer's prviate agreement VISA compatible instruments \u00a4 VISA compatible instruemnts are those that inherit from the VisaInstrument class. For VISA compatible instruments, resource_name represents the VISA resource name or alias. The best way to get the VISA resource name is to use one of the tools mentioned here: Installation/Tools . It allows you to easily scan and manage the instruments connected to the computer. Alternatively, PyInst also provides some functions for managing VISA instruments. >>> import pyinst >>> pyinst . list_visa_resources () ( 'ASRL1::INSTR' , 'GPIB1::1::INSTR' , 'GPIB1::2::INSTR' , 'GPIB1::10::INSTR' ) >>> rm = pyinst . get_visa_resource_manager () >>> ins = rm . open_resource ( 'GPIB1::1::INSTR' ) >>> ins . query ( '*idn?' ) 'YOKOGAWA,AQ6370D,91T507949,02.01 \\n ' Obviously, this is very complicated because you have to open a VISA resource to get further information to know which instrument the resource corresponds to. Sometimes you may need to spend extra effort on how to configure the parameters correctly to open the VISA resource. It is recommended to use tools mentioned above. If you are intrested in VISA resource syntax, please refer to: VISA Resource Syntax and Examples Other instruments based on the manufacturer's prviate agreement \u00a4 There is no uniform protocol or specification for such instruments, so resource_name may have different meanings. You can refer to the documentation for the instrument in API Refenrence . Generally, For instruments connected via serial port, it is the port name. For instruments connected via USB, it is the S/N of the instrument or its USB chip.","title":"Instrument Resource Names"},{"location":"user-guide/resource-names/#instrument-resource-names","text":"When instantiating an Instrument Model class, you must tell the initialization function the resource name of the instrument you want to connect to. For a specific Instrument Model class, the meaning of the resource_name parameter can be found in the API Reference . We can roughly divide these instruemnts into two cases: VISA compatible instruments Other instruments based on the manufacturer's prviate agreement","title":"Instrument resource names"},{"location":"user-guide/resource-names/#visa-compatible-instruments","text":"VISA compatible instruemnts are those that inherit from the VisaInstrument class. For VISA compatible instruments, resource_name represents the VISA resource name or alias. The best way to get the VISA resource name is to use one of the tools mentioned here: Installation/Tools . It allows you to easily scan and manage the instruments connected to the computer. Alternatively, PyInst also provides some functions for managing VISA instruments. >>> import pyinst >>> pyinst . list_visa_resources () ( 'ASRL1::INSTR' , 'GPIB1::1::INSTR' , 'GPIB1::2::INSTR' , 'GPIB1::10::INSTR' ) >>> rm = pyinst . get_visa_resource_manager () >>> ins = rm . open_resource ( 'GPIB1::1::INSTR' ) >>> ins . query ( '*idn?' ) 'YOKOGAWA,AQ6370D,91T507949,02.01 \\n ' Obviously, this is very complicated because you have to open a VISA resource to get further information to know which instrument the resource corresponds to. Sometimes you may need to spend extra effort on how to configure the parameters correctly to open the VISA resource. It is recommended to use tools mentioned above. If you are intrested in VISA resource syntax, please refer to: VISA Resource Syntax and Examples","title":"VISA compatible instruments"},{"location":"user-guide/resource-names/#other-instruments-based-on-the-manufacturers-prviate-agreement","text":"There is no uniform protocol or specification for such instruments, so resource_name may have different meanings. You can refer to the documentation for the instrument in API Refenrence . Generally, For instruments connected via serial port, it is the port name. For instruments connected via USB, it is the S/N of the instrument or its USB chip.","title":"Other instruments based on the manufacturer's prviate agreement"},{"location":"user-guide/tutorial/","text":"Tutorial \u00a4 Background knowledge \u00a4 If you don't understand the concepts of VISA and SCPI, please refer to the References page. However, there is no need to dig deeper into these concepts. Take it easy. In addition, you need to have a common-sense understanding of communication interfaces such as RS-232, Ethernet, GPIB, and USB. These are beyond the scope of this document. Communicating with your instrument \u00a4 In the PyInst package, specific instrument models are abstracted into Instrument Model classes. An Instrument Model class always starts with the prefix Model , for example: ModelAQ6370 , ModelOTF980 . All Instrument Model classes can be imported directly from the pyinst namespace. Here is a example to show how to communicate with an instrument: >>> from pyinst import ModelN7744A >>> opm = ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) >>> opm . get_power_value () - 10.85 >>> opm . close () # release the instrument resource The Instrument Model resource is immediately opened on object creation. The first parameter of the initialization method is always resource_name . For VISA compatible instruments, it is the VISA resource name or alias. For other instruments connected via serial port, it is the port name. For other instruments connected via USB, it is the S/N of the instrument or its USB chip. Please refer to Instrument resource names for more information. Note An Instrument Model object is a logical functional unit rather than corresponding to the physical form of the instrument. For example, for the optical power meter Keysight N7744A, it has 4 independent OPM functional units. Each of them can be regarded as a ModelN7744A object. Instrument Model classes support context management, so you can use the \"with\" statement to ensure that the instrument resource is closed after usage. with ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) as opm : opm . get_power_value () If you do not want exception to be raised when the Instrument Model class failed to initialize, use the create method instead. If an error occurs during object creation, None is returned. opm = ModelN7744A . create ( 'GPIB1::1::INSTR' , slot = 2 ) if opm : pwr , unit = opm . get_power () print ( f 'Optical power is { pwr : .2f } { unit } .' ) else : print ( f 'The instrument failed to connect.' ) Getting the instrument configuration right \u00a4 For most instruments, you actually need to properly configure the instrument so that it understands the message sent by the computer (in particular how to identifies the end of the commands) and so that computer knows when the instrument is done talking. Fortunately, this part of the work has already been done by PyInst. However, there are still some situations that require special attention: read_termination and write_termination are configurable on some instruments. Check the instrument configuration to make sure these terminations match the values you set in the __init__ method. Some instruments require additional configuration, which is described in the API document. If you are unable to communicate with an instrument, check the possible causes above. Use common interfaces for versatility \u00a4 One of the principles of PyInst is to define a common interface for instruments of the same type or with similar functionality to minimize code modifications when replacing instrument models. These interfaces are defined by a series of Abstract Base Classes . Instrument types are abstracted to Instrument Type class. An Instrument Type class always starts with the prefix Type , for example: TypeOPM , TypeVOA . All Instrument Model classes inherit from one or more Instrument Type classes. If you use those common properties or methods defined by the Instrument Type class, the code remains compatible with different instrument models. from pyinst import ModelN7744A , ModelAQ2200_215 from pyinst.constants import OpticalPowerUnit opm1 = ModelN7744A ( 'GPIB0::8::INSTR' , slot = 1 ) opm2 = ModelAQ2200_215 ( 'USB0::0x0B21::0x0034::39314C433138303034::INSTR' , slot = 1 ) def operate_opm ( opm ): opm . set_avg_time ( 100 ) opm . set_power_unit ( OpticalPowerUnit . DBM ) p_dbm = opm . get_power_value () return p_dbm p1 = operate_opm ( opm1 ) p2 = operate_opm ( opm2 ) In addition, PyInst provides a unified interface for instruments with the same functionality. For example, for instruments with optical frequency query/setting capabilities, abstract base classes OpticalFrequencySetter is defined. This allows us to operate these instruments in the same way, which makes the code concise. opm = ModelN7744A ( 'GPIB0::6::INSTR' , slot = 1 ) voa = ModelN7752A ( 'GPIB0::8::INSTR' , slot = 1 ) osa = ModelAQ6370A ( 'GPIB0::1::INSTR' ) otf = ModelOTF980 ( 'GPIB0::2::INSTR' ) # You can set the optical frequency of all instruments via a for loop # since the interface is unified. for instr in ( opm , voa , osa , otf ): instr . set_frequency ( 193.7 ) If you want to improve the versatility of your code, a good practice is to try to use the properties or methods defined by these common interfaces. Use *OPC query to synchronize (VISA compatible instruments) \u00a4 Note that this section applies to VISA compatible instruments only. Standard Commands for Programmable Instruments (SCPI) is the specification used by VISA compatible instruments. SCPI defined 2 types of commands: the overlapped and sequential commands. A sequential command is one which finishes executing before the next command starts executing. An overlapped command is one which does not finish executing before the next command starts executing. In other words, if you call a method based on a sequential command, it is expected that the executing is done when the method returns. It's a synchronous method. But for a method based on an overlapped command, maybe the executing is not finished when the method returns. In other words, it's asynchronous. The method does only trigger the command execution. SCPI implemented *OPC query to synchronize. This query will return after all pending executions done. Use opc property of the VisaInstrument class. For example: from pyinst import ModelAQ6370 osa = ModelAQ6370 ( 'GPIB1::1::INSTR' ) osa . single () # Makes an *OPC query to make sure the single sweep is finished osa . opc osa . get_data () The single sweep is an overlapped command for AQ6370. If we do not query *OPC?, the sweep may not be finish when we get data, and we will not get the correct data we expected. To know if a command is sequential or overlapped, please refer to the documents of the instrument manufacturer. What next \u00a4 If you are updating from the beta versions of PyInst, please read the Migration Guide Learn basic knowledge about VISA and SCPI on the References page. Read the API Reference Refer to the documents from the instrument manufacturers .","title":"Tutorial"},{"location":"user-guide/tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"user-guide/tutorial/#background-knowledge","text":"If you don't understand the concepts of VISA and SCPI, please refer to the References page. However, there is no need to dig deeper into these concepts. Take it easy. In addition, you need to have a common-sense understanding of communication interfaces such as RS-232, Ethernet, GPIB, and USB. These are beyond the scope of this document.","title":"Background knowledge"},{"location":"user-guide/tutorial/#communicating-with-your-instrument","text":"In the PyInst package, specific instrument models are abstracted into Instrument Model classes. An Instrument Model class always starts with the prefix Model , for example: ModelAQ6370 , ModelOTF980 . All Instrument Model classes can be imported directly from the pyinst namespace. Here is a example to show how to communicate with an instrument: >>> from pyinst import ModelN7744A >>> opm = ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) >>> opm . get_power_value () - 10.85 >>> opm . close () # release the instrument resource The Instrument Model resource is immediately opened on object creation. The first parameter of the initialization method is always resource_name . For VISA compatible instruments, it is the VISA resource name or alias. For other instruments connected via serial port, it is the port name. For other instruments connected via USB, it is the S/N of the instrument or its USB chip. Please refer to Instrument resource names for more information. Note An Instrument Model object is a logical functional unit rather than corresponding to the physical form of the instrument. For example, for the optical power meter Keysight N7744A, it has 4 independent OPM functional units. Each of them can be regarded as a ModelN7744A object. Instrument Model classes support context management, so you can use the \"with\" statement to ensure that the instrument resource is closed after usage. with ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) as opm : opm . get_power_value () If you do not want exception to be raised when the Instrument Model class failed to initialize, use the create method instead. If an error occurs during object creation, None is returned. opm = ModelN7744A . create ( 'GPIB1::1::INSTR' , slot = 2 ) if opm : pwr , unit = opm . get_power () print ( f 'Optical power is { pwr : .2f } { unit } .' ) else : print ( f 'The instrument failed to connect.' )","title":"Communicating with your instrument"},{"location":"user-guide/tutorial/#getting-the-instrument-configuration-right","text":"For most instruments, you actually need to properly configure the instrument so that it understands the message sent by the computer (in particular how to identifies the end of the commands) and so that computer knows when the instrument is done talking. Fortunately, this part of the work has already been done by PyInst. However, there are still some situations that require special attention: read_termination and write_termination are configurable on some instruments. Check the instrument configuration to make sure these terminations match the values you set in the __init__ method. Some instruments require additional configuration, which is described in the API document. If you are unable to communicate with an instrument, check the possible causes above.","title":"Getting the instrument configuration right"},{"location":"user-guide/tutorial/#use-common-interfaces-for-versatility","text":"One of the principles of PyInst is to define a common interface for instruments of the same type or with similar functionality to minimize code modifications when replacing instrument models. These interfaces are defined by a series of Abstract Base Classes . Instrument types are abstracted to Instrument Type class. An Instrument Type class always starts with the prefix Type , for example: TypeOPM , TypeVOA . All Instrument Model classes inherit from one or more Instrument Type classes. If you use those common properties or methods defined by the Instrument Type class, the code remains compatible with different instrument models. from pyinst import ModelN7744A , ModelAQ2200_215 from pyinst.constants import OpticalPowerUnit opm1 = ModelN7744A ( 'GPIB0::8::INSTR' , slot = 1 ) opm2 = ModelAQ2200_215 ( 'USB0::0x0B21::0x0034::39314C433138303034::INSTR' , slot = 1 ) def operate_opm ( opm ): opm . set_avg_time ( 100 ) opm . set_power_unit ( OpticalPowerUnit . DBM ) p_dbm = opm . get_power_value () return p_dbm p1 = operate_opm ( opm1 ) p2 = operate_opm ( opm2 ) In addition, PyInst provides a unified interface for instruments with the same functionality. For example, for instruments with optical frequency query/setting capabilities, abstract base classes OpticalFrequencySetter is defined. This allows us to operate these instruments in the same way, which makes the code concise. opm = ModelN7744A ( 'GPIB0::6::INSTR' , slot = 1 ) voa = ModelN7752A ( 'GPIB0::8::INSTR' , slot = 1 ) osa = ModelAQ6370A ( 'GPIB0::1::INSTR' ) otf = ModelOTF980 ( 'GPIB0::2::INSTR' ) # You can set the optical frequency of all instruments via a for loop # since the interface is unified. for instr in ( opm , voa , osa , otf ): instr . set_frequency ( 193.7 ) If you want to improve the versatility of your code, a good practice is to try to use the properties or methods defined by these common interfaces.","title":"Use common interfaces for versatility"},{"location":"user-guide/tutorial/#use-opc-query-to-synchronize-visa-compatible-instruments","text":"Note that this section applies to VISA compatible instruments only. Standard Commands for Programmable Instruments (SCPI) is the specification used by VISA compatible instruments. SCPI defined 2 types of commands: the overlapped and sequential commands. A sequential command is one which finishes executing before the next command starts executing. An overlapped command is one which does not finish executing before the next command starts executing. In other words, if you call a method based on a sequential command, it is expected that the executing is done when the method returns. It's a synchronous method. But for a method based on an overlapped command, maybe the executing is not finished when the method returns. In other words, it's asynchronous. The method does only trigger the command execution. SCPI implemented *OPC query to synchronize. This query will return after all pending executions done. Use opc property of the VisaInstrument class. For example: from pyinst import ModelAQ6370 osa = ModelAQ6370 ( 'GPIB1::1::INSTR' ) osa . single () # Makes an *OPC query to make sure the single sweep is finished osa . opc osa . get_data () The single sweep is an overlapped command for AQ6370. If we do not query *OPC?, the sweep may not be finish when we get data, and we will not get the correct data we expected. To know if a command is sequential or overlapped, please refer to the documents of the instrument manufacturer.","title":"Use *OPC query to synchronize (VISA compatible instruments)"},{"location":"user-guide/tutorial/#what-next","text":"If you are updating from the beta versions of PyInst, please read the Migration Guide Learn basic knowledge about VISA and SCPI on the References page. Read the API Reference Refer to the documents from the instrument manufacturers .","title":"What next"}]}