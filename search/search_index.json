{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyInst \u00a4 A python package in order to control measurement devices and test equipment via GPIB, RS232, Ethernet or USB, in the field of optical communication system. Description \u00a4 The programming of measurement instruments can be real pain. There are many different protocols, sent over many different interfaces and bus systems (GPIB, RS232, USB). Although the Virtual Instrument Software Architecture (VISA) specification is widely used, there are still a large number of instruments using private communication protocols. In addition, even for the same type of instrument, the commands of different manufacturers or models are also different. Therefore, even if we just replace an instrument with another instrument of the same type, we have to write different codes for different instrument models, which is a lot of work. In order to ease this unfortunate situation, PyInst came into being. It defines unified interfaces for the same type of instruments, so that the same codes can be applied to all similar instruments. You no longer need to focus on the underlying communication protocols or commands. All these can be achieved by simply calling methods. Requirements \u00a4 Python >= 3.8.10 VISA (tested with NI-VISA and Keysight-VISA)","title":"Overview"},{"location":"#pyinst","text":"A python package in order to control measurement devices and test equipment via GPIB, RS232, Ethernet or USB, in the field of optical communication system.","title":"PyInst"},{"location":"#description","text":"The programming of measurement instruments can be real pain. There are many different protocols, sent over many different interfaces and bus systems (GPIB, RS232, USB). Although the Virtual Instrument Software Architecture (VISA) specification is widely used, there are still a large number of instruments using private communication protocols. In addition, even for the same type of instrument, the commands of different manufacturers or models are also different. Therefore, even if we just replace an instrument with another instrument of the same type, we have to write different codes for different instrument models, which is a lot of work. In order to ease this unfortunate situation, PyInst came into being. It defines unified interfaces for the same type of instruments, so that the same codes can be applied to all similar instruments. You no longer need to focus on the underlying communication protocols or commands. All these can be achieved by simply calling methods.","title":"Description"},{"location":"#requirements","text":"Python >= 3.8.10 VISA (tested with NI-VISA and Keysight-VISA)","title":"Requirements"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"license/","text":"GNU GENERAL PUBLIC LICENSE \u00a4 Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble \u00a4 The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS \u00a4 0. Definitions. \u00a4 \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. \u00a4 The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. \u00a4 All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. \u00a4 No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. \u00a4 You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. \u00a4 You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. \u00a4 You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u00a4 \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. \u00a4 You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. \u00a4 You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. \u00a4 Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. \u00a4 A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. \u00a4 If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. \u00a4 Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. \u00a4 The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. \u00a4 THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. \u00a4 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. \u00a4 If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs \u00a4 If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"License"},{"location":"license/#gnu-general-public-license","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU GENERAL PUBLIC LICENSE"},{"location":"license/#preamble","text":"The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"license/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"license/#0-definitions","text":"\"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions."},{"location":"license/#1-source-code","text":"The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code."},{"location":"license/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions."},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law."},{"location":"license/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies."},{"location":"license/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions."},{"location":"license/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms."},{"location":"license/#7-additional-terms","text":"\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms."},{"location":"license/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination."},{"location":"license/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies."},{"location":"license/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients."},{"location":"license/#11-patents","text":"A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents."},{"location":"license/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom."},{"location":"license/#13-use-with-the-gnu-affero-general-public-license","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.","title":"13. Use with the GNU Affero General Public License."},{"location":"license/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License."},{"location":"license/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty."},{"location":"license/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability."},{"location":"license/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16."},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"How to Apply These Terms to Your New Programs"},{"location":"api/abc/","text":"Abstract Base Classes \u00a4 This module provides abstract base classes to describe different kinds of instruments. BaseInstrument is the base class of all the Instrument Model classes. VisaInstrument and RawSerialInstrument are classes based on BaseInstrument to describe VISA compatible instruments and serial-port based instruments. There are many other abstract classes to describe a kind of instrument that has some particular functions. For example, OpticalFrequencySetter defines the interfaces of an instrument which has optical frequency/wavelength setting function. Among these ABCs are Instrument Type classes. An Instrument Type class defines the interfaces of a specific instrument type. It always starts with a prefix Type , for example, TypeVOA or TypeOPM . An Instrument Model class will inherit at least one of these Instrument Type classes, and implement the abstract methods inherited. So the interfaces of the same type of instruments can be unified. Besides the standard methods defined by the Instrument Type class, a Instrument Model class may also define its unique methods. InstrumentMeta \u00a4 Bases: ABCMeta The meta class of BaseInstrument. ins_type () property \u00a4 The instrument type flag of the specific instrument model. Source code in pyinst\\abc.py 50 51 52 53 54 55 56 @property def ins_type ( cls : type ) -> InstrumentType : \"\"\"The instrument type flag of the specific instrument model.\"\"\" value = 0 for base in cls . mro ()[ 2 :]: value |= getattr ( base , 'ins_type' , 0 ) return value BaseInstrument ( resource_name ) \u00a4 ABC of all the instrument model classes. Parameters: Name Type Description Default resource_name str The instrument resource name. Please refer to resource_name property for more information. required Source code in pyinst\\abc.py 117 118 119 120 121 122 123 124 def __init__ ( self , resource_name : str ): \"\"\" Args: resource_name: The instrument resource name. Please refer to `resource_name` property for more information. \"\"\" self . __resource_name = resource_name super ( BaseInstrument , self ) . __init__ () brand () abstractmethod property \u00a4 The brand/manufactory of the instrument. Source code in pyinst\\abc.py 62 63 64 65 @property @abstractmethod def brand ( self ) -> str : \"\"\"The brand/manufactory of the instrument.\"\"\" model () abstractmethod property \u00a4 The model name of the instrument. Source code in pyinst\\abc.py 67 68 69 70 @property @abstractmethod def model ( self ) -> str : \"\"\"The model name of the instrument.\"\"\" details () property \u00a4 A map of information to describe the instrument. Source code in pyinst\\abc.py 72 73 74 75 76 77 @property def details ( self ) -> Mapping [ str , str ]: \"\"\" A map of information to describe the instrument. \"\"\" return {} params () property \u00a4 A list of dict to define parameters required for object creation. This is mainly used for upper level (e.g. GUI) to render options. dict fields: name (str) : Required. The name of the param, exactly the same in __init__ method. type (str) : Required. options: int | str | bool . options (list) : Optional. Valid options. min (int) : Optional. For type int only. max (int) : Optional. For type int only. Examples: [ { \"name\" : \"slot\" , \"type\" : \"int\" , \"min\" : 1 , \"max\" : 10 }, { \"name\" : \"range_level\" , \"type\" : \"str\" , \"options\" : [ \"HIGH\" , \"LOW\" ] } ] Source code in pyinst\\abc.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @property def params ( self ) -> List [ dict ]: \"\"\" A list of dict to define parameters required for object creation. This is mainly used for upper level (e.g. GUI) to render options. dict fields: - `name (str)`: Required. The name of the param, exactly the same in `__init__` method. - `type (str)`: Required. options: `int` | `str` | `bool`. - `options (list)`: Optional. Valid options. + `min (int)`: Optional. For type `int` only. + `max (int)`: Optional. For type `int` only. Examples: ``` python [ { \"name\": \"slot\", \"type\": \"int\", \"min\": 1, \"max\": 10 }, { \"name\": \"range_level\", \"type\": \"str\", \"options\": [\"HIGH\", \"LOW\"] } ] ``` \"\"\" close () abstractmethod \u00a4 Release the instrument resource. Source code in pyinst\\abc.py 139 140 141 @abstractmethod def close ( self ) -> None : \"\"\"Release the instrument resource.\"\"\" resource_name () property \u00a4 For VISA compatible instruments, it is the resource name or alias of the VISA resource. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument or USB chip. Source code in pyinst\\abc.py 143 144 145 146 147 148 149 150 151 152 153 @property def resource_name ( self ) -> str : \"\"\" - For VISA compatible instruments, it is the resource name or alias of the VISA resource. - For other instruments connected with serial port, it is the port name. - For other instruments connected with USB, it is the S/N of the instrument or USB chip. \"\"\" return self . __resource_name create ( * args , ** kwargs ) classmethod \u00a4 Create an instance of the instrument model. If an exception is raised during the instance creation, return None. Parameters: Name Type Description Default *args Directly passed to the instrument model class. () **kwargs Directly passed to the instrument model class. {} Returns: Type Description Optional [ Self ] The created instrument model class, or None if creation failed. Source code in pyinst\\abc.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 @classmethod def create ( cls , * args , ** kwargs ) -> Optional [ Self ]: \"\"\"Create an instance of the instrument model. If an exception is raised during the instance creation, return None. Args: *args: Directly passed to the instrument model class. **kwargs: Directly passed to the instrument model class. Returns: The created instrument model class, or None if creation failed. \"\"\" try : instance = cls ( * args , ** kwargs ) except : instance = None return instance VisaInstrument ( resource_name , read_termination = VI_READ_TERMINATION , write_termination = VI_WRITE_TERMINATION , timeout = VI_TIMEOUT , open_timeout = VI_OPEN_TIMEOUT , query_delay = VI_QUERY_DELAY , encoding = 'ascii' , ** kwargs ) \u00a4 Bases: BaseInstrument Base class of VISA compatible instruments that use message based communication. VisaInstrument creates a proxy object with pyvisa to communicate with VISA compatible instruments. Refer to PyVISA Documents for more information. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. VI_READ_TERMINATION write_termination str Write termination character. VI_WRITE_TERMINATION timeout int Timeout in milliseconds for all resource I/O operations. VI_TIMEOUT open_timeout int If the access_mode parameter requests a lock, then this parameter specifies the absolute time period (in milliseconds) that the resource waits to get unlocked before this operation returns an error. VI_OPEN_TIMEOUT query_delay float Delay in seconds between write and read operations. VI_QUERY_DELAY encoding str Encoding used for read and write operations. 'ascii' **kwargs directly passed to rm.open_resource {} Source code in pyinst\\abc.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 def __init__ ( self , resource_name : str , read_termination : str = VI_READ_TERMINATION , write_termination : str = VI_WRITE_TERMINATION , timeout : int = VI_TIMEOUT , open_timeout : int = VI_OPEN_TIMEOUT , query_delay : float = VI_QUERY_DELAY , encoding : str = \"ascii\" , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. timeout: Timeout in milliseconds for all resource I/O operations. open_timeout: If the access_mode parameter requests a lock, then this parameter specifies the absolute time period (in milliseconds) that the resource waits to get unlocked before this operation returns an error. query_delay: Delay in seconds between write and read operations. encoding: Encoding used for read and write operations. **kwargs: directly passed to `rm.open_resource` \"\"\" super () . __init__ ( resource_name = resource_name ) rm = pyvisa . ResourceManager () self . _inst : pyvisa . resources . MessageBasedResource = rm . open_resource ( resource_name , read_termination = read_termination , write_termination = write_termination , open_timeout = open_timeout , timeout = timeout , query_delay = query_delay , encoding = encoding , ** kwargs ) self . _check_communication () resource_name () property \u00a4 Resource name or alias of the VISA resource. Source code in pyinst\\abc.py 237 238 239 240 @property def resource_name ( self ) -> str : \"\"\"Resource name or alias of the VISA resource.\"\"\" return self . __resource_name resource_info () property \u00a4 Get the (extended) information of the VISA resource. Source code in pyinst\\abc.py 242 243 244 245 @property def resource_info ( self ) -> pyvisa . highlevel . ResourceInfo : \"\"\"Get the (extended) information of the VISA resource.\"\"\" return self . _inst . resource_info idn () property \u00a4 Returns a string that uniquely identifies the instrument. Source code in pyinst\\abc.py 247 248 249 250 @property def idn ( self ) -> str : \"\"\"Returns a string that uniquely identifies the instrument.\"\"\" return self . query ( '*IDN?' ) opc () property \u00a4 Operation complete query. Source code in pyinst\\abc.py 252 253 254 255 @property def opc ( self ) -> str : \"\"\"Operation complete query.\"\"\" return self . query ( '*OPC?' ) close () \u00a4 Closes the VISA session and marks the handle as invalid. Source code in pyinst\\abc.py 257 258 259 260 261 def close ( self ) -> None : \"\"\" Closes the VISA session and marks the handle as invalid. \"\"\" self . _inst . close () command ( message ) \u00a4 Write a VISA command without read back. Alias of write(message). Parameters: Name Type Description Default message str The message to be sent. required Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 276 277 278 279 280 281 282 283 284 285 286 287 288 def command ( self , message : str ) -> int : \"\"\" Write a VISA command without read back. Alias of write(message). Args: message: The message to be sent. Returns: Number of bytes written. \"\"\" return self . write ( message ) write ( message , termination = None , encoding = None ) \u00a4 Write a string message to the device. The write_termination is always appended to it. Parameters: Name Type Description Default message str The message to be sent. required termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 def write ( self , message : str , termination : Optional [ str ] = None , encoding : Optional [ str ] = None , ) -> int : \"\"\"Write a string message to the device. The write_termination is always appended to it. Args: message: The message to be sent. termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Number of bytes written. \"\"\" return self . _inst . write ( message , termination , encoding ) read ( termination = None , encoding = None ) \u00a4 Read a string from the device. Reading stops when the device stops sending (e.g. by setting appropriate bus lines), or the termination characters sequence was detected. Attention: Only the last character of the termination characters is really used to stop reading, however, the whole sequence is compared to the ending of the read string message. If they don't match, a warning is issued. Parameters: Name Type Description Default termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description str Message read from the instrument and decoded. Source code in pyinst\\abc.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 def read ( self , termination : Optional [ str ] = None , encoding : Optional [ str ] = None ) -> str : \"\"\"Read a string from the device. Reading stops when the device stops sending (e.g. by setting appropriate bus lines), or the termination characters sequence was detected. Attention: Only the last character of the termination characters is really used to stop reading, however, the whole sequence is compared to the ending of the read string message. If they don't match, a warning is issued. Args: termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Message read from the instrument and decoded. \"\"\" return self . _inst . read ( termination , encoding ) query ( message , delay = None ) \u00a4 A combination of write(message) and read() Parameters: Name Type Description Default message str The message to send. required delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None Returns: Type Description str Answer from the device. Source code in pyinst\\abc.py 339 340 341 342 343 344 345 346 347 348 349 350 351 def query ( self , message : str , delay : Optional [ float ] = None ) -> str : \"\"\"A combination of write(message) and read() Args: message: The message to send. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. Returns: Answer from the device. \"\"\" return self . _inst . query ( message , delay ) read_binary_values ( datatype = 'f' , is_big_endian = False , container = list , header_fmt = 'ieee' , expect_termination = True , data_points = 0 , chunk_size = None ) \u00a4 Read values from the device in binary format returning an iterable of values. Parameters: Name Type Description Default datatype pyvisa . util . BINARY_DATATYPES Format string for a single element. See struct module. 'f' by default. 'f' is_big_endian bool Are the data in big or little endian order. Defaults to False. False container Type | Callable [[ Iterable ], Sequence ] Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. list header_fmt pyvisa . util . BINARY_HEADERS Format of the header prefixing the data. Defaults to 'ieee'. 'ieee' expect_termination bool When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. True data_points int Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. 0 chunk_size Optional [ int ] Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. None Returns: Type Description Sequence [ int | float ] Data read from the device. Source code in pyinst\\abc.py 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 def read_binary_values ( self , datatype : pyvisa . util . BINARY_DATATYPES = \"f\" , is_big_endian : bool = False , container : Type | Callable [[ Iterable ], Sequence ] = list , header_fmt : pyvisa . util . BINARY_HEADERS = \"ieee\" , expect_termination : bool = True , data_points : int = 0 , chunk_size : Optional [ int ] = None , ) -> Sequence [ int | float ]: \"\"\"Read values from the device in binary format returning an iterable of values. Args: datatype: Format string for a single element. See struct module. 'f' by default. is_big_endian: Are the data in big or little endian order. Defaults to False. container: Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. header_fmt: Format of the header prefixing the data. Defaults to 'ieee'. expect_termination: When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. data_points: Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. chunk_size: Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. Returns: Data read from the device. \"\"\" return self . _inst . read_binary_values ( datatype , is_big_endian , container , header_fmt , expect_termination , data_points , chunk_size ) query_binary_values ( message , datatype = 'f' , is_big_endian = False , container = list , delay = None , header_fmt = 'ieee' , expect_termination = True , data_points = 0 , chunk_size = None ) \u00a4 Query the device for values in binary format returning an iterable of values. Parameters: Name Type Description Default message str The message to send. required datatype pyvisa . util . BINARY_DATATYPES Format string for a single element. See struct module. 'f' by default. 'f' is_big_endian bool Are the data in big or little endian order. Defaults to False. False container Type | Callable [[ Iterable ], Sequence ] Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. list delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None header_fmt pyvisa . util . BINARY_HEADERS Format of the header prefixing the data. Defaults to 'ieee'. 'ieee' expect_termination bool When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. True data_points int Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. 0 chunk_size Optional [ int ] Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. None Returns: Type Description Sequence [ int | float ] Data read from the device. Source code in pyinst\\abc.py 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def query_binary_values ( self , message : str , datatype : pyvisa . util . BINARY_DATATYPES = \"f\" , is_big_endian : bool = False , container : Type | Callable [[ Iterable ], Sequence ] = list , delay : Optional [ float ] = None , header_fmt : pyvisa . util . BINARY_HEADERS = \"ieee\" , expect_termination : bool = True , data_points : int = 0 , chunk_size : Optional [ int ] = None , ) -> Sequence [ int | float ]: \"\"\"Query the device for values in binary format returning an iterable of values. Args: message: The message to send. datatype: Format string for a single element. See struct module. 'f' by default. is_big_endian: Are the data in big or little endian order. Defaults to False. container: Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. header_fmt: Format of the header prefixing the data. Defaults to 'ieee'. expect_termination: When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. data_points: Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. chunk_size: Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. Returns: Data read from the device. \"\"\" return self . _inst . query_binary_values ( message , datatype , is_big_endian , container , delay , header_fmt , expect_termination , data_points , chunk_size ) set_visa_attribute ( name , state ) \u00a4 Set the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Parameters: Name Type Description Default name pyvisa . constants . ResourceAttribute Attribute for which the state is to be modified. required state Any The state of the attribute to be set for the specified object. required Returns: Type Description pyvisa . constants . StatusCode Return value of the library call. Source code in pyinst\\abc.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 def set_visa_attribute ( self , name : pyvisa . constants . ResourceAttribute , state : Any ) -> pyvisa . constants . StatusCode : \"\"\"Set the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Args: name: Attribute for which the state is to be modified. state: The state of the attribute to be set for the specified object. Returns: Return value of the library call. \"\"\" return self . _inst . set_visa_attribute ( name , state ) get_visa_attribute ( name ) \u00a4 Retrieves the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Parameters: Name Type Description Default name pyvisa . constants . ResourceAttribute Resource attribute for which the state query is made. required Returns: Type Description Any The state of the queried attribute for a specified resource. Source code in pyinst\\abc.py 454 455 456 457 458 459 460 461 462 463 464 465 466 def get_visa_attribute ( self , name : pyvisa . constants . ResourceAttribute ) -> Any : \"\"\"Retrieves the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Args: name: Resource attribute for which the state query is made. Returns: The state of the queried attribute for a specified resource. \"\"\" return self . _inst . get_visa_attribute ( name ) RawSerialInstrument ( resource_name , baudrate , bytesize = SerialByteSize . EIGHTBITS , parity = SerialParity . NONE , stopbits = SerialStopBits . ONE , read_termination = SERIAL_READ_TERMINATION , write_termination = SERIAL_WRITE_TERMINATION , read_timeout = SERIAL_READ_TIMEOUT , write_timeout = SERIAL_WRITE_TIMEOUT , query_delay = SERIAL_QUERY_DELAY , encoding = 'ascii' , ** kwargs ) \u00a4 Bases: BaseInstrument Instrument based on raw serial communication. Compared to VISA compatible instruments, SerialRawInstrument do not have a common application architecture. It depends on the manufactory. SerialRawInstrument creates a proxy object using pySerial to communicate with instruments. Refer to pySerial Documents for more information. Parameters: Name Type Description Default resource_name str Serial port name. required baudrate int Baud rate such as 9600 or 115200 etc.. required bytesize SerialByteSize Number of data bits. SerialByteSize.EIGHTBITS parity SerialParity Parity checking. SerialParity.NONE stopbits SerialStopBits Number of stop bits. SerialStopBits.ONE read_termination str Read termination character. SERIAL_READ_TERMINATION write_termination str Write termination character. SERIAL_WRITE_TERMINATION read_timeout int Timeout in milliseconds for read operations. SERIAL_READ_TIMEOUT write_timeout int Timeout in milliseconds for write operations. SERIAL_WRITE_TIMEOUT query_delay float Delay in seconds between write and read operations. SERIAL_QUERY_DELAY encoding str Encoding used for read and write operations. 'ascii' Source code in pyinst\\abc.py 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 def __init__ ( self , resource_name : str , baudrate : int , bytesize : SerialByteSize = SerialByteSize . EIGHTBITS , parity : SerialParity = SerialParity . NONE , stopbits : SerialStopBits = SerialStopBits . ONE , read_termination : str = SERIAL_READ_TERMINATION , write_termination : str = SERIAL_WRITE_TERMINATION , read_timeout : int = SERIAL_READ_TIMEOUT , write_timeout : int = SERIAL_WRITE_TIMEOUT , query_delay : float = SERIAL_QUERY_DELAY , encoding : str = \"ascii\" , ** kwargs ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. bytesize: Number of data bits. parity: Parity checking. stopbits: Number of stop bits. read_termination: Read termination character. write_termination: Write termination character. read_timeout: Timeout in milliseconds for read operations. write_timeout: Timeout in milliseconds for write operations. query_delay: Delay in seconds between write and read operations. encoding: Encoding used for read and write operations. \"\"\" __serial = serial . Serial ( port = resource_name , baudrate = baudrate , bytesize = bytesize . value , parity = parity . value , stopbits = stopbits . value , timeout = read_timeout , write_timeout = write_timeout , ) self . __serial = __serial self . __read_termination = read_termination self . __write_termination = write_termination self . __encoding = encoding self . __query_delay = query_delay super () . __init__ ( resource_name = resource_name ) close () \u00a4 Close the serial port immediately. Source code in pyinst\\abc.py 532 533 534 def close ( self ) -> None : \"\"\"Close the serial port immediately.\"\"\" self . __serial . close () command ( message ) \u00a4 Write a serial command without read back. Alias of write(message). Parameters: Name Type Description Default message str message to be sent. required Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 536 537 538 539 540 541 542 543 544 545 546 547 548 def command ( self , message : str ) -> int : \"\"\" Write a serial command without read back. Alias of write(message). Args: message: message to be sent. Returns: Number of bytes written. \"\"\" return self . write ( message ) write ( message , termination = None , encoding = None ) \u00a4 Write a string message to the device. The write_termination is always appended to it. Parameters: Name Type Description Default message str message to be sent. required termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 def write ( self , message : str , termination : Optional [ str ] = None , encoding : Optional [ str ] = None , ) -> int : \"\"\"Write a string message to the device. The write_termination is always appended to it. Args: message: message to be sent. termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Number of bytes written. \"\"\" tx_str = ' {message}{term} ' . format ( message = message , term = termination or self . __write_termination ) tx_bytes = tx_str . encode ( encoding or self . __encoding ) # clear input buffer so the data buffered before command is cleared self . __serial . reset_input_buffer () return self . __serial . write ( tx_bytes ) read ( termination = None , encoding = None ) \u00a4 Read a string from the device. Reading stops when the device stops sending, or the termination characters sequence was detected. Parameters: Name Type Description Default termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description str Message read from the instrument and decoded. Source code in pyinst\\abc.py 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 def read ( self , termination : Optional [ str ] = None , encoding : Optional [ str ] = None ) -> str : \"\"\"Read a string from the device. Reading stops when the device stops sending, or the termination characters sequence was detected. Args: termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Message read from the instrument and decoded. \"\"\" buffer = bytes () term = termination or self . __read_termination encoding = encoding or self . __encoding while True : rx = self . __serial . read () if not rx : raise InstrIOError ( 'Timeout before read_termination received.' ) buffer += rx if buffer . endswith ( term . encode ( encoding )): break return buffer . decode ( encoding ) . rstrip ( term ) query ( message , delay = None ) \u00a4 A combination of write(message) and read() Parameters: Name Type Description Default message str The message to send. required delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None Returns: Type Description str Answer from the device. Source code in pyinst\\abc.py 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 def query ( self , message : str , delay : Optional [ float ] = None ) -> str : \"\"\"A combination of write(message) and read() Args: message: The message to send. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. Returns: Answer from the device. \"\"\" self . write ( message ) time . sleep ( delay or self . __query_delay ) return self . read () OpticalFrequencySetter \u00a4 Bases: ABC Instrument with optical frequency/wavelength setting. min_frequency () abstractmethod property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\abc.py 635 636 637 638 639 @property @abstractmethod def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return LIGHTSPEED / self . max_wavelength max_frequency () abstractmethod property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\abc.py 641 642 643 644 645 @property @abstractmethod def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return LIGHTSPEED / self . min_wavelength min_wavelength () abstractmethod property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\abc.py 647 648 649 650 651 @property @abstractmethod def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return LIGHTSPEED / self . max_frequency max_wavelength () abstractmethod property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\abc.py 653 654 655 656 657 @property @abstractmethod def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return LIGHTSPEED / self . min_frequency get_frequency () abstractmethod \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\abc.py 659 660 661 662 663 664 665 666 667 @abstractmethod def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return round ( LIGHTSPEED / self . get_wavelength (), 6 ) set_frequency ( frequency ) abstractmethod \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\abc.py 669 670 671 672 673 674 675 676 677 @abstractmethod def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" wavelength = round ( LIGHTSPEED / frequency , 6 ) self . set_wavelength ( wavelength ) get_wavelength () abstractmethod \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\abc.py 679 680 681 682 683 684 685 686 @abstractmethod def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return round ( LIGHTSPEED / self . get_frequency (), 6 ) set_wavelength ( wavelength ) abstractmethod \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\abc.py 688 689 690 691 692 693 694 695 696 @abstractmethod def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" frequency = round ( LIGHTSPEED / wavelength , 6 ) self . set_frequency ( frequency ) TypeOPM \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Power Meter. min_avg_time () abstractmethod property \u00a4 The minimum averaging time in ms. Source code in pyinst\\abc.py 704 705 706 707 @property @abstractmethod def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" max_avg_time () abstractmethod property \u00a4 The maximum averaging time in ms. Source code in pyinst\\abc.py 709 710 711 712 @property @abstractmethod def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" min_pow_cal () abstractmethod property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\abc.py 714 715 716 717 @property @abstractmethod def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" max_pow_cal () abstractmethod property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\abc.py 719 720 721 722 @property @abstractmethod def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" get_power_value () abstractmethod \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Note It is possible that some OPM models defined the power calibration opposite in sign, but it is normalized in pyinst. Please refer to the math function above. Returns: Type Description float The value of the optical power. Source code in pyinst\\abc.py 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 @abstractmethod def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Note: It is possible that some OPM models defined the power calibration opposite in sign, but it is normalized in pyinst. Please refer to the math function above. Returns: The value of the optical power. \"\"\" get_power_unit () abstractmethod \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\abc.py 743 744 745 746 747 748 749 @abstractmethod def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" set_power_unit ( unit ) abstractmethod \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\abc.py 751 752 753 754 755 756 757 @abstractmethod def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" get_power () \u00a4 Queries the measured optical power value and unit. Returns: Name Type Description value float The value of the optical power. unit OpticalPowerUnit The unit of the optical power. Source code in pyinst\\abc.py 759 760 761 762 763 764 765 766 def get_power ( self ) -> Tuple [ float , OpticalPowerUnit ]: \"\"\"Queries the measured optical power value and unit. Returns: value: The value of the optical power. unit: The unit of the optical power. \"\"\" return self . get_power_value (), self . get_power_unit () get_dbm_value () \u00a4 Returns the optical power value measured in dBm. If the power unit setting is W, a math conversion will be performed. Returns: Type Description float The value of the optical power in dBm. Source code in pyinst\\abc.py 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 def get_dbm_value ( self ) -> float : \"\"\"Returns the optical power value measured in dBm. If the power unit setting is W, a math conversion will be performed. Returns: The value of the optical power in dBm. \"\"\" unit = self . get_power_unit () value = self . get_power_value () if unit == OpticalPowerUnit . DBM : return value else : return w_to_dbm ( value ) get_w_value () \u00a4 Returns the optical power value measured in W. If the power unit setting is dBm, a math conversion will be performed. Returns: Type Description float The value of the optical power in W. Source code in pyinst\\abc.py 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 def get_w_value ( self ) -> float : \"\"\"Returns the optical power value measured in W. If the power unit setting is dBm, a math conversion will be performed. Returns: The value of the optical power in W. \"\"\" unit = self . get_power_unit () value = self . get_power_value () if unit == OpticalPowerUnit . W : return value else : return dbm_to_w ( value ) get_pow_cal () abstractmethod \u00a4 Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\abc.py 800 801 802 803 804 805 806 807 @abstractmethod def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" set_pow_cal ( value ) abstractmethod \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\abc.py 809 810 811 812 813 814 815 816 @abstractmethod def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" get_avg_time () abstractmethod \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\abc.py 818 819 820 821 822 823 824 825 @abstractmethod def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" set_avg_time ( value ) abstractmethod \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\abc.py 827 828 829 830 831 832 833 834 @abstractmethod def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" TypeVOA \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of a Variable Optical Attenuator. min_att () abstractmethod property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\abc.py 844 845 846 847 848 849 850 851 @property @abstractmethod def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" max_att () abstractmethod property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\abc.py 853 854 855 856 857 858 859 860 @property @abstractmethod def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" min_att_offset () abstractmethod property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\abc.py 862 863 864 865 @property @abstractmethod def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" max_att_offset () abstractmethod property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\abc.py 867 868 869 870 @property @abstractmethod def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" enable ( en = True ) abstractmethod \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 872 873 874 875 876 877 878 879 @abstractmethod def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" disable () abstractmethod \u00a4 Disable the optical output. Source code in pyinst\\abc.py 881 882 883 @abstractmethod def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" is_enabled () abstractmethod \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\abc.py 885 886 887 888 889 890 @abstractmethod def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" get_att () abstractmethod \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Note It is possible that some VOA models defined the attenuation offset opposite in sign. But it is normalized in pyinst to align with the math function above. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\abc.py 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 @abstractmethod def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Note: It is possible that some VOA models defined the attenuation offset opposite in sign. But it is normalized in pyinst to align with the math function above. Returns: The attenuation value in dB. \"\"\" set_att ( att ) abstractmethod \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\abc.py 913 914 915 916 917 918 919 920 921 922 923 @abstractmethod def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" get_att_offset () abstractmethod \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\abc.py 925 926 927 928 929 930 931 932 @abstractmethod def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" set_att_offset ( offset ) abstractmethod \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\abc.py 934 935 936 937 938 939 940 941 @abstractmethod def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" TypeOMA \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Modulation Analyzer. The operating logic is different between vendors/models, so limited methods are defined here. run ( _run = True ) abstractmethod \u00a4 Run (or stop) OMA. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 953 954 955 956 957 958 959 960 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Run (or stop) OMA. Args: _run: True = run, False = stop. \"\"\" stop () abstractmethod \u00a4 Stop OMA. Source code in pyinst\\abc.py 962 963 964 @abstractmethod def stop ( self ) -> None : \"\"\"Stop OMA.\"\"\" TypeOSA \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Spectrum Analyzer. The operating logic is different between vendors/models, so no common methods are defined here. run ( _run = True ) abstractmethod \u00a4 Start repeat sweep. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 976 977 978 979 980 981 982 983 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Start repeat sweep. Args: _run: True = run, False = stop. \"\"\" stop () abstractmethod \u00a4 Stop sweep. Source code in pyinst\\abc.py 985 986 987 @abstractmethod def stop ( self ) -> None : \"\"\"Stop sweep.\"\"\" single () abstractmethod \u00a4 Perform single sweep. Source code in pyinst\\abc.py 989 990 991 @abstractmethod def single ( self ) -> None : \"\"\"Perform single sweep.\"\"\" is_running () abstractmethod \u00a4 Get the sweep state of the OSA. Returns: Type Description bool Whether the repeat sweep is running. Source code in pyinst\\abc.py 993 994 995 996 997 998 999 1000 @abstractmethod def is_running ( self ) -> bool : \"\"\" Get the sweep state of the OSA. Returns: Whether the repeat sweep is running. \"\"\" get_osnr () abstractmethod \u00a4 Get the measured OSNR in dB. Returns: Type Description float The OSNR value in dB. Source code in pyinst\\abc.py 1002 1003 1004 1005 1006 1007 1008 @abstractmethod def get_osnr ( self ) -> float : \"\"\"Get the measured OSNR in dB. Returns: The OSNR value in dB. \"\"\" TypeWM \u00a4 Bases: ABC ABC to define the interfaces of an Optical Wavelength Meter. get_frequency () abstractmethod \u00a4 Queries the measured optical frequency in THz. Returns: Type Description float The measured optical frequency value. Source code in pyinst\\abc.py 1018 1019 1020 1021 1022 1023 1024 1025 1026 @abstractmethod def get_frequency ( self ) -> float : \"\"\" Queries the measured optical frequency in THz. Returns: The measured optical frequency value. \"\"\" return round ( LIGHTSPEED / self . get_wavelength (), 6 ) get_wavelength () abstractmethod \u00a4 Queries the mearured optical wavelength in nm. Returns: Type Description float The measured optical wavelength value. Source code in pyinst\\abc.py 1028 1029 1030 1031 1032 1033 1034 1035 @abstractmethod def get_wavelength ( self ) -> float : \"\"\"Queries the mearured optical wavelength in nm. Returns: The measured optical wavelength value. \"\"\" return round ( LIGHTSPEED / self . get_frequency (), 6 ) run ( _run = True ) abstractmethod \u00a4 Start repeat measurement. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 1037 1038 1039 1040 1041 1042 1043 1044 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Start repeat measurement. Args: _run: True = run, False = stop. \"\"\" stop () abstractmethod \u00a4 Stop repeat measurement. Source code in pyinst\\abc.py 1046 1047 1048 @abstractmethod def stop ( self ) -> None : \"\"\"Stop repeat measurement.\"\"\" single () abstractmethod \u00a4 Perform single measurement. Source code in pyinst\\abc.py 1050 1051 1052 @abstractmethod def single ( self ) -> None : \"\"\"Perform single measurement.\"\"\" is_running () abstractmethod \u00a4 Get the measurement state of the wavemeter. Returns: Type Description bool True = reapeat measurement, False = stopped. Source code in pyinst\\abc.py 1054 1055 1056 1057 1058 1059 1060 1061 @abstractmethod def is_running ( self ) -> bool : \"\"\" Get the measurement state of the wavemeter. Returns: True = reapeat measurement, False = stopped. \"\"\" TypeOTF \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Tunable Filter. min_bandwidth_in_nm () abstractmethod property \u00a4 The minimum bandwidth in nm. Source code in pyinst\\abc.py 1069 1070 1071 1072 1073 @property @abstractmethod def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" return bw_in_ghz_to_nm ( self . min_bandwidth_in_ghz ) max_bandwidth_in_nm () abstractmethod property \u00a4 The maximum bandwidth in nm. Source code in pyinst\\abc.py 1075 1076 1077 1078 1079 @property @abstractmethod def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" return bw_in_ghz_to_nm ( self . max_bandwidth_in_ghz ) min_bandwidth_in_ghz () abstractmethod property \u00a4 The minimum bandwidth in GHz. Source code in pyinst\\abc.py 1081 1082 1083 1084 1085 @property @abstractmethod def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return bw_in_nm_to_ghz ( self . min_bandwidth_in_nm ) max_bandwidth_in_ghz () abstractmethod property \u00a4 The maximum bandwidth in GHz. Source code in pyinst\\abc.py 1087 1088 1089 1090 1091 @property @abstractmethod def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return bw_in_nm_to_ghz ( self . max_bandwidth_in_nm ) get_bandwidth ( unit ) \u00a4 Get the filter bandwidth value in specified unit. Parameters: Name Type Description Default unit OpticalBandwidthUnit The unit for the bandwidth value. required Returns: Type Description float The bandwidth value in specified unit. Source code in pyinst\\abc.py 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 def get_bandwidth ( self , unit : OpticalBandwidthUnit ) -> float : \"\"\" Get the filter bandwidth value in specified unit. Args: unit: The unit for the bandwidth value. Returns: The bandwidth value in specified unit. \"\"\" unit = OpticalBandwidthUnit ( unit ) if unit == OpticalBandwidthUnit . GHZ : return self . get_bandwidth_in_ghz () else : return self . get_bandwidth_in_nm () set_bandwidth ( value , unit ) \u00a4 Set the filter bandwidth in specified unit. Parameters: Name Type Description Default value int | float The bandwidth value in specified unit. required unit OpticalBandwidthUnit The unit of the bandwidth value. required Source code in pyinst\\abc.py 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 def set_bandwidth ( self , value : int | float , unit : OpticalBandwidthUnit ) -> None : \"\"\" Set the filter bandwidth in specified unit. Args: value: The bandwidth value in specified unit. unit: The unit of the bandwidth value. \"\"\" unit = OpticalBandwidthUnit ( unit ) if unit == OpticalBandwidthUnit . GHZ : return self . set_bandwidth_in_ghz ( value ) else : return self . set_bandwidth_in_nm ( value ) get_bandwidth_in_nm () abstractmethod \u00a4 Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\abc.py 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 @abstractmethod def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" bw_ghz = self . get_bandwidth_in_ghz () return round ( bw_in_ghz_to_nm ( bw_ghz ), 6 ) set_bandwidth_in_nm ( value ) abstractmethod \u00a4 Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\abc.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 @abstractmethod def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" bw_ghz = round ( bw_in_nm_to_ghz ( value ), 6 ) self . set_bandwidth_in_ghz ( bw_ghz ) get_bandwidth_in_ghz () abstractmethod \u00a4 Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\abc.py 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 @abstractmethod def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" bw_nm = self . get_bandwidth_in_nm () return round ( bw_in_nm_to_ghz ( bw_nm ), 6 ) set_bandwidth_in_ghz ( value ) abstractmethod \u00a4 Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\abc.py 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 @abstractmethod def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" bw_nm = round ( bw_in_ghz_to_nm ( value ), 6 ) self . set_bandwidth_in_nm ( bw_nm ) TypeTS \u00a4 Bases: ABC ABC to define the interfaces of a Temperature Source. A temperature source is an instrument that has the ability to control environment temperature, including chamber, TEC (Thermo Electric Cooler), thermo-stream, and so on. Each TypeTS class has a ts_type property to indicate the type of the thermostream. It is a member of TemperatureSourceType enum. ts_type () property \u00a4 The type of the temperature source. Source code in pyinst\\abc.py 1181 1182 1183 1184 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The type of the temperature source.\"\"\" return TemperatureSourceType . UNDEFINED set_target_temp ( value ) abstractmethod \u00a4 Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\abc.py 1186 1187 1188 1189 1190 1191 1192 1193 @abstractmethod def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\" get_target_temp () abstractmethod \u00a4 Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\abc.py 1195 1196 1197 1198 1199 1200 1201 1202 @abstractmethod def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\" get_current_temp () abstractmethod \u00a4 Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\abc.py 1204 1205 1206 1207 1208 1209 1210 1211 @abstractmethod def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\" set_temp_unit ( unit ) abstractmethod \u00a4 Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\abc.py 1213 1214 1215 1216 1217 1218 1219 1220 @abstractmethod def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\" get_temp_unit () abstractmethod \u00a4 Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\abc.py 1222 1223 1224 1225 1226 1227 1228 1229 @abstractmethod def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\" TypeSW \u00a4 Bases: ABC ABC to define the interfaces of an Optical Switch. set_channel ( channel ) abstractmethod \u00a4 Switch to the specified channel route. Parameters: Name Type Description Default channel int The channel number. required Source code in pyinst\\abc.py 1237 1238 1239 1240 1241 1242 1243 1244 @abstractmethod def set_channel ( self , channel : int ) -> None : \"\"\" Switch to the specified channel route. Args: channel: The channel number. \"\"\" get_channel () abstractmethod \u00a4 Queries the current channel route of the switch. Returns: Type Description int The channel number of current route. Source code in pyinst\\abc.py 1246 1247 1248 1249 1250 1251 1252 1253 @abstractmethod def get_channel ( self ) -> int : \"\"\" Queries the current channel route of the switch. Returns: The channel number of current route. \"\"\" TypeMSW \u00a4 Bases: ABC ABC to define the interfaces of an Optical Matrix Switch. connect ( port1 , port2 , enable = True ) abstractmethod \u00a4 Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use check to confirm whether either port is already in use. Parameters: Name Type Description Default port1 int The valid port at one end of the path. required port2 int The valid port at the other end of the path. required enable bool Whether to enable the connection. True Source code in pyinst\\abc.py 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 @abstractmethod def connect ( self , port1 : int , port2 : int , enable : bool = True ) -> None : \"\"\" Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use `check` to confirm whether either port is already in use. Args: port1: The valid port at one end of the path. port2: The valid port at the other end of the path. enable: Whether to enable the connection. \"\"\" connected_with ( port ) abstractmethod \u00a4 Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Parameters: Name Type Description Default port int The port number to check connection information. required Returns: Type Description Optional [ int ] Connection information for the specified port. Optional [ int ] None = No connection exists. Optional [ int ] Optional [ int ] int N = Port number at other end of the connection. Source code in pyinst\\abc.py 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 @abstractmethod def connected_with ( self , port : int ) -> Optional [ int ]: \"\"\" Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Args: port: The port number to check connection information. Returns: Connection information for the specified port. None = No connection exists. int N = Port number at other end of the connection. \"\"\" clear ( port ) abstractmethod \u00a4 Clears a configured optical connection connected to the specified port. Parameters: Name Type Description Default port int The port at either end of the configured connection. required Source code in pyinst\\abc.py 1296 1297 1298 1299 1300 1301 1302 1303 @abstractmethod def clear ( self , port : int ) -> None : \"\"\" Clears a configured optical connection connected to the specified port. Args: port: The port at either end of the configured connection. \"\"\" clear_all () abstractmethod \u00a4 Clears all configured optical connections. Source code in pyinst\\abc.py 1305 1306 1307 @abstractmethod def clear_all ( self ) -> None : \"\"\"Clears all configured optical connections.\"\"\" check ( port1 , port2 ) abstractmethod \u00a4 To check if port1 and port2 are both not in use. Parameters: Name Type Description Default port1 int The port at one end of the path. required port2 int The port at the other end of the path. required Returns: Type Description bool True = Both ports available (not in use). bool False = Conflict; one or both ports already in use. Source code in pyinst\\abc.py 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 @abstractmethod def check ( self , port1 : int , port2 : int ) -> bool : \"\"\" To check if port1 and port2 are both not in use. Args: port1: The port at one end of the path. port2: The port at the other end of the path. Returns: True = Both ports available (not in use). False = Conflict; one or both ports already in use. \"\"\" enable ( port , enable = True ) abstractmethod \u00a4 Sets the connection state of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required enable bool True = Enable | False = Disable. True Source code in pyinst\\abc.py 1324 1325 1326 1327 1328 1329 1330 1331 1332 @abstractmethod def enable ( self , port : int , enable : bool = True ) -> None : \"\"\" Sets the connection state of a configured optical connection. Args: port: The port at either end of the connection. enable: True = Enable | False = Disable. \"\"\" disable ( port ) abstractmethod \u00a4 Disable the connection of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required Source code in pyinst\\abc.py 1334 1335 1336 1337 1338 1339 1340 1341 @abstractmethod def disable ( self , port : int ) -> None : \"\"\" Disable the connection of a configured optical connection. Args: port: The port at either end of the connection. \"\"\" is_enabled ( port ) abstractmethod \u00a4 Returns the connection state of a configured optical connection. Returns: Type Description bool True = Enabled | False = Disabled Source code in pyinst\\abc.py 1343 1344 1345 1346 1347 1348 1349 1350 @abstractmethod def is_enabled ( self , port : int ) -> bool : \"\"\" Returns the connection state of a configured optical connection. Returns: True = Enabled | False = Disabled \"\"\" TypePS \u00a4 Bases: ABC ABC to define the interfaces of a Power Supply. min_voltage () abstractmethod property \u00a4 The minimum programmable voltage level in V. Source code in pyinst\\abc.py 1358 1359 1360 1361 @property @abstractmethod def min_voltage ( self ) -> float : \"\"\"The minimum programmable voltage level in V.\"\"\" max_voltage () abstractmethod property \u00a4 The maximum programmable voltage level in V. Source code in pyinst\\abc.py 1363 1364 1365 1366 @property @abstractmethod def max_voltage ( self ) -> float : \"\"\"The maximum programmable voltage level in V.\"\"\" min_current () abstractmethod property \u00a4 The minimum programmable current level in A. Source code in pyinst\\abc.py 1368 1369 1370 1371 @property @abstractmethod def min_current ( self ) -> float : \"\"\"The minimum programmable current level in A.\"\"\" max_current () abstractmethod property \u00a4 The maximum programmable current level in A. Source code in pyinst\\abc.py 1373 1374 1375 1376 @property @abstractmethod def max_current ( self ) -> float : \"\"\"The maximum programmable current level in A.\"\"\" enable ( en = True ) abstractmethod \u00a4 Enables (or disables) the outputs of the power supply. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1378 1379 1380 1381 1382 1383 1384 1385 @abstractmethod def enable ( self , en : bool = True ) -> None : \"\"\" Enables (or disables) the outputs of the power supply. Args: en: `True` = Enable, `False` = Disable. \"\"\" disable () abstractmethod \u00a4 Disables the output of the power supply. Source code in pyinst\\abc.py 1387 1388 1389 @abstractmethod def disable ( self ) -> None : \"\"\"Disables the output of the power supply.\"\"\" is_enabled () abstractmethod \u00a4 Queries whether the output of the power supply is enabled. Returns: Type Description bool True = Enabled, False = Disabled Source code in pyinst\\abc.py 1391 1392 1393 1394 1395 1396 1397 1398 @abstractmethod def is_enabled ( self ) -> bool : \"\"\" Queries whether the output of the power supply is enabled. Returns: `True` = Enabled, `False` = Disabled \"\"\" set_voltage_limit ( value ) abstractmethod \u00a4 Sets the immediate voltage level of the power supply. Parameters: Name Type Description Default value int | float The voltage level in V. required Source code in pyinst\\abc.py 1400 1401 1402 1403 1404 1405 1406 1407 @abstractmethod def set_voltage_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate voltage level of the power supply. Args: value: The voltage level in V. \"\"\" get_voltage_limit () abstractmethod \u00a4 Queries the immediate voltage level of the power supply. Returns: Type Description float The voltage level in V. Source code in pyinst\\abc.py 1409 1410 1411 1412 1413 1414 1415 1416 @abstractmethod def get_voltage_limit ( self ) -> float : \"\"\" Queries the immediate voltage level of the power supply. Returns: The voltage level in V. \"\"\" measure_voltage () abstractmethod \u00a4 Queries the voltage measured at the sense terminals of the power supply. Returns: Type Description float The voltage measured in V. Source code in pyinst\\abc.py 1418 1419 1420 1421 1422 1423 1424 1425 @abstractmethod def measure_voltage ( self ) -> float : \"\"\"Queries the voltage measured at the sense terminals of the power supply. Returns: The voltage measured in V. \"\"\" set_current_limit ( value ) abstractmethod \u00a4 Sets the immediate current level of the power supply. Parameters: Name Type Description Default value int | float The current level in A. required Source code in pyinst\\abc.py 1427 1428 1429 1430 1431 1432 1433 1434 @abstractmethod def set_current_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate current level of the power supply. Args: value: The current level in A. \"\"\" get_current_limit () abstractmethod \u00a4 Queries the immediate current level of the power supply. Returns: Type Description float The current level in A. Source code in pyinst\\abc.py 1436 1437 1438 1439 1440 1441 1442 1443 @abstractmethod def get_current_limit ( self ) -> float : \"\"\" Queries the immediate current level of the power supply. Returns: The current level in A. \"\"\" measure_current () abstractmethod \u00a4 Queries the current measured across the current sense resistor inside the power supply. Returns: Type Description float The current measured in A. Source code in pyinst\\abc.py 1445 1446 1447 1448 1449 1450 1451 1452 @abstractmethod def measure_current ( self ) -> float : \"\"\"Queries the current measured across the current sense resistor inside the power supply. Returns: The current measured in A. \"\"\" TypePSwithOvpOcpFunctions \u00a4 Bases: TypePS ABC to define the interfaces of a Power Supply with OCP & OVP functions. set_ocp_level ( level ) abstractmethod \u00a4 Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use is_ocp_tripped() to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the clear_ocp() method after the condition that caused the OCP trip is removed. Parameters: Name Type Description Default level int | float The OCP level in A. required Source code in pyinst\\abc.py 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 @abstractmethod def set_ocp_level ( self , level : int | float ) -> None : \"\"\" Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use `is_ocp_tripped()` to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the `clear_ocp()` method after the condition that caused the OCP trip is removed. Args: level: The OCP level in A. \"\"\" get_ocp_level () abstractmethod \u00a4 Returns the overcurrent protection trip level presently programmed. See set_ocp_level() for more details. Returns: Type Description float The OCP level in A. Source code in pyinst\\abc.py 1475 1476 1477 1478 1479 1480 1481 1482 1483 @abstractmethod def get_ocp_level ( self ) -> float : \"\"\"Returns the overcurrent protection trip level presently programmed. See `set_ocp_level()` for more details. Returns: The OCP level in A. \"\"\" enable_ocp ( enable = True ) abstractmethod \u00a4 Enables (or disables) the overcurrent protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1485 1486 1487 1488 1489 1490 1491 1492 @abstractmethod def enable_ocp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overcurrent protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\" disable_ocp () abstractmethod \u00a4 Disables the overcurrent protection function of the power supply. Source code in pyinst\\abc.py 1494 1495 1496 1497 @abstractmethod def disable_ocp ( self ) -> None : \"\"\"Disables the overcurrent protection function of the power supply. \"\"\" is_ocp_enabled () abstractmethod \u00a4 Queries whether the overcurrent protection function of the power supply is enabled. Returns: Type Description bool Whether the OCP function is enabled. Source code in pyinst\\abc.py 1499 1500 1501 1502 1503 1504 1505 1506 @abstractmethod def is_ocp_enabled ( self ) -> bool : \"\"\"Queries whether the overcurrent protection function of the power supply is enabled. Returns: Whether the OCP function is enabled. \"\"\" is_ocp_tripped () abstractmethod \u00a4 Queries if the overcurrent protection circuit is tripped and not cleared. Returns: Type Description bool If the overcurrent protection circuit is tripped and not cleared. Source code in pyinst\\abc.py 1508 1509 1510 1511 1512 1513 1514 1515 @abstractmethod def is_ocp_tripped ( self ) -> bool : \"\"\"Queries if the overcurrent protection circuit is tripped and not cleared. Returns: If the overcurrent protection circuit is tripped and not cleared. \"\"\" clear_ocp () abstractmethod \u00a4 This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\abc.py 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 @abstractmethod def clear_ocp ( self ) -> None : \"\"\"This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note: Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. \"\"\" set_ovp_level ( level ) abstractmethod \u00a4 Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use is_ovp_tripped() to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the clear_ovp() method after the condition that caused the OVP trip is removed. Parameters: Name Type Description Default level int | float The OVP level in V. required Source code in pyinst\\abc.py 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 @abstractmethod def set_ovp_level ( self , level : int | float ) -> None : \"\"\" Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use `is_ovp_tripped()` to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the `clear_ovp()` method after the condition that caused the OVP trip is removed. Args: level: The OVP level in V. \"\"\" get_ovp_level () abstractmethod \u00a4 Returns the overvoltage protection trip level presently programmed. See set_ovp_level() for more details. Returns: Type Description float The OVP level in V. Source code in pyinst\\abc.py 1543 1544 1545 1546 1547 1548 1549 1550 1551 @abstractmethod def get_ovp_level ( self ) -> float : \"\"\"Returns the overvoltage protection trip level presently programmed. See `set_ovp_level()` for more details. Returns: The OVP level in V. \"\"\" enable_ovp ( enable = True ) abstractmethod \u00a4 Enables (or disables) the overvoltage protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1553 1554 1555 1556 1557 1558 1559 1560 @abstractmethod def enable_ovp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overvoltage protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\" disable_ovp () abstractmethod \u00a4 Disables the overvoltage protection function of the power supply. Source code in pyinst\\abc.py 1562 1563 1564 1565 @abstractmethod def disable_ovp ( self ) -> None : \"\"\"Disables the overvoltage protection function of the power supply. \"\"\" is_ovp_enabled () abstractmethod \u00a4 Queries whether the overvoltage protection function of the power supply is enabled. Returns: Type Description bool Whether the OVP function is enabled. Source code in pyinst\\abc.py 1567 1568 1569 1570 1571 1572 1573 1574 @abstractmethod def is_ovp_enabled ( self ) -> bool : \"\"\"Queries whether the overvoltage protection function of the power supply is enabled. Returns: Whether the OVP function is enabled. \"\"\" is_ovp_tripped () abstractmethod \u00a4 Queries if the overvoltage protection circuit is tripped and not cleared. Returns: Type Description bool If the overvoltage protection circuit is tripped and not cleared. Source code in pyinst\\abc.py 1576 1577 1578 1579 1580 1581 1582 1583 @abstractmethod def is_ovp_tripped ( self ) -> bool : \"\"\"Queries if the overvoltage protection circuit is tripped and not cleared. Returns: If the overvoltage protection circuit is tripped and not cleared. \"\"\" clear_ovp () abstractmethod \u00a4 This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\abc.py 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 @abstractmethod def clear_ovp ( self ) -> None : \"\"\"This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note: Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. \"\"\" TypePDLE \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of a PDL Emulator. min_pdl () abstractmethod property \u00a4 The minimum settable PDL value. Source code in pyinst\\abc.py 1603 1604 1605 1606 @property @abstractmethod def min_pdl ( self ) -> float : \"\"\"The minimum settable PDL value.\"\"\" max_pdl () abstractmethod property \u00a4 The maximum settable PDL value. Source code in pyinst\\abc.py 1608 1609 1610 1611 @property @abstractmethod def max_pdl ( self ) -> float : \"\"\"The maximum settable PDL value.\"\"\" get_pdl_value () abstractmethod \u00a4 Returns: Type Description float The PDL setting value in dB. Source code in pyinst\\abc.py 1613 1614 1615 1616 1617 1618 @abstractmethod def get_pdl_value ( self ) -> float : \"\"\" Returns: The PDL setting value in dB. \"\"\" set_pdl_value ( value ) abstractmethod \u00a4 Parameters: Name Type Description Default value int | float The PDL setting value in dB. required Source code in pyinst\\abc.py 1620 1621 1622 1623 1624 1625 @abstractmethod def set_pdl_value ( self , value : int | float ) -> None : \"\"\" Args: value: The PDL setting value in dB. \"\"\" TypePOLC \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of a Polarization Controller/Scrambler. start_scrambling ( mode , rate , ** params ) abstractmethod \u00a4 Start scrambling with the specified mode and rate. Parameters: Name Type Description Default mode str Scrambling mode. Valid options depends on specific model. required rate int | float Scrambling rate. Different mode may have different units. required **params Additional scrambling params if any. {} Source code in pyinst\\abc.py 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 @abstractmethod def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : \"\"\" Start scrambling with the specified mode and rate. Args: mode: Scrambling mode. Valid options depends on specific model. rate: Scrambling rate. Different mode may have different units. **params: Additional scrambling params if any. \"\"\" stop_scrambling () abstractmethod \u00a4 Stop scrambling. Source code in pyinst\\abc.py 1644 1645 1646 @abstractmethod def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\" TypePMDE \u00a4 Bases: OpticalFrequencySetter ABC to define the interfaces of a PMD Emulator. set_pmd_value ( pmd , sopmd ) abstractmethod \u00a4 Set PMD (DGD) and SOPMD (Second Order PMD) target value. Parameters: Name Type Description Default pmd int | float The DGD value in ps. required sopmd int | float The 2nd order pmd in ps**2. required Source code in pyinst\\abc.py 1654 1655 1656 1657 1658 1659 1660 1661 1662 @abstractmethod def set_pmd_value ( self , pmd : int | float , sopmd : int | float ) -> None : \"\"\" Set PMD (DGD) and SOPMD (Second Order PMD) target value. Args: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\" get_pmd_value () abstractmethod \u00a4 Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: Name Type Description pmd float The DGD value in ps. sopmd float The 2nd order pmd in ps**2. Source code in pyinst\\abc.py 1664 1665 1666 1667 1668 1669 1670 1671 1672 @abstractmethod def get_pmd_value ( self ) -> Tuple [ float , float ]: \"\"\" Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\"","title":"Abstract Base Classes"},{"location":"api/abc/#abstract-base-classes","text":"This module provides abstract base classes to describe different kinds of instruments. BaseInstrument is the base class of all the Instrument Model classes. VisaInstrument and RawSerialInstrument are classes based on BaseInstrument to describe VISA compatible instruments and serial-port based instruments. There are many other abstract classes to describe a kind of instrument that has some particular functions. For example, OpticalFrequencySetter defines the interfaces of an instrument which has optical frequency/wavelength setting function. Among these ABCs are Instrument Type classes. An Instrument Type class defines the interfaces of a specific instrument type. It always starts with a prefix Type , for example, TypeVOA or TypeOPM . An Instrument Model class will inherit at least one of these Instrument Type classes, and implement the abstract methods inherited. So the interfaces of the same type of instruments can be unified. Besides the standard methods defined by the Instrument Type class, a Instrument Model class may also define its unique methods.","title":"Abstract Base Classes"},{"location":"api/abc/#pyinst.abc.InstrumentMeta","text":"Bases: ABCMeta The meta class of BaseInstrument.","title":"InstrumentMeta"},{"location":"api/abc/#pyinst.abc.InstrumentMeta.ins_type","text":"The instrument type flag of the specific instrument model. Source code in pyinst\\abc.py 50 51 52 53 54 55 56 @property def ins_type ( cls : type ) -> InstrumentType : \"\"\"The instrument type flag of the specific instrument model.\"\"\" value = 0 for base in cls . mro ()[ 2 :]: value |= getattr ( base , 'ins_type' , 0 ) return value","title":"ins_type()"},{"location":"api/abc/#pyinst.abc.BaseInstrument","text":"ABC of all the instrument model classes. Parameters: Name Type Description Default resource_name str The instrument resource name. Please refer to resource_name property for more information. required Source code in pyinst\\abc.py 117 118 119 120 121 122 123 124 def __init__ ( self , resource_name : str ): \"\"\" Args: resource_name: The instrument resource name. Please refer to `resource_name` property for more information. \"\"\" self . __resource_name = resource_name super ( BaseInstrument , self ) . __init__ ()","title":"BaseInstrument"},{"location":"api/abc/#pyinst.abc.BaseInstrument.brand","text":"The brand/manufactory of the instrument. Source code in pyinst\\abc.py 62 63 64 65 @property @abstractmethod def brand ( self ) -> str : \"\"\"The brand/manufactory of the instrument.\"\"\"","title":"brand()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.model","text":"The model name of the instrument. Source code in pyinst\\abc.py 67 68 69 70 @property @abstractmethod def model ( self ) -> str : \"\"\"The model name of the instrument.\"\"\"","title":"model()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.details","text":"A map of information to describe the instrument. Source code in pyinst\\abc.py 72 73 74 75 76 77 @property def details ( self ) -> Mapping [ str , str ]: \"\"\" A map of information to describe the instrument. \"\"\" return {}","title":"details()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.params","text":"A list of dict to define parameters required for object creation. This is mainly used for upper level (e.g. GUI) to render options. dict fields: name (str) : Required. The name of the param, exactly the same in __init__ method. type (str) : Required. options: int | str | bool . options (list) : Optional. Valid options. min (int) : Optional. For type int only. max (int) : Optional. For type int only. Examples: [ { \"name\" : \"slot\" , \"type\" : \"int\" , \"min\" : 1 , \"max\" : 10 }, { \"name\" : \"range_level\" , \"type\" : \"str\" , \"options\" : [ \"HIGH\" , \"LOW\" ] } ] Source code in pyinst\\abc.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @property def params ( self ) -> List [ dict ]: \"\"\" A list of dict to define parameters required for object creation. This is mainly used for upper level (e.g. GUI) to render options. dict fields: - `name (str)`: Required. The name of the param, exactly the same in `__init__` method. - `type (str)`: Required. options: `int` | `str` | `bool`. - `options (list)`: Optional. Valid options. + `min (int)`: Optional. For type `int` only. + `max (int)`: Optional. For type `int` only. Examples: ``` python [ { \"name\": \"slot\", \"type\": \"int\", \"min\": 1, \"max\": 10 }, { \"name\": \"range_level\", \"type\": \"str\", \"options\": [\"HIGH\", \"LOW\"] } ] ``` \"\"\"","title":"params()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.close","text":"Release the instrument resource. Source code in pyinst\\abc.py 139 140 141 @abstractmethod def close ( self ) -> None : \"\"\"Release the instrument resource.\"\"\"","title":"close()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.resource_name","text":"For VISA compatible instruments, it is the resource name or alias of the VISA resource. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument or USB chip. Source code in pyinst\\abc.py 143 144 145 146 147 148 149 150 151 152 153 @property def resource_name ( self ) -> str : \"\"\" - For VISA compatible instruments, it is the resource name or alias of the VISA resource. - For other instruments connected with serial port, it is the port name. - For other instruments connected with USB, it is the S/N of the instrument or USB chip. \"\"\" return self . __resource_name","title":"resource_name()"},{"location":"api/abc/#pyinst.abc.BaseInstrument.create","text":"Create an instance of the instrument model. If an exception is raised during the instance creation, return None. Parameters: Name Type Description Default *args Directly passed to the instrument model class. () **kwargs Directly passed to the instrument model class. {} Returns: Type Description Optional [ Self ] The created instrument model class, or None if creation failed. Source code in pyinst\\abc.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 @classmethod def create ( cls , * args , ** kwargs ) -> Optional [ Self ]: \"\"\"Create an instance of the instrument model. If an exception is raised during the instance creation, return None. Args: *args: Directly passed to the instrument model class. **kwargs: Directly passed to the instrument model class. Returns: The created instrument model class, or None if creation failed. \"\"\" try : instance = cls ( * args , ** kwargs ) except : instance = None return instance","title":"create()"},{"location":"api/abc/#pyinst.abc.VisaInstrument","text":"Bases: BaseInstrument Base class of VISA compatible instruments that use message based communication. VisaInstrument creates a proxy object with pyvisa to communicate with VISA compatible instruments. Refer to PyVISA Documents for more information. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. VI_READ_TERMINATION write_termination str Write termination character. VI_WRITE_TERMINATION timeout int Timeout in milliseconds for all resource I/O operations. VI_TIMEOUT open_timeout int If the access_mode parameter requests a lock, then this parameter specifies the absolute time period (in milliseconds) that the resource waits to get unlocked before this operation returns an error. VI_OPEN_TIMEOUT query_delay float Delay in seconds between write and read operations. VI_QUERY_DELAY encoding str Encoding used for read and write operations. 'ascii' **kwargs directly passed to rm.open_resource {} Source code in pyinst\\abc.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 def __init__ ( self , resource_name : str , read_termination : str = VI_READ_TERMINATION , write_termination : str = VI_WRITE_TERMINATION , timeout : int = VI_TIMEOUT , open_timeout : int = VI_OPEN_TIMEOUT , query_delay : float = VI_QUERY_DELAY , encoding : str = \"ascii\" , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. timeout: Timeout in milliseconds for all resource I/O operations. open_timeout: If the access_mode parameter requests a lock, then this parameter specifies the absolute time period (in milliseconds) that the resource waits to get unlocked before this operation returns an error. query_delay: Delay in seconds between write and read operations. encoding: Encoding used for read and write operations. **kwargs: directly passed to `rm.open_resource` \"\"\" super () . __init__ ( resource_name = resource_name ) rm = pyvisa . ResourceManager () self . _inst : pyvisa . resources . MessageBasedResource = rm . open_resource ( resource_name , read_termination = read_termination , write_termination = write_termination , open_timeout = open_timeout , timeout = timeout , query_delay = query_delay , encoding = encoding , ** kwargs ) self . _check_communication ()","title":"VisaInstrument"},{"location":"api/abc/#pyinst.abc.VisaInstrument.resource_name","text":"Resource name or alias of the VISA resource. Source code in pyinst\\abc.py 237 238 239 240 @property def resource_name ( self ) -> str : \"\"\"Resource name or alias of the VISA resource.\"\"\" return self . __resource_name","title":"resource_name()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.resource_info","text":"Get the (extended) information of the VISA resource. Source code in pyinst\\abc.py 242 243 244 245 @property def resource_info ( self ) -> pyvisa . highlevel . ResourceInfo : \"\"\"Get the (extended) information of the VISA resource.\"\"\" return self . _inst . resource_info","title":"resource_info()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.idn","text":"Returns a string that uniquely identifies the instrument. Source code in pyinst\\abc.py 247 248 249 250 @property def idn ( self ) -> str : \"\"\"Returns a string that uniquely identifies the instrument.\"\"\" return self . query ( '*IDN?' )","title":"idn()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.opc","text":"Operation complete query. Source code in pyinst\\abc.py 252 253 254 255 @property def opc ( self ) -> str : \"\"\"Operation complete query.\"\"\" return self . query ( '*OPC?' )","title":"opc()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.close","text":"Closes the VISA session and marks the handle as invalid. Source code in pyinst\\abc.py 257 258 259 260 261 def close ( self ) -> None : \"\"\" Closes the VISA session and marks the handle as invalid. \"\"\" self . _inst . close ()","title":"close()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.command","text":"Write a VISA command without read back. Alias of write(message). Parameters: Name Type Description Default message str The message to be sent. required Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 276 277 278 279 280 281 282 283 284 285 286 287 288 def command ( self , message : str ) -> int : \"\"\" Write a VISA command without read back. Alias of write(message). Args: message: The message to be sent. Returns: Number of bytes written. \"\"\" return self . write ( message )","title":"command()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.write","text":"Write a string message to the device. The write_termination is always appended to it. Parameters: Name Type Description Default message str The message to be sent. required termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 def write ( self , message : str , termination : Optional [ str ] = None , encoding : Optional [ str ] = None , ) -> int : \"\"\"Write a string message to the device. The write_termination is always appended to it. Args: message: The message to be sent. termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Number of bytes written. \"\"\" return self . _inst . write ( message , termination , encoding )","title":"write()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.read","text":"Read a string from the device. Reading stops when the device stops sending (e.g. by setting appropriate bus lines), or the termination characters sequence was detected. Attention: Only the last character of the termination characters is really used to stop reading, however, the whole sequence is compared to the ending of the read string message. If they don't match, a warning is issued. Parameters: Name Type Description Default termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description str Message read from the instrument and decoded. Source code in pyinst\\abc.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 def read ( self , termination : Optional [ str ] = None , encoding : Optional [ str ] = None ) -> str : \"\"\"Read a string from the device. Reading stops when the device stops sending (e.g. by setting appropriate bus lines), or the termination characters sequence was detected. Attention: Only the last character of the termination characters is really used to stop reading, however, the whole sequence is compared to the ending of the read string message. If they don't match, a warning is issued. Args: termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Message read from the instrument and decoded. \"\"\" return self . _inst . read ( termination , encoding )","title":"read()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.query","text":"A combination of write(message) and read() Parameters: Name Type Description Default message str The message to send. required delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None Returns: Type Description str Answer from the device. Source code in pyinst\\abc.py 339 340 341 342 343 344 345 346 347 348 349 350 351 def query ( self , message : str , delay : Optional [ float ] = None ) -> str : \"\"\"A combination of write(message) and read() Args: message: The message to send. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. Returns: Answer from the device. \"\"\" return self . _inst . query ( message , delay )","title":"query()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.read_binary_values","text":"Read values from the device in binary format returning an iterable of values. Parameters: Name Type Description Default datatype pyvisa . util . BINARY_DATATYPES Format string for a single element. See struct module. 'f' by default. 'f' is_big_endian bool Are the data in big or little endian order. Defaults to False. False container Type | Callable [[ Iterable ], Sequence ] Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. list header_fmt pyvisa . util . BINARY_HEADERS Format of the header prefixing the data. Defaults to 'ieee'. 'ieee' expect_termination bool When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. True data_points int Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. 0 chunk_size Optional [ int ] Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. None Returns: Type Description Sequence [ int | float ] Data read from the device. Source code in pyinst\\abc.py 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 def read_binary_values ( self , datatype : pyvisa . util . BINARY_DATATYPES = \"f\" , is_big_endian : bool = False , container : Type | Callable [[ Iterable ], Sequence ] = list , header_fmt : pyvisa . util . BINARY_HEADERS = \"ieee\" , expect_termination : bool = True , data_points : int = 0 , chunk_size : Optional [ int ] = None , ) -> Sequence [ int | float ]: \"\"\"Read values from the device in binary format returning an iterable of values. Args: datatype: Format string for a single element. See struct module. 'f' by default. is_big_endian: Are the data in big or little endian order. Defaults to False. container: Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. header_fmt: Format of the header prefixing the data. Defaults to 'ieee'. expect_termination: When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. data_points: Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. chunk_size: Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. Returns: Data read from the device. \"\"\" return self . _inst . read_binary_values ( datatype , is_big_endian , container , header_fmt , expect_termination , data_points , chunk_size )","title":"read_binary_values()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.query_binary_values","text":"Query the device for values in binary format returning an iterable of values. Parameters: Name Type Description Default message str The message to send. required datatype pyvisa . util . BINARY_DATATYPES Format string for a single element. See struct module. 'f' by default. 'f' is_big_endian bool Are the data in big or little endian order. Defaults to False. False container Type | Callable [[ Iterable ], Sequence ] Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. list delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None header_fmt pyvisa . util . BINARY_HEADERS Format of the header prefixing the data. Defaults to 'ieee'. 'ieee' expect_termination bool When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. True data_points int Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. 0 chunk_size Optional [ int ] Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. None Returns: Type Description Sequence [ int | float ] Data read from the device. Source code in pyinst\\abc.py 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def query_binary_values ( self , message : str , datatype : pyvisa . util . BINARY_DATATYPES = \"f\" , is_big_endian : bool = False , container : Type | Callable [[ Iterable ], Sequence ] = list , delay : Optional [ float ] = None , header_fmt : pyvisa . util . BINARY_HEADERS = \"ieee\" , expect_termination : bool = True , data_points : int = 0 , chunk_size : Optional [ int ] = None , ) -> Sequence [ int | float ]: \"\"\"Query the device for values in binary format returning an iterable of values. Args: message: The message to send. datatype: Format string for a single element. See struct module. 'f' by default. is_big_endian: Are the data in big or little endian order. Defaults to False. container: Container type to use for the output data. Possible values are: list, tuple, np.ndarray, etc, Default to list. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. header_fmt: Format of the header prefixing the data. Defaults to 'ieee'. expect_termination: When set to False, the expected length of the binary values block does not account for the final termination character (the read termination). Defaults to True. data_points: Number of points expected in the block. This is used only if the instrument does not report it itself. This will be converted in a number of bytes based on the datatype. Defaults to 0. chunk_size: Size of the chunks to read from the device. Using larger chunks may be faster for large amount of data. Returns: Data read from the device. \"\"\" return self . _inst . query_binary_values ( message , datatype , is_big_endian , container , delay , header_fmt , expect_termination , data_points , chunk_size )","title":"query_binary_values()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.set_visa_attribute","text":"Set the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Parameters: Name Type Description Default name pyvisa . constants . ResourceAttribute Attribute for which the state is to be modified. required state Any The state of the attribute to be set for the specified object. required Returns: Type Description pyvisa . constants . StatusCode Return value of the library call. Source code in pyinst\\abc.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 def set_visa_attribute ( self , name : pyvisa . constants . ResourceAttribute , state : Any ) -> pyvisa . constants . StatusCode : \"\"\"Set the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Args: name: Attribute for which the state is to be modified. state: The state of the attribute to be set for the specified object. Returns: Return value of the library call. \"\"\" return self . _inst . set_visa_attribute ( name , state )","title":"set_visa_attribute()"},{"location":"api/abc/#pyinst.abc.VisaInstrument.get_visa_attribute","text":"Retrieves the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Parameters: Name Type Description Default name pyvisa . constants . ResourceAttribute Resource attribute for which the state query is made. required Returns: Type Description Any The state of the queried attribute for a specified resource. Source code in pyinst\\abc.py 454 455 456 457 458 459 460 461 462 463 464 465 466 def get_visa_attribute ( self , name : pyvisa . constants . ResourceAttribute ) -> Any : \"\"\"Retrieves the state of an attribute in this resource. One should prefer the dedicated descriptor for often used attributes since those perform checks and automatic conversion on the value. Args: name: Resource attribute for which the state query is made. Returns: The state of the queried attribute for a specified resource. \"\"\" return self . _inst . get_visa_attribute ( name )","title":"get_visa_attribute()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument","text":"Bases: BaseInstrument Instrument based on raw serial communication. Compared to VISA compatible instruments, SerialRawInstrument do not have a common application architecture. It depends on the manufactory. SerialRawInstrument creates a proxy object using pySerial to communicate with instruments. Refer to pySerial Documents for more information. Parameters: Name Type Description Default resource_name str Serial port name. required baudrate int Baud rate such as 9600 or 115200 etc.. required bytesize SerialByteSize Number of data bits. SerialByteSize.EIGHTBITS parity SerialParity Parity checking. SerialParity.NONE stopbits SerialStopBits Number of stop bits. SerialStopBits.ONE read_termination str Read termination character. SERIAL_READ_TERMINATION write_termination str Write termination character. SERIAL_WRITE_TERMINATION read_timeout int Timeout in milliseconds for read operations. SERIAL_READ_TIMEOUT write_timeout int Timeout in milliseconds for write operations. SERIAL_WRITE_TIMEOUT query_delay float Delay in seconds between write and read operations. SERIAL_QUERY_DELAY encoding str Encoding used for read and write operations. 'ascii' Source code in pyinst\\abc.py 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 def __init__ ( self , resource_name : str , baudrate : int , bytesize : SerialByteSize = SerialByteSize . EIGHTBITS , parity : SerialParity = SerialParity . NONE , stopbits : SerialStopBits = SerialStopBits . ONE , read_termination : str = SERIAL_READ_TERMINATION , write_termination : str = SERIAL_WRITE_TERMINATION , read_timeout : int = SERIAL_READ_TIMEOUT , write_timeout : int = SERIAL_WRITE_TIMEOUT , query_delay : float = SERIAL_QUERY_DELAY , encoding : str = \"ascii\" , ** kwargs ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. bytesize: Number of data bits. parity: Parity checking. stopbits: Number of stop bits. read_termination: Read termination character. write_termination: Write termination character. read_timeout: Timeout in milliseconds for read operations. write_timeout: Timeout in milliseconds for write operations. query_delay: Delay in seconds between write and read operations. encoding: Encoding used for read and write operations. \"\"\" __serial = serial . Serial ( port = resource_name , baudrate = baudrate , bytesize = bytesize . value , parity = parity . value , stopbits = stopbits . value , timeout = read_timeout , write_timeout = write_timeout , ) self . __serial = __serial self . __read_termination = read_termination self . __write_termination = write_termination self . __encoding = encoding self . __query_delay = query_delay super () . __init__ ( resource_name = resource_name )","title":"RawSerialInstrument"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.close","text":"Close the serial port immediately. Source code in pyinst\\abc.py 532 533 534 def close ( self ) -> None : \"\"\"Close the serial port immediately.\"\"\" self . __serial . close ()","title":"close()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.command","text":"Write a serial command without read back. Alias of write(message). Parameters: Name Type Description Default message str message to be sent. required Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 536 537 538 539 540 541 542 543 544 545 546 547 548 def command ( self , message : str ) -> int : \"\"\" Write a serial command without read back. Alias of write(message). Args: message: message to be sent. Returns: Number of bytes written. \"\"\" return self . write ( message )","title":"command()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.write","text":"Write a string message to the device. The write_termination is always appended to it. Parameters: Name Type Description Default message str message to be sent. required termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description int Number of bytes written. Source code in pyinst\\abc.py 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 def write ( self , message : str , termination : Optional [ str ] = None , encoding : Optional [ str ] = None , ) -> int : \"\"\"Write a string message to the device. The write_termination is always appended to it. Args: message: message to be sent. termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn str into bytes. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Number of bytes written. \"\"\" tx_str = ' {message}{term} ' . format ( message = message , term = termination or self . __write_termination ) tx_bytes = tx_str . encode ( encoding or self . __encoding ) # clear input buffer so the data buffered before command is cleared self . __serial . reset_input_buffer () return self . __serial . write ( tx_bytes )","title":"write()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.read","text":"Read a string from the device. Reading stops when the device stops sending, or the termination characters sequence was detected. Parameters: Name Type Description Default termination Optional [ str ] Alternative character termination to use. If None, the value of write_termination passed to __init__ method is used. Defaults to None. None encoding Optional [ str ] Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to __init__ method is used. Defaults to None. None Returns: Type Description str Message read from the instrument and decoded. Source code in pyinst\\abc.py 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 def read ( self , termination : Optional [ str ] = None , encoding : Optional [ str ] = None ) -> str : \"\"\"Read a string from the device. Reading stops when the device stops sending, or the termination characters sequence was detected. Args: termination: Alternative character termination to use. If None, the value of write_termination passed to `__init__` method is used. Defaults to None. encoding: Alternative encoding to use to turn bytes into str. If None, the value of encoding passed to `__init__` method is used. Defaults to None. Returns: Message read from the instrument and decoded. \"\"\" buffer = bytes () term = termination or self . __read_termination encoding = encoding or self . __encoding while True : rx = self . __serial . read () if not rx : raise InstrIOError ( 'Timeout before read_termination received.' ) buffer += rx if buffer . endswith ( term . encode ( encoding )): break return buffer . decode ( encoding ) . rstrip ( term )","title":"read()"},{"location":"api/abc/#pyinst.abc.RawSerialInstrument.query","text":"A combination of write(message) and read() Parameters: Name Type Description Default message str The message to send. required delay Optional [ float ] Delay in seconds between write and read operations. If None, defaults to query_delay passed to __init__ method. None Returns: Type Description str Answer from the device. Source code in pyinst\\abc.py 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 def query ( self , message : str , delay : Optional [ float ] = None ) -> str : \"\"\"A combination of write(message) and read() Args: message: The message to send. delay: Delay in seconds between write and read operations. If None, defaults to query_delay passed to `__init__` method. Returns: Answer from the device. \"\"\" self . write ( message ) time . sleep ( delay or self . __query_delay ) return self . read ()","title":"query()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter","text":"Bases: ABC Instrument with optical frequency/wavelength setting.","title":"OpticalFrequencySetter"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\abc.py 635 636 637 638 639 @property @abstractmethod def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return LIGHTSPEED / self . max_wavelength","title":"min_frequency()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\abc.py 641 642 643 644 645 @property @abstractmethod def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return LIGHTSPEED / self . min_wavelength","title":"max_frequency()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\abc.py 647 648 649 650 651 @property @abstractmethod def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return LIGHTSPEED / self . max_frequency","title":"min_wavelength()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\abc.py 653 654 655 656 657 @property @abstractmethod def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return LIGHTSPEED / self . min_frequency","title":"max_wavelength()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\abc.py 659 660 661 662 663 664 665 666 667 @abstractmethod def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return round ( LIGHTSPEED / self . get_wavelength (), 6 )","title":"get_frequency()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\abc.py 669 670 671 672 673 674 675 676 677 @abstractmethod def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" wavelength = round ( LIGHTSPEED / frequency , 6 ) self . set_wavelength ( wavelength )","title":"set_frequency()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\abc.py 679 680 681 682 683 684 685 686 @abstractmethod def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return round ( LIGHTSPEED / self . get_frequency (), 6 )","title":"get_wavelength()"},{"location":"api/abc/#pyinst.abc.OpticalFrequencySetter.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\abc.py 688 689 690 691 692 693 694 695 696 @abstractmethod def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" frequency = round ( LIGHTSPEED / wavelength , 6 ) self . set_frequency ( frequency )","title":"set_wavelength()"},{"location":"api/abc/#pyinst.abc.TypeOPM","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Power Meter.","title":"TypeOPM"},{"location":"api/abc/#pyinst.abc.TypeOPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\abc.py 704 705 706 707 @property @abstractmethod def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\"","title":"min_avg_time()"},{"location":"api/abc/#pyinst.abc.TypeOPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\abc.py 709 710 711 712 @property @abstractmethod def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\"","title":"max_avg_time()"},{"location":"api/abc/#pyinst.abc.TypeOPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\abc.py 714 715 716 717 @property @abstractmethod def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\"","title":"min_pow_cal()"},{"location":"api/abc/#pyinst.abc.TypeOPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\abc.py 719 720 721 722 @property @abstractmethod def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\"","title":"max_pow_cal()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Note It is possible that some OPM models defined the power calibration opposite in sign, but it is normalized in pyinst. Please refer to the math function above. Returns: Type Description float The value of the optical power. Source code in pyinst\\abc.py 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 @abstractmethod def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Note: It is possible that some OPM models defined the power calibration opposite in sign, but it is normalized in pyinst. Please refer to the math function above. Returns: The value of the optical power. \"\"\"","title":"get_power_value()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\abc.py 743 744 745 746 747 748 749 @abstractmethod def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\"","title":"get_power_unit()"},{"location":"api/abc/#pyinst.abc.TypeOPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\abc.py 751 752 753 754 755 756 757 @abstractmethod def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\"","title":"set_power_unit()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_power","text":"Queries the measured optical power value and unit. Returns: Name Type Description value float The value of the optical power. unit OpticalPowerUnit The unit of the optical power. Source code in pyinst\\abc.py 759 760 761 762 763 764 765 766 def get_power ( self ) -> Tuple [ float , OpticalPowerUnit ]: \"\"\"Queries the measured optical power value and unit. Returns: value: The value of the optical power. unit: The unit of the optical power. \"\"\" return self . get_power_value (), self . get_power_unit ()","title":"get_power()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_dbm_value","text":"Returns the optical power value measured in dBm. If the power unit setting is W, a math conversion will be performed. Returns: Type Description float The value of the optical power in dBm. Source code in pyinst\\abc.py 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 def get_dbm_value ( self ) -> float : \"\"\"Returns the optical power value measured in dBm. If the power unit setting is W, a math conversion will be performed. Returns: The value of the optical power in dBm. \"\"\" unit = self . get_power_unit () value = self . get_power_value () if unit == OpticalPowerUnit . DBM : return value else : return w_to_dbm ( value )","title":"get_dbm_value()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_w_value","text":"Returns the optical power value measured in W. If the power unit setting is dBm, a math conversion will be performed. Returns: Type Description float The value of the optical power in W. Source code in pyinst\\abc.py 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 def get_w_value ( self ) -> float : \"\"\"Returns the optical power value measured in W. If the power unit setting is dBm, a math conversion will be performed. Returns: The value of the optical power in W. \"\"\" unit = self . get_power_unit () value = self . get_power_value () if unit == OpticalPowerUnit . W : return value else : return dbm_to_w ( value )","title":"get_w_value()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_pow_cal","text":"Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\abc.py 800 801 802 803 804 805 806 807 @abstractmethod def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\"","title":"get_pow_cal()"},{"location":"api/abc/#pyinst.abc.TypeOPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\abc.py 809 810 811 812 813 814 815 816 @abstractmethod def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\"","title":"set_pow_cal()"},{"location":"api/abc/#pyinst.abc.TypeOPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\abc.py 818 819 820 821 822 823 824 825 @abstractmethod def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\"","title":"get_avg_time()"},{"location":"api/abc/#pyinst.abc.TypeOPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\abc.py 827 828 829 830 831 832 833 834 @abstractmethod def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\"","title":"set_avg_time()"},{"location":"api/abc/#pyinst.abc.TypeVOA","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of a Variable Optical Attenuator.","title":"TypeVOA"},{"location":"api/abc/#pyinst.abc.TypeVOA.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\abc.py 844 845 846 847 848 849 850 851 @property @abstractmethod def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\"","title":"min_att()"},{"location":"api/abc/#pyinst.abc.TypeVOA.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\abc.py 853 854 855 856 857 858 859 860 @property @abstractmethod def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\"","title":"max_att()"},{"location":"api/abc/#pyinst.abc.TypeVOA.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\abc.py 862 863 864 865 @property @abstractmethod def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\"","title":"min_att_offset()"},{"location":"api/abc/#pyinst.abc.TypeVOA.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\abc.py 867 868 869 870 @property @abstractmethod def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\"","title":"max_att_offset()"},{"location":"api/abc/#pyinst.abc.TypeVOA.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 872 873 874 875 876 877 878 879 @abstractmethod def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\"","title":"enable()"},{"location":"api/abc/#pyinst.abc.TypeVOA.disable","text":"Disable the optical output. Source code in pyinst\\abc.py 881 882 883 @abstractmethod def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\"","title":"disable()"},{"location":"api/abc/#pyinst.abc.TypeVOA.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\abc.py 885 886 887 888 889 890 @abstractmethod def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\"","title":"is_enabled()"},{"location":"api/abc/#pyinst.abc.TypeVOA.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Note It is possible that some VOA models defined the attenuation offset opposite in sign. But it is normalized in pyinst to align with the math function above. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\abc.py 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 @abstractmethod def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Note: It is possible that some VOA models defined the attenuation offset opposite in sign. But it is normalized in pyinst to align with the math function above. Returns: The attenuation value in dB. \"\"\"","title":"get_att()"},{"location":"api/abc/#pyinst.abc.TypeVOA.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\abc.py 913 914 915 916 917 918 919 920 921 922 923 @abstractmethod def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\"","title":"set_att()"},{"location":"api/abc/#pyinst.abc.TypeVOA.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\abc.py 925 926 927 928 929 930 931 932 @abstractmethod def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\"","title":"get_att_offset()"},{"location":"api/abc/#pyinst.abc.TypeVOA.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\abc.py 934 935 936 937 938 939 940 941 @abstractmethod def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\"","title":"set_att_offset()"},{"location":"api/abc/#pyinst.abc.TypeOMA","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Modulation Analyzer. The operating logic is different between vendors/models, so limited methods are defined here.","title":"TypeOMA"},{"location":"api/abc/#pyinst.abc.TypeOMA.run","text":"Run (or stop) OMA. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 953 954 955 956 957 958 959 960 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Run (or stop) OMA. Args: _run: True = run, False = stop. \"\"\"","title":"run()"},{"location":"api/abc/#pyinst.abc.TypeOMA.stop","text":"Stop OMA. Source code in pyinst\\abc.py 962 963 964 @abstractmethod def stop ( self ) -> None : \"\"\"Stop OMA.\"\"\"","title":"stop()"},{"location":"api/abc/#pyinst.abc.TypeOSA","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Spectrum Analyzer. The operating logic is different between vendors/models, so no common methods are defined here.","title":"TypeOSA"},{"location":"api/abc/#pyinst.abc.TypeOSA.run","text":"Start repeat sweep. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 976 977 978 979 980 981 982 983 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Start repeat sweep. Args: _run: True = run, False = stop. \"\"\"","title":"run()"},{"location":"api/abc/#pyinst.abc.TypeOSA.stop","text":"Stop sweep. Source code in pyinst\\abc.py 985 986 987 @abstractmethod def stop ( self ) -> None : \"\"\"Stop sweep.\"\"\"","title":"stop()"},{"location":"api/abc/#pyinst.abc.TypeOSA.single","text":"Perform single sweep. Source code in pyinst\\abc.py 989 990 991 @abstractmethod def single ( self ) -> None : \"\"\"Perform single sweep.\"\"\"","title":"single()"},{"location":"api/abc/#pyinst.abc.TypeOSA.is_running","text":"Get the sweep state of the OSA. Returns: Type Description bool Whether the repeat sweep is running. Source code in pyinst\\abc.py 993 994 995 996 997 998 999 1000 @abstractmethod def is_running ( self ) -> bool : \"\"\" Get the sweep state of the OSA. Returns: Whether the repeat sweep is running. \"\"\"","title":"is_running()"},{"location":"api/abc/#pyinst.abc.TypeOSA.get_osnr","text":"Get the measured OSNR in dB. Returns: Type Description float The OSNR value in dB. Source code in pyinst\\abc.py 1002 1003 1004 1005 1006 1007 1008 @abstractmethod def get_osnr ( self ) -> float : \"\"\"Get the measured OSNR in dB. Returns: The OSNR value in dB. \"\"\"","title":"get_osnr()"},{"location":"api/abc/#pyinst.abc.TypeWM","text":"Bases: ABC ABC to define the interfaces of an Optical Wavelength Meter.","title":"TypeWM"},{"location":"api/abc/#pyinst.abc.TypeWM.get_frequency","text":"Queries the measured optical frequency in THz. Returns: Type Description float The measured optical frequency value. Source code in pyinst\\abc.py 1018 1019 1020 1021 1022 1023 1024 1025 1026 @abstractmethod def get_frequency ( self ) -> float : \"\"\" Queries the measured optical frequency in THz. Returns: The measured optical frequency value. \"\"\" return round ( LIGHTSPEED / self . get_wavelength (), 6 )","title":"get_frequency()"},{"location":"api/abc/#pyinst.abc.TypeWM.get_wavelength","text":"Queries the mearured optical wavelength in nm. Returns: Type Description float The measured optical wavelength value. Source code in pyinst\\abc.py 1028 1029 1030 1031 1032 1033 1034 1035 @abstractmethod def get_wavelength ( self ) -> float : \"\"\"Queries the mearured optical wavelength in nm. Returns: The measured optical wavelength value. \"\"\" return round ( LIGHTSPEED / self . get_frequency (), 6 )","title":"get_wavelength()"},{"location":"api/abc/#pyinst.abc.TypeWM.run","text":"Start repeat measurement. Parameters: Name Type Description Default _run bool True = run, False = stop. True Source code in pyinst\\abc.py 1037 1038 1039 1040 1041 1042 1043 1044 @abstractmethod def run ( self , _run : bool = True ) -> None : \"\"\" Start repeat measurement. Args: _run: True = run, False = stop. \"\"\"","title":"run()"},{"location":"api/abc/#pyinst.abc.TypeWM.stop","text":"Stop repeat measurement. Source code in pyinst\\abc.py 1046 1047 1048 @abstractmethod def stop ( self ) -> None : \"\"\"Stop repeat measurement.\"\"\"","title":"stop()"},{"location":"api/abc/#pyinst.abc.TypeWM.single","text":"Perform single measurement. Source code in pyinst\\abc.py 1050 1051 1052 @abstractmethod def single ( self ) -> None : \"\"\"Perform single measurement.\"\"\"","title":"single()"},{"location":"api/abc/#pyinst.abc.TypeWM.is_running","text":"Get the measurement state of the wavemeter. Returns: Type Description bool True = reapeat measurement, False = stopped. Source code in pyinst\\abc.py 1054 1055 1056 1057 1058 1059 1060 1061 @abstractmethod def is_running ( self ) -> bool : \"\"\" Get the measurement state of the wavemeter. Returns: True = reapeat measurement, False = stopped. \"\"\"","title":"is_running()"},{"location":"api/abc/#pyinst.abc.TypeOTF","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of an Optical Tunable Filter.","title":"TypeOTF"},{"location":"api/abc/#pyinst.abc.TypeOTF.min_bandwidth_in_nm","text":"The minimum bandwidth in nm. Source code in pyinst\\abc.py 1069 1070 1071 1072 1073 @property @abstractmethod def min_bandwidth_in_nm ( self ) -> float : \"\"\"The minimum bandwidth in nm.\"\"\" return bw_in_ghz_to_nm ( self . min_bandwidth_in_ghz )","title":"min_bandwidth_in_nm()"},{"location":"api/abc/#pyinst.abc.TypeOTF.max_bandwidth_in_nm","text":"The maximum bandwidth in nm. Source code in pyinst\\abc.py 1075 1076 1077 1078 1079 @property @abstractmethod def max_bandwidth_in_nm ( self ) -> float : \"\"\"The maximum bandwidth in nm.\"\"\" return bw_in_ghz_to_nm ( self . max_bandwidth_in_ghz )","title":"max_bandwidth_in_nm()"},{"location":"api/abc/#pyinst.abc.TypeOTF.min_bandwidth_in_ghz","text":"The minimum bandwidth in GHz. Source code in pyinst\\abc.py 1081 1082 1083 1084 1085 @property @abstractmethod def min_bandwidth_in_ghz ( self ) -> float : \"\"\"The minimum bandwidth in GHz.\"\"\" return bw_in_nm_to_ghz ( self . min_bandwidth_in_nm )","title":"min_bandwidth_in_ghz()"},{"location":"api/abc/#pyinst.abc.TypeOTF.max_bandwidth_in_ghz","text":"The maximum bandwidth in GHz. Source code in pyinst\\abc.py 1087 1088 1089 1090 1091 @property @abstractmethod def max_bandwidth_in_ghz ( self ) -> float : \"\"\"The maximum bandwidth in GHz.\"\"\" return bw_in_nm_to_ghz ( self . max_bandwidth_in_nm )","title":"max_bandwidth_in_ghz()"},{"location":"api/abc/#pyinst.abc.TypeOTF.get_bandwidth","text":"Get the filter bandwidth value in specified unit. Parameters: Name Type Description Default unit OpticalBandwidthUnit The unit for the bandwidth value. required Returns: Type Description float The bandwidth value in specified unit. Source code in pyinst\\abc.py 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 def get_bandwidth ( self , unit : OpticalBandwidthUnit ) -> float : \"\"\" Get the filter bandwidth value in specified unit. Args: unit: The unit for the bandwidth value. Returns: The bandwidth value in specified unit. \"\"\" unit = OpticalBandwidthUnit ( unit ) if unit == OpticalBandwidthUnit . GHZ : return self . get_bandwidth_in_ghz () else : return self . get_bandwidth_in_nm ()","title":"get_bandwidth()"},{"location":"api/abc/#pyinst.abc.TypeOTF.set_bandwidth","text":"Set the filter bandwidth in specified unit. Parameters: Name Type Description Default value int | float The bandwidth value in specified unit. required unit OpticalBandwidthUnit The unit of the bandwidth value. required Source code in pyinst\\abc.py 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 def set_bandwidth ( self , value : int | float , unit : OpticalBandwidthUnit ) -> None : \"\"\" Set the filter bandwidth in specified unit. Args: value: The bandwidth value in specified unit. unit: The unit of the bandwidth value. \"\"\" unit = OpticalBandwidthUnit ( unit ) if unit == OpticalBandwidthUnit . GHZ : return self . set_bandwidth_in_ghz ( value ) else : return self . set_bandwidth_in_nm ( value )","title":"set_bandwidth()"},{"location":"api/abc/#pyinst.abc.TypeOTF.get_bandwidth_in_nm","text":"Get the filter bandwidth in nm. Returns: Type Description float The bandwidth value in nm. Source code in pyinst\\abc.py 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 @abstractmethod def get_bandwidth_in_nm ( self ) -> float : \"\"\" Get the filter bandwidth in nm. Returns: The bandwidth value in nm. \"\"\" bw_ghz = self . get_bandwidth_in_ghz () return round ( bw_in_ghz_to_nm ( bw_ghz ), 6 )","title":"get_bandwidth_in_nm()"},{"location":"api/abc/#pyinst.abc.TypeOTF.set_bandwidth_in_nm","text":"Set the filter bandwidth in nm. Parameters: Name Type Description Default value int | float The bandwidth value in nm. required Source code in pyinst\\abc.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 @abstractmethod def set_bandwidth_in_nm ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in nm. Args: value: The bandwidth value in nm. \"\"\" bw_ghz = round ( bw_in_nm_to_ghz ( value ), 6 ) self . set_bandwidth_in_ghz ( bw_ghz )","title":"set_bandwidth_in_nm()"},{"location":"api/abc/#pyinst.abc.TypeOTF.get_bandwidth_in_ghz","text":"Get the filter bandwidth in GHz. Returns: Type Description float The bandwidth value in GHz. Source code in pyinst\\abc.py 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 @abstractmethod def get_bandwidth_in_ghz ( self ) -> float : \"\"\" Get the filter bandwidth in GHz. Returns: The bandwidth value in GHz. \"\"\" bw_nm = self . get_bandwidth_in_nm () return round ( bw_in_nm_to_ghz ( bw_nm ), 6 )","title":"get_bandwidth_in_ghz()"},{"location":"api/abc/#pyinst.abc.TypeOTF.set_bandwidth_in_ghz","text":"Set the filter bandwidth in GHz. Parameters: Name Type Description Default value int | float The bandwidth value in GHz. required Source code in pyinst\\abc.py 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 @abstractmethod def set_bandwidth_in_ghz ( self , value : int | float ) -> None : \"\"\" Set the filter bandwidth in GHz. Args: value: The bandwidth value in GHz. \"\"\" bw_nm = round ( bw_in_ghz_to_nm ( value ), 6 ) self . set_bandwidth_in_nm ( bw_nm )","title":"set_bandwidth_in_ghz()"},{"location":"api/abc/#pyinst.abc.TypeTS","text":"Bases: ABC ABC to define the interfaces of a Temperature Source. A temperature source is an instrument that has the ability to control environment temperature, including chamber, TEC (Thermo Electric Cooler), thermo-stream, and so on. Each TypeTS class has a ts_type property to indicate the type of the thermostream. It is a member of TemperatureSourceType enum.","title":"TypeTS"},{"location":"api/abc/#pyinst.abc.TypeTS.ts_type","text":"The type of the temperature source. Source code in pyinst\\abc.py 1181 1182 1183 1184 @property def ts_type ( self ) -> TemperatureSourceType : \"\"\"The type of the temperature source.\"\"\" return TemperatureSourceType . UNDEFINED","title":"ts_type()"},{"location":"api/abc/#pyinst.abc.TypeTS.set_target_temp","text":"Set the target temperature. Parameters: Name Type Description Default value int | float The target temperature value. required Source code in pyinst\\abc.py 1186 1187 1188 1189 1190 1191 1192 1193 @abstractmethod def set_target_temp ( self , value : int | float ) -> None : \"\"\" Set the target temperature. Args: value: The target temperature value. \"\"\"","title":"set_target_temp()"},{"location":"api/abc/#pyinst.abc.TypeTS.get_target_temp","text":"Get the target temperature setting. Returns: Type Description float The target temperature setting value. Source code in pyinst\\abc.py 1195 1196 1197 1198 1199 1200 1201 1202 @abstractmethod def get_target_temp ( self ) -> float : \"\"\" Get the target temperature setting. Returns: The target temperature setting value. \"\"\"","title":"get_target_temp()"},{"location":"api/abc/#pyinst.abc.TypeTS.get_current_temp","text":"Queries the current monitored temperature. Returns: Type Description float The current temperature monitor value. Source code in pyinst\\abc.py 1204 1205 1206 1207 1208 1209 1210 1211 @abstractmethod def get_current_temp ( self ) -> float : \"\"\" Queries the current monitored temperature. Returns: The current temperature monitor value. \"\"\"","title":"get_current_temp()"},{"location":"api/abc/#pyinst.abc.TypeTS.set_temp_unit","text":"Set the temperature unit. Parameters: Name Type Description Default unit TemperatureUnit The temperature unit. required Source code in pyinst\\abc.py 1213 1214 1215 1216 1217 1218 1219 1220 @abstractmethod def set_temp_unit ( self , unit : TemperatureUnit ) -> None : \"\"\" Set the temperature unit. Args: unit: The temperature unit. \"\"\"","title":"set_temp_unit()"},{"location":"api/abc/#pyinst.abc.TypeTS.get_temp_unit","text":"Get the temperature unit setting. Returns: Type Description TemperatureUnit The temperature unit. Source code in pyinst\\abc.py 1222 1223 1224 1225 1226 1227 1228 1229 @abstractmethod def get_temp_unit ( self ) -> TemperatureUnit : \"\"\" Get the temperature unit setting. Returns: The temperature unit. \"\"\"","title":"get_temp_unit()"},{"location":"api/abc/#pyinst.abc.TypeSW","text":"Bases: ABC ABC to define the interfaces of an Optical Switch.","title":"TypeSW"},{"location":"api/abc/#pyinst.abc.TypeSW.set_channel","text":"Switch to the specified channel route. Parameters: Name Type Description Default channel int The channel number. required Source code in pyinst\\abc.py 1237 1238 1239 1240 1241 1242 1243 1244 @abstractmethod def set_channel ( self , channel : int ) -> None : \"\"\" Switch to the specified channel route. Args: channel: The channel number. \"\"\"","title":"set_channel()"},{"location":"api/abc/#pyinst.abc.TypeSW.get_channel","text":"Queries the current channel route of the switch. Returns: Type Description int The channel number of current route. Source code in pyinst\\abc.py 1246 1247 1248 1249 1250 1251 1252 1253 @abstractmethod def get_channel ( self ) -> int : \"\"\" Queries the current channel route of the switch. Returns: The channel number of current route. \"\"\"","title":"get_channel()"},{"location":"api/abc/#pyinst.abc.TypeMSW","text":"Bases: ABC ABC to define the interfaces of an Optical Matrix Switch.","title":"TypeMSW"},{"location":"api/abc/#pyinst.abc.TypeMSW.connect","text":"Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use check to confirm whether either port is already in use. Parameters: Name Type Description Default port1 int The valid port at one end of the path. required port2 int The valid port at the other end of the path. required enable bool Whether to enable the connection. True Source code in pyinst\\abc.py 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 @abstractmethod def connect ( self , port1 : int , port2 : int , enable : bool = True ) -> None : \"\"\" Sets a new optical connection. Note that this method will delete any existing connections using port1 or port2. Use `check` to confirm whether either port is already in use. Args: port1: The valid port at one end of the path. port2: The valid port at the other end of the path. enable: Whether to enable the connection. \"\"\"","title":"connect()"},{"location":"api/abc/#pyinst.abc.TypeMSW.connected_with","text":"Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Parameters: Name Type Description Default port int The port number to check connection information. required Returns: Type Description Optional [ int ] Connection information for the specified port. Optional [ int ] None = No connection exists. Optional [ int ] Optional [ int ] int N = Port number at other end of the connection. Source code in pyinst\\abc.py 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 @abstractmethod def connected_with ( self , port : int ) -> Optional [ int ]: \"\"\" Returns connection information of the specified port. If the port is connected, return the port number at the other end of the connection. If no connection exists for the port, return None. Args: port: The port number to check connection information. Returns: Connection information for the specified port. None = No connection exists. int N = Port number at other end of the connection. \"\"\"","title":"connected_with()"},{"location":"api/abc/#pyinst.abc.TypeMSW.clear","text":"Clears a configured optical connection connected to the specified port. Parameters: Name Type Description Default port int The port at either end of the configured connection. required Source code in pyinst\\abc.py 1296 1297 1298 1299 1300 1301 1302 1303 @abstractmethod def clear ( self , port : int ) -> None : \"\"\" Clears a configured optical connection connected to the specified port. Args: port: The port at either end of the configured connection. \"\"\"","title":"clear()"},{"location":"api/abc/#pyinst.abc.TypeMSW.clear_all","text":"Clears all configured optical connections. Source code in pyinst\\abc.py 1305 1306 1307 @abstractmethod def clear_all ( self ) -> None : \"\"\"Clears all configured optical connections.\"\"\"","title":"clear_all()"},{"location":"api/abc/#pyinst.abc.TypeMSW.check","text":"To check if port1 and port2 are both not in use. Parameters: Name Type Description Default port1 int The port at one end of the path. required port2 int The port at the other end of the path. required Returns: Type Description bool True = Both ports available (not in use). bool False = Conflict; one or both ports already in use. Source code in pyinst\\abc.py 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 @abstractmethod def check ( self , port1 : int , port2 : int ) -> bool : \"\"\" To check if port1 and port2 are both not in use. Args: port1: The port at one end of the path. port2: The port at the other end of the path. Returns: True = Both ports available (not in use). False = Conflict; one or both ports already in use. \"\"\"","title":"check()"},{"location":"api/abc/#pyinst.abc.TypeMSW.enable","text":"Sets the connection state of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required enable bool True = Enable | False = Disable. True Source code in pyinst\\abc.py 1324 1325 1326 1327 1328 1329 1330 1331 1332 @abstractmethod def enable ( self , port : int , enable : bool = True ) -> None : \"\"\" Sets the connection state of a configured optical connection. Args: port: The port at either end of the connection. enable: True = Enable | False = Disable. \"\"\"","title":"enable()"},{"location":"api/abc/#pyinst.abc.TypeMSW.disable","text":"Disable the connection of a configured optical connection. Parameters: Name Type Description Default port int The port at either end of the connection. required Source code in pyinst\\abc.py 1334 1335 1336 1337 1338 1339 1340 1341 @abstractmethod def disable ( self , port : int ) -> None : \"\"\" Disable the connection of a configured optical connection. Args: port: The port at either end of the connection. \"\"\"","title":"disable()"},{"location":"api/abc/#pyinst.abc.TypeMSW.is_enabled","text":"Returns the connection state of a configured optical connection. Returns: Type Description bool True = Enabled | False = Disabled Source code in pyinst\\abc.py 1343 1344 1345 1346 1347 1348 1349 1350 @abstractmethod def is_enabled ( self , port : int ) -> bool : \"\"\" Returns the connection state of a configured optical connection. Returns: True = Enabled | False = Disabled \"\"\"","title":"is_enabled()"},{"location":"api/abc/#pyinst.abc.TypePS","text":"Bases: ABC ABC to define the interfaces of a Power Supply.","title":"TypePS"},{"location":"api/abc/#pyinst.abc.TypePS.min_voltage","text":"The minimum programmable voltage level in V. Source code in pyinst\\abc.py 1358 1359 1360 1361 @property @abstractmethod def min_voltage ( self ) -> float : \"\"\"The minimum programmable voltage level in V.\"\"\"","title":"min_voltage()"},{"location":"api/abc/#pyinst.abc.TypePS.max_voltage","text":"The maximum programmable voltage level in V. Source code in pyinst\\abc.py 1363 1364 1365 1366 @property @abstractmethod def max_voltage ( self ) -> float : \"\"\"The maximum programmable voltage level in V.\"\"\"","title":"max_voltage()"},{"location":"api/abc/#pyinst.abc.TypePS.min_current","text":"The minimum programmable current level in A. Source code in pyinst\\abc.py 1368 1369 1370 1371 @property @abstractmethod def min_current ( self ) -> float : \"\"\"The minimum programmable current level in A.\"\"\"","title":"min_current()"},{"location":"api/abc/#pyinst.abc.TypePS.max_current","text":"The maximum programmable current level in A. Source code in pyinst\\abc.py 1373 1374 1375 1376 @property @abstractmethod def max_current ( self ) -> float : \"\"\"The maximum programmable current level in A.\"\"\"","title":"max_current()"},{"location":"api/abc/#pyinst.abc.TypePS.enable","text":"Enables (or disables) the outputs of the power supply. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1378 1379 1380 1381 1382 1383 1384 1385 @abstractmethod def enable ( self , en : bool = True ) -> None : \"\"\" Enables (or disables) the outputs of the power supply. Args: en: `True` = Enable, `False` = Disable. \"\"\"","title":"enable()"},{"location":"api/abc/#pyinst.abc.TypePS.disable","text":"Disables the output of the power supply. Source code in pyinst\\abc.py 1387 1388 1389 @abstractmethod def disable ( self ) -> None : \"\"\"Disables the output of the power supply.\"\"\"","title":"disable()"},{"location":"api/abc/#pyinst.abc.TypePS.is_enabled","text":"Queries whether the output of the power supply is enabled. Returns: Type Description bool True = Enabled, False = Disabled Source code in pyinst\\abc.py 1391 1392 1393 1394 1395 1396 1397 1398 @abstractmethod def is_enabled ( self ) -> bool : \"\"\" Queries whether the output of the power supply is enabled. Returns: `True` = Enabled, `False` = Disabled \"\"\"","title":"is_enabled()"},{"location":"api/abc/#pyinst.abc.TypePS.set_voltage_limit","text":"Sets the immediate voltage level of the power supply. Parameters: Name Type Description Default value int | float The voltage level in V. required Source code in pyinst\\abc.py 1400 1401 1402 1403 1404 1405 1406 1407 @abstractmethod def set_voltage_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate voltage level of the power supply. Args: value: The voltage level in V. \"\"\"","title":"set_voltage_limit()"},{"location":"api/abc/#pyinst.abc.TypePS.get_voltage_limit","text":"Queries the immediate voltage level of the power supply. Returns: Type Description float The voltage level in V. Source code in pyinst\\abc.py 1409 1410 1411 1412 1413 1414 1415 1416 @abstractmethod def get_voltage_limit ( self ) -> float : \"\"\" Queries the immediate voltage level of the power supply. Returns: The voltage level in V. \"\"\"","title":"get_voltage_limit()"},{"location":"api/abc/#pyinst.abc.TypePS.measure_voltage","text":"Queries the voltage measured at the sense terminals of the power supply. Returns: Type Description float The voltage measured in V. Source code in pyinst\\abc.py 1418 1419 1420 1421 1422 1423 1424 1425 @abstractmethod def measure_voltage ( self ) -> float : \"\"\"Queries the voltage measured at the sense terminals of the power supply. Returns: The voltage measured in V. \"\"\"","title":"measure_voltage()"},{"location":"api/abc/#pyinst.abc.TypePS.set_current_limit","text":"Sets the immediate current level of the power supply. Parameters: Name Type Description Default value int | float The current level in A. required Source code in pyinst\\abc.py 1427 1428 1429 1430 1431 1432 1433 1434 @abstractmethod def set_current_limit ( self , value : int | float ) -> None : \"\"\" Sets the immediate current level of the power supply. Args: value: The current level in A. \"\"\"","title":"set_current_limit()"},{"location":"api/abc/#pyinst.abc.TypePS.get_current_limit","text":"Queries the immediate current level of the power supply. Returns: Type Description float The current level in A. Source code in pyinst\\abc.py 1436 1437 1438 1439 1440 1441 1442 1443 @abstractmethod def get_current_limit ( self ) -> float : \"\"\" Queries the immediate current level of the power supply. Returns: The current level in A. \"\"\"","title":"get_current_limit()"},{"location":"api/abc/#pyinst.abc.TypePS.measure_current","text":"Queries the current measured across the current sense resistor inside the power supply. Returns: Type Description float The current measured in A. Source code in pyinst\\abc.py 1445 1446 1447 1448 1449 1450 1451 1452 @abstractmethod def measure_current ( self ) -> float : \"\"\"Queries the current measured across the current sense resistor inside the power supply. Returns: The current measured in A. \"\"\"","title":"measure_current()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions","text":"Bases: TypePS ABC to define the interfaces of a Power Supply with OCP & OVP functions.","title":"TypePSwithOvpOcpFunctions"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.set_ocp_level","text":"Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use is_ocp_tripped() to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the clear_ocp() method after the condition that caused the OCP trip is removed. Parameters: Name Type Description Default level int | float The OCP level in A. required Source code in pyinst\\abc.py 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 @abstractmethod def set_ocp_level ( self , level : int | float ) -> None : \"\"\" Sets the current level at which the overcurrent protection (OCP) circuit will trip. If the peak output current exceeds the OCP level, then the output current is programmed to zero. You can use `is_ocp_tripped()` to query if the OCP circuit is tripped. An overcurrent condition can be cleared with the `clear_ocp()` method after the condition that caused the OCP trip is removed. Args: level: The OCP level in A. \"\"\"","title":"set_ocp_level()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.get_ocp_level","text":"Returns the overcurrent protection trip level presently programmed. See set_ocp_level() for more details. Returns: Type Description float The OCP level in A. Source code in pyinst\\abc.py 1475 1476 1477 1478 1479 1480 1481 1482 1483 @abstractmethod def get_ocp_level ( self ) -> float : \"\"\"Returns the overcurrent protection trip level presently programmed. See `set_ocp_level()` for more details. Returns: The OCP level in A. \"\"\"","title":"get_ocp_level()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.enable_ocp","text":"Enables (or disables) the overcurrent protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1485 1486 1487 1488 1489 1490 1491 1492 @abstractmethod def enable_ocp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overcurrent protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\"","title":"enable_ocp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.disable_ocp","text":"Disables the overcurrent protection function of the power supply. Source code in pyinst\\abc.py 1494 1495 1496 1497 @abstractmethod def disable_ocp ( self ) -> None : \"\"\"Disables the overcurrent protection function of the power supply. \"\"\"","title":"disable_ocp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.is_ocp_enabled","text":"Queries whether the overcurrent protection function of the power supply is enabled. Returns: Type Description bool Whether the OCP function is enabled. Source code in pyinst\\abc.py 1499 1500 1501 1502 1503 1504 1505 1506 @abstractmethod def is_ocp_enabled ( self ) -> bool : \"\"\"Queries whether the overcurrent protection function of the power supply is enabled. Returns: Whether the OCP function is enabled. \"\"\"","title":"is_ocp_enabled()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.is_ocp_tripped","text":"Queries if the overcurrent protection circuit is tripped and not cleared. Returns: Type Description bool If the overcurrent protection circuit is tripped and not cleared. Source code in pyinst\\abc.py 1508 1509 1510 1511 1512 1513 1514 1515 @abstractmethod def is_ocp_tripped ( self ) -> bool : \"\"\"Queries if the overcurrent protection circuit is tripped and not cleared. Returns: If the overcurrent protection circuit is tripped and not cleared. \"\"\"","title":"is_ocp_tripped()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.clear_ocp","text":"This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\abc.py 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 @abstractmethod def clear_ocp ( self ) -> None : \"\"\"This method causes the overcurrent protection circuit to be cleared. Before using this method, lower the output current below the trip OCP point, or raise the OCP trip level above the output setting. Note: Note that the overcurrent condition caused by an external source must be removed first before proceeding this method. \"\"\"","title":"clear_ocp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.set_ovp_level","text":"Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use is_ovp_tripped() to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the clear_ovp() method after the condition that caused the OVP trip is removed. Parameters: Name Type Description Default level int | float The OVP level in V. required Source code in pyinst\\abc.py 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 @abstractmethod def set_ovp_level ( self , level : int | float ) -> None : \"\"\" Sets the voltage level at which the overvoltage protection (OVP) circuit will trip. If the peak output voltage exceeds the OVP level, then the power supply output is shorted by an internal SCR. You can use `is_ovp_tripped()` to query if the OVP circuit is tripped. An overvoltage condition can be cleared with the `clear_ovp()` method after the condition that caused the OVP trip is removed. Args: level: The OVP level in V. \"\"\"","title":"set_ovp_level()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.get_ovp_level","text":"Returns the overvoltage protection trip level presently programmed. See set_ovp_level() for more details. Returns: Type Description float The OVP level in V. Source code in pyinst\\abc.py 1543 1544 1545 1546 1547 1548 1549 1550 1551 @abstractmethod def get_ovp_level ( self ) -> float : \"\"\"Returns the overvoltage protection trip level presently programmed. See `set_ovp_level()` for more details. Returns: The OVP level in V. \"\"\"","title":"get_ovp_level()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.enable_ovp","text":"Enables (or disables) the overvoltage protection function of the power supply. Parameters: Name Type Description Default enable bool True = Enable, False = Disable. True Source code in pyinst\\abc.py 1553 1554 1555 1556 1557 1558 1559 1560 @abstractmethod def enable_ovp ( self , enable : bool = True ) -> None : \"\"\"Enables (or disables) the overvoltage protection function of the power supply. Args: enable: `True` = Enable, `False` = Disable. \"\"\"","title":"enable_ovp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.disable_ovp","text":"Disables the overvoltage protection function of the power supply. Source code in pyinst\\abc.py 1562 1563 1564 1565 @abstractmethod def disable_ovp ( self ) -> None : \"\"\"Disables the overvoltage protection function of the power supply. \"\"\"","title":"disable_ovp()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.is_ovp_enabled","text":"Queries whether the overvoltage protection function of the power supply is enabled. Returns: Type Description bool Whether the OVP function is enabled. Source code in pyinst\\abc.py 1567 1568 1569 1570 1571 1572 1573 1574 @abstractmethod def is_ovp_enabled ( self ) -> bool : \"\"\"Queries whether the overvoltage protection function of the power supply is enabled. Returns: Whether the OVP function is enabled. \"\"\"","title":"is_ovp_enabled()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.is_ovp_tripped","text":"Queries if the overvoltage protection circuit is tripped and not cleared. Returns: Type Description bool If the overvoltage protection circuit is tripped and not cleared. Source code in pyinst\\abc.py 1576 1577 1578 1579 1580 1581 1582 1583 @abstractmethod def is_ovp_tripped ( self ) -> bool : \"\"\"Queries if the overvoltage protection circuit is tripped and not cleared. Returns: If the overvoltage protection circuit is tripped and not cleared. \"\"\"","title":"is_ovp_tripped()"},{"location":"api/abc/#pyinst.abc.TypePSwithOvpOcpFunctions.clear_ovp","text":"This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. Source code in pyinst\\abc.py 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 @abstractmethod def clear_ovp ( self ) -> None : \"\"\"This method causes the overvoltage protection circuit to be cleared. Before sending this method, lower the output voltage below the trip OVP point, or raise the OVP trip level above the output setting. Note: Note that the overvoltage condition caused by an external source must be removed first before proceeding this method. \"\"\"","title":"clear_ovp()"},{"location":"api/abc/#pyinst.abc.TypePDLE","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of a PDL Emulator.","title":"TypePDLE"},{"location":"api/abc/#pyinst.abc.TypePDLE.min_pdl","text":"The minimum settable PDL value. Source code in pyinst\\abc.py 1603 1604 1605 1606 @property @abstractmethod def min_pdl ( self ) -> float : \"\"\"The minimum settable PDL value.\"\"\"","title":"min_pdl()"},{"location":"api/abc/#pyinst.abc.TypePDLE.max_pdl","text":"The maximum settable PDL value. Source code in pyinst\\abc.py 1608 1609 1610 1611 @property @abstractmethod def max_pdl ( self ) -> float : \"\"\"The maximum settable PDL value.\"\"\"","title":"max_pdl()"},{"location":"api/abc/#pyinst.abc.TypePDLE.get_pdl_value","text":"Returns: Type Description float The PDL setting value in dB. Source code in pyinst\\abc.py 1613 1614 1615 1616 1617 1618 @abstractmethod def get_pdl_value ( self ) -> float : \"\"\" Returns: The PDL setting value in dB. \"\"\"","title":"get_pdl_value()"},{"location":"api/abc/#pyinst.abc.TypePDLE.set_pdl_value","text":"Parameters: Name Type Description Default value int | float The PDL setting value in dB. required Source code in pyinst\\abc.py 1620 1621 1622 1623 1624 1625 @abstractmethod def set_pdl_value ( self , value : int | float ) -> None : \"\"\" Args: value: The PDL setting value in dB. \"\"\"","title":"set_pdl_value()"},{"location":"api/abc/#pyinst.abc.TypePOLC","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of a Polarization Controller/Scrambler.","title":"TypePOLC"},{"location":"api/abc/#pyinst.abc.TypePOLC.start_scrambling","text":"Start scrambling with the specified mode and rate. Parameters: Name Type Description Default mode str Scrambling mode. Valid options depends on specific model. required rate int | float Scrambling rate. Different mode may have different units. required **params Additional scrambling params if any. {} Source code in pyinst\\abc.py 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 @abstractmethod def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : \"\"\" Start scrambling with the specified mode and rate. Args: mode: Scrambling mode. Valid options depends on specific model. rate: Scrambling rate. Different mode may have different units. **params: Additional scrambling params if any. \"\"\"","title":"start_scrambling()"},{"location":"api/abc/#pyinst.abc.TypePOLC.stop_scrambling","text":"Stop scrambling. Source code in pyinst\\abc.py 1644 1645 1646 @abstractmethod def stop_scrambling ( self ) -> None : \"\"\"Stop scrambling.\"\"\"","title":"stop_scrambling()"},{"location":"api/abc/#pyinst.abc.TypePMDE","text":"Bases: OpticalFrequencySetter ABC to define the interfaces of a PMD Emulator.","title":"TypePMDE"},{"location":"api/abc/#pyinst.abc.TypePMDE.set_pmd_value","text":"Set PMD (DGD) and SOPMD (Second Order PMD) target value. Parameters: Name Type Description Default pmd int | float The DGD value in ps. required sopmd int | float The 2nd order pmd in ps**2. required Source code in pyinst\\abc.py 1654 1655 1656 1657 1658 1659 1660 1661 1662 @abstractmethod def set_pmd_value ( self , pmd : int | float , sopmd : int | float ) -> None : \"\"\" Set PMD (DGD) and SOPMD (Second Order PMD) target value. Args: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\"","title":"set_pmd_value()"},{"location":"api/abc/#pyinst.abc.TypePMDE.get_pmd_value","text":"Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: Name Type Description pmd float The DGD value in ps. sopmd float The 2nd order pmd in ps**2. Source code in pyinst\\abc.py 1664 1665 1666 1667 1668 1669 1670 1671 1672 @abstractmethod def get_pmd_value ( self ) -> Tuple [ float , float ]: \"\"\" Get PMD (DGD) and SOPMD (Second Order PMD) target value. Returns: pmd: The DGD value in ps. sopmd: The 2nd order pmd in ps**2. \"\"\"","title":"get_pmd_value()"},{"location":"api/constants/","text":"Constants \u00a4 Provides user-friendly naming to values used in different functions. LIGHTSPEED = 299792.458 module-attribute \u00a4 VI_OPEN_TIMEOUT = 0 module-attribute \u00a4 VI_TIMEOUT = 2000 module-attribute \u00a4 VI_QUERY_DELAY = 0.001 module-attribute \u00a4 VI_READ_TERMINATION = ' \\n ' module-attribute \u00a4 VI_WRITE_TERMINATION = ' \\n ' module-attribute \u00a4 SERIAL_READ_TERMINATION = ' \\n ' module-attribute \u00a4 SERIAL_WRITE_TERMINATION = ' \\n ' module-attribute \u00a4 SERIAL_READ_TIMEOUT = 2000 module-attribute \u00a4 SERIAL_WRITE_TIMEOUT = 2000 module-attribute \u00a4 SERIAL_QUERY_DELAY = 0.1 module-attribute \u00a4 InstrumentType \u00a4 Bases: IntFlag The flags of instrument types. OPM = 1 << 0 class-attribute \u00a4 Optical Power Meter VOA = 1 << 1 class-attribute \u00a4 Variable Optical Attenuator OMA = 1 << 2 class-attribute \u00a4 Optical Modulation Analyzer OSA = 1 << 3 class-attribute \u00a4 Optical Spectrum Analyzer WM = 1 << 4 class-attribute \u00a4 Optical Wavelength Meter OTF = 1 << 5 class-attribute \u00a4 Optical Tunable Filter TS = 1 << 6 class-attribute \u00a4 Temperature Source SW = 1 << 7 class-attribute \u00a4 Optical Switch MSW = 1 << 8 class-attribute \u00a4 Optical Matrix Switch PS = 1 << 9 class-attribute \u00a4 Power Supply PDLE = 1 << 10 class-attribute \u00a4 PDL Emulator/Source POLC = 1 << 11 class-attribute \u00a4 Polarization Controller/Scrambler PMDE = 1 << 12 class-attribute \u00a4 PMD Emulator/Source TemperatureSourceType \u00a4 Bases: IntEnum UNDEFINED = 0 class-attribute \u00a4 CHAMBER = 1 class-attribute \u00a4 TEC = 2 class-attribute \u00a4 THERMO_STREAM = 3 class-attribute \u00a4 OpticalPowerUnit \u00a4 Bases: IntEnum DBM = 0 class-attribute \u00a4 W = 1 class-attribute \u00a4 TemperatureUnit \u00a4 Bases: IntEnum F = 0 class-attribute \u00a4 C = 1 class-attribute \u00a4 OpticalBandwidthUnit \u00a4 Bases: IntEnum GHZ = 0 class-attribute \u00a4 NM = 1 class-attribute \u00a4 SerialParity \u00a4 Bases: Enum NONE = 'N' class-attribute \u00a4 EVEN = 'E' class-attribute \u00a4 ODD = 'O' class-attribute \u00a4 MARK = 'M' class-attribute \u00a4 SPACE = 'S' class-attribute \u00a4 SerialStopBits \u00a4 Bases: Enum ONE = 1 class-attribute \u00a4 ONE_POINT_FIVE = 1.5 class-attribute \u00a4 TWO = 2 class-attribute \u00a4 SerialByteSize \u00a4 Bases: Enum FIVEBITS = 5 class-attribute \u00a4 SIXBITS = 6 class-attribute \u00a4 SEVENBITS = 7 class-attribute \u00a4 EIGHTBITS = 8 class-attribute \u00a4","title":"Constants"},{"location":"api/constants/#constants","text":"Provides user-friendly naming to values used in different functions.","title":"Constants"},{"location":"api/constants/#pyinst.constants.LIGHTSPEED","text":"","title":"LIGHTSPEED"},{"location":"api/constants/#pyinst.constants.VI_OPEN_TIMEOUT","text":"","title":"VI_OPEN_TIMEOUT"},{"location":"api/constants/#pyinst.constants.VI_TIMEOUT","text":"","title":"VI_TIMEOUT"},{"location":"api/constants/#pyinst.constants.VI_QUERY_DELAY","text":"","title":"VI_QUERY_DELAY"},{"location":"api/constants/#pyinst.constants.VI_READ_TERMINATION","text":"","title":"VI_READ_TERMINATION"},{"location":"api/constants/#pyinst.constants.VI_WRITE_TERMINATION","text":"","title":"VI_WRITE_TERMINATION"},{"location":"api/constants/#pyinst.constants.SERIAL_READ_TERMINATION","text":"","title":"SERIAL_READ_TERMINATION"},{"location":"api/constants/#pyinst.constants.SERIAL_WRITE_TERMINATION","text":"","title":"SERIAL_WRITE_TERMINATION"},{"location":"api/constants/#pyinst.constants.SERIAL_READ_TIMEOUT","text":"","title":"SERIAL_READ_TIMEOUT"},{"location":"api/constants/#pyinst.constants.SERIAL_WRITE_TIMEOUT","text":"","title":"SERIAL_WRITE_TIMEOUT"},{"location":"api/constants/#pyinst.constants.SERIAL_QUERY_DELAY","text":"","title":"SERIAL_QUERY_DELAY"},{"location":"api/constants/#pyinst.constants.InstrumentType","text":"Bases: IntFlag The flags of instrument types.","title":"InstrumentType"},{"location":"api/constants/#pyinst.constants.InstrumentType.OPM","text":"Optical Power Meter","title":"OPM"},{"location":"api/constants/#pyinst.constants.InstrumentType.VOA","text":"Variable Optical Attenuator","title":"VOA"},{"location":"api/constants/#pyinst.constants.InstrumentType.OMA","text":"Optical Modulation Analyzer","title":"OMA"},{"location":"api/constants/#pyinst.constants.InstrumentType.OSA","text":"Optical Spectrum Analyzer","title":"OSA"},{"location":"api/constants/#pyinst.constants.InstrumentType.WM","text":"Optical Wavelength Meter","title":"WM"},{"location":"api/constants/#pyinst.constants.InstrumentType.OTF","text":"Optical Tunable Filter","title":"OTF"},{"location":"api/constants/#pyinst.constants.InstrumentType.TS","text":"Temperature Source","title":"TS"},{"location":"api/constants/#pyinst.constants.InstrumentType.SW","text":"Optical Switch","title":"SW"},{"location":"api/constants/#pyinst.constants.InstrumentType.MSW","text":"Optical Matrix Switch","title":"MSW"},{"location":"api/constants/#pyinst.constants.InstrumentType.PS","text":"Power Supply","title":"PS"},{"location":"api/constants/#pyinst.constants.InstrumentType.PDLE","text":"PDL Emulator/Source","title":"PDLE"},{"location":"api/constants/#pyinst.constants.InstrumentType.POLC","text":"Polarization Controller/Scrambler","title":"POLC"},{"location":"api/constants/#pyinst.constants.InstrumentType.PMDE","text":"PMD Emulator/Source","title":"PMDE"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType","text":"Bases: IntEnum","title":"TemperatureSourceType"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType.UNDEFINED","text":"","title":"UNDEFINED"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType.CHAMBER","text":"","title":"CHAMBER"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType.TEC","text":"","title":"TEC"},{"location":"api/constants/#pyinst.constants.TemperatureSourceType.THERMO_STREAM","text":"","title":"THERMO_STREAM"},{"location":"api/constants/#pyinst.constants.OpticalPowerUnit","text":"Bases: IntEnum","title":"OpticalPowerUnit"},{"location":"api/constants/#pyinst.constants.OpticalPowerUnit.DBM","text":"","title":"DBM"},{"location":"api/constants/#pyinst.constants.OpticalPowerUnit.W","text":"","title":"W"},{"location":"api/constants/#pyinst.constants.TemperatureUnit","text":"Bases: IntEnum","title":"TemperatureUnit"},{"location":"api/constants/#pyinst.constants.TemperatureUnit.F","text":"","title":"F"},{"location":"api/constants/#pyinst.constants.TemperatureUnit.C","text":"","title":"C"},{"location":"api/constants/#pyinst.constants.OpticalBandwidthUnit","text":"Bases: IntEnum","title":"OpticalBandwidthUnit"},{"location":"api/constants/#pyinst.constants.OpticalBandwidthUnit.GHZ","text":"","title":"GHZ"},{"location":"api/constants/#pyinst.constants.OpticalBandwidthUnit.NM","text":"","title":"NM"},{"location":"api/constants/#pyinst.constants.SerialParity","text":"Bases: Enum","title":"SerialParity"},{"location":"api/constants/#pyinst.constants.SerialParity.NONE","text":"","title":"NONE"},{"location":"api/constants/#pyinst.constants.SerialParity.EVEN","text":"","title":"EVEN"},{"location":"api/constants/#pyinst.constants.SerialParity.ODD","text":"","title":"ODD"},{"location":"api/constants/#pyinst.constants.SerialParity.MARK","text":"","title":"MARK"},{"location":"api/constants/#pyinst.constants.SerialParity.SPACE","text":"","title":"SPACE"},{"location":"api/constants/#pyinst.constants.SerialStopBits","text":"Bases: Enum","title":"SerialStopBits"},{"location":"api/constants/#pyinst.constants.SerialStopBits.ONE","text":"","title":"ONE"},{"location":"api/constants/#pyinst.constants.SerialStopBits.ONE_POINT_FIVE","text":"","title":"ONE_POINT_FIVE"},{"location":"api/constants/#pyinst.constants.SerialStopBits.TWO","text":"","title":"TWO"},{"location":"api/constants/#pyinst.constants.SerialByteSize","text":"Bases: Enum","title":"SerialByteSize"},{"location":"api/constants/#pyinst.constants.SerialByteSize.FIVEBITS","text":"","title":"FIVEBITS"},{"location":"api/constants/#pyinst.constants.SerialByteSize.SIXBITS","text":"","title":"SIXBITS"},{"location":"api/constants/#pyinst.constants.SerialByteSize.SEVENBITS","text":"","title":"SEVENBITS"},{"location":"api/constants/#pyinst.constants.SerialByteSize.EIGHTBITS","text":"","title":"EIGHTBITS"},{"location":"api/functions/","text":"Functions \u00a4 InstrumentModelInfo \u00a4 Bases: NamedTuple Information of the instrument model. model : str class-attribute \u00a4 The model string of the instrument. brand : str class-attribute \u00a4 The brand of the instrument. class_name : str class-attribute \u00a4 The name of the instrument model class. ins_type : InstrumentType class-attribute \u00a4 The ins_type property of the instrument model class. params : List [ dict ] class-attribute \u00a4 A list of dict to define the parameters required to init the instrument model class. details : Dict [ str , str ] class-attribute \u00a4 A dict of details to describe the instrument. to_dict () \u00a4 Return the instrument model information as a dict. Source code in pyinst\\functions.py 79 80 81 def to_dict ( self ): \"\"\"Return the instrument model information as a dict.\"\"\" return { k : getattr ( self , k ) for k in self . _fields } get_visa_resource_manager () \u00a4 Get the VISA resource manager instance that is used globally by PyInst. Returns: Type Description pyvisa . highlevel . ResourceManager The VISA resource manager. Source code in pyinst\\functions.py 14 15 16 17 18 19 20 21 def get_visa_resource_manager () -> pyvisa . highlevel . ResourceManager : \"\"\" Get the VISA resource manager instance that is used globally by PyInst. Returns: The VISA resource manager. \"\"\" return rm list_visa_resources () \u00a4 List the resource names of all the connected VISA instruments. Returns: Type Description Tuple [ str , ...] A tuple of resource names of all the connected VISA instruments. Source code in pyinst\\functions.py 24 25 26 27 28 29 30 31 def list_visa_resources () -> Tuple [ str , ... ]: \"\"\" List the resource names of all the connected VISA instruments. Returns: A tuple of resource names of all the connected VISA instruments. \"\"\" return rm . list_resources () list_visa_resources_info () \u00a4 Returns a dictionary mapping resource names to resource extended information of all connected VISA instruments. Returns: Type Description Dict [ str , pyvisa . highlevel . ResourceInfo ] Mapping of resource name to ResourceInfo. Source code in pyinst\\functions.py 34 35 36 37 38 39 40 41 def list_visa_resources_info () -> Dict [ str , pyvisa . highlevel . ResourceInfo ]: \"\"\" Returns a dictionary mapping resource names to resource extended information of all connected VISA instruments. Returns: Mapping of resource name to ResourceInfo. \"\"\" return rm . list_resources_info () get_visa_resource_info ( resource_name , extended = True ) \u00a4 Get the (extended) information of a particular VISA resource. Parameters: Name Type Description Default resource_name str The resource name or alias of the VISA instrument. required extended bool Also get extended information (ie. resource_class, resource_name, alias) True Returns: Type Description pyvisa . highlevel . ResourceInfo The ResourceInfo. Source code in pyinst\\functions.py 44 45 46 47 48 49 50 51 52 53 54 55 def get_visa_resource_info ( resource_name : str , extended : bool = True ) -> pyvisa . highlevel . ResourceInfo : \"\"\" Get the (extended) information of a particular VISA resource. Args: resource_name: The resource name or alias of the VISA instrument. extended: Also get extended information (ie. resource_class, resource_name, alias) Returns: The ResourceInfo. \"\"\" return rm . resource_info ( resource_name , extended ) list_instrument_model_info ( ins_type = None ) \u00a4 List information all the instrument models. If the parameter ins_type is defined, only the instrument models of the same type will be listed. Parameters: Name Type Description Default ins_type Optional [ InstrumentType ] Only list the instrument models with the same type. None detailed Also get the detailed information. required Returns: Type Description Tuple [ InstrumentModelInfo , ...] The information of instrument models. Source code in pyinst\\functions.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def list_instrument_model_info ( ins_type : Optional [ InstrumentType ] = None ) -> Tuple [ InstrumentModelInfo , ... ]: \"\"\" List information all the instrument models. If the parameter `ins_type` is defined, only the instrument models of the same type will be listed. Args: ins_type: Only list the instrument models with the same type. detailed: Also get the detailed information. Returns: The information of instrument models. \"\"\" model_list = [] for i in models . __dict__ : model_cls = models . __dict__ [ i ] if i . startswith ( 'Model' ) and issubclass ( model_cls , BaseInstrument ): if ins_type is not None and ins_type not in model_cls . ins_type : continue else : model_list . append ( InstrumentModelInfo ( model = model_cls . model , brand = model_cls . brand , class_name = i , ins_type = model_cls . ins_type , params = model_cls . params , details = model_cls . details , )) return tuple ( model_list )","title":"Functions"},{"location":"api/functions/#functions","text":"","title":"Functions"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo","text":"Bases: NamedTuple Information of the instrument model.","title":"InstrumentModelInfo"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.model","text":"The model string of the instrument.","title":"model"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.brand","text":"The brand of the instrument.","title":"brand"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.class_name","text":"The name of the instrument model class.","title":"class_name"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.ins_type","text":"The ins_type property of the instrument model class.","title":"ins_type"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.params","text":"A list of dict to define the parameters required to init the instrument model class.","title":"params"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.details","text":"A dict of details to describe the instrument.","title":"details"},{"location":"api/functions/#pyinst.functions.InstrumentModelInfo.to_dict","text":"Return the instrument model information as a dict. Source code in pyinst\\functions.py 79 80 81 def to_dict ( self ): \"\"\"Return the instrument model information as a dict.\"\"\" return { k : getattr ( self , k ) for k in self . _fields }","title":"to_dict()"},{"location":"api/functions/#pyinst.functions.get_visa_resource_manager","text":"Get the VISA resource manager instance that is used globally by PyInst. Returns: Type Description pyvisa . highlevel . ResourceManager The VISA resource manager. Source code in pyinst\\functions.py 14 15 16 17 18 19 20 21 def get_visa_resource_manager () -> pyvisa . highlevel . ResourceManager : \"\"\" Get the VISA resource manager instance that is used globally by PyInst. Returns: The VISA resource manager. \"\"\" return rm","title":"get_visa_resource_manager()"},{"location":"api/functions/#pyinst.functions.list_visa_resources","text":"List the resource names of all the connected VISA instruments. Returns: Type Description Tuple [ str , ...] A tuple of resource names of all the connected VISA instruments. Source code in pyinst\\functions.py 24 25 26 27 28 29 30 31 def list_visa_resources () -> Tuple [ str , ... ]: \"\"\" List the resource names of all the connected VISA instruments. Returns: A tuple of resource names of all the connected VISA instruments. \"\"\" return rm . list_resources ()","title":"list_visa_resources()"},{"location":"api/functions/#pyinst.functions.list_visa_resources_info","text":"Returns a dictionary mapping resource names to resource extended information of all connected VISA instruments. Returns: Type Description Dict [ str , pyvisa . highlevel . ResourceInfo ] Mapping of resource name to ResourceInfo. Source code in pyinst\\functions.py 34 35 36 37 38 39 40 41 def list_visa_resources_info () -> Dict [ str , pyvisa . highlevel . ResourceInfo ]: \"\"\" Returns a dictionary mapping resource names to resource extended information of all connected VISA instruments. Returns: Mapping of resource name to ResourceInfo. \"\"\" return rm . list_resources_info ()","title":"list_visa_resources_info()"},{"location":"api/functions/#pyinst.functions.get_visa_resource_info","text":"Get the (extended) information of a particular VISA resource. Parameters: Name Type Description Default resource_name str The resource name or alias of the VISA instrument. required extended bool Also get extended information (ie. resource_class, resource_name, alias) True Returns: Type Description pyvisa . highlevel . ResourceInfo The ResourceInfo. Source code in pyinst\\functions.py 44 45 46 47 48 49 50 51 52 53 54 55 def get_visa_resource_info ( resource_name : str , extended : bool = True ) -> pyvisa . highlevel . ResourceInfo : \"\"\" Get the (extended) information of a particular VISA resource. Args: resource_name: The resource name or alias of the VISA instrument. extended: Also get extended information (ie. resource_class, resource_name, alias) Returns: The ResourceInfo. \"\"\" return rm . resource_info ( resource_name , extended )","title":"get_visa_resource_info()"},{"location":"api/functions/#pyinst.functions.list_instrument_model_info","text":"List information all the instrument models. If the parameter ins_type is defined, only the instrument models of the same type will be listed. Parameters: Name Type Description Default ins_type Optional [ InstrumentType ] Only list the instrument models with the same type. None detailed Also get the detailed information. required Returns: Type Description Tuple [ InstrumentModelInfo , ...] The information of instrument models. Source code in pyinst\\functions.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def list_instrument_model_info ( ins_type : Optional [ InstrumentType ] = None ) -> Tuple [ InstrumentModelInfo , ... ]: \"\"\" List information all the instrument models. If the parameter `ins_type` is defined, only the instrument models of the same type will be listed. Args: ins_type: Only list the instrument models with the same type. detailed: Also get the detailed information. Returns: The information of instrument models. \"\"\" model_list = [] for i in models . __dict__ : model_cls = models . __dict__ [ i ] if i . startswith ( 'Model' ) and issubclass ( model_cls , BaseInstrument ): if ins_type is not None and ins_type not in model_cls . ins_type : continue else : model_list . append ( InstrumentModelInfo ( model = model_cls . model , brand = model_cls . brand , class_name = i , ins_type = model_cls . ins_type , params = model_cls . params , details = model_cls . details , )) return tuple ( model_list )","title":"list_instrument_model_info()"},{"location":"api/models/","text":"Instrument Models \u00a4 Instrument Model classes are types to drive specific instrument models. An Instrument Model class always starts with a prefix Model , for example: ModelAQ6370 , ModelOTF980 . All Instrument Model classes can be directly imported from pyinst name space. The Instrument Model is immediately opened on object creation. The first parameter of the __init__ method is always resource_name : For VISA compatible instruments, it is the VISA resource name or alias. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument/USB chip. For more details, please refer to the specific Instrument Model class. Examples: >>> from pyinst import ModelN7744A >>> opm = ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) >>> opm . get_power_value () -10.85 >>> opm . close () # release the instrument resource Note An Instrument Model object is a function component in logic, does not correspond with the physical topography of the real-world instrument. For example, for OPM N7744A, it has 4 slots of OPM function components. Each slot can be considered as an independent ModelN7744A object. Instrument Model classes also support context management, so you can use the \"with\" statement to ensure that the instrument resource is closed after usage. Examples: >>> with ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) as opm : >>> opm . get_power_value () >>> -10.85 BaseModelN77xx ( resource_name , slot , ** kwargs ) \u00a4 Bases: VisaInstrument Base class for Keysight N77xx Series: N7744A, N7745A, N7747A and N7748A Optical Multiport Power Meters N7751A and N7752A Variable Optical Attenuators and 2-Channel Optical Power Meter N7761A, N7762A and N7764A Variable Optical Attenuators Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 81 82 83 84 85 86 87 88 89 90 91 def __init__ ( self , resource_name : str , slot : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" if not 1 <= slot <= self . _max_slot : raise ValueError ( f 'Parameter slot is out of range: { slot !r} . The max slot number is { self . _max_slot } .' ) self . __slot = slot super () . __init__ ( resource_name , ** kwargs ) BaseModelN77xx_OPM \u00a4 Bases: BaseModelN77xx , TypeOPM min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 108 109 110 111 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 113 114 115 116 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 118 119 120 121 122 123 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :POW:WAV? MIN\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 125 126 127 128 129 130 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :POW:WAV? MAX\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 132 133 134 135 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.001 # 1us max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 137 138 139 140 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 142 143 144 145 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200.0 # dB max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 147 148 149 150 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0 # dB get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 152 153 154 155 156 157 158 159 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 161 162 163 164 165 166 167 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 169 170 171 172 173 174 175 176 177 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENS {slot:d} :POW:WAV?\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 179 180 181 182 183 184 185 186 187 188 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENS {slot:d} :POW:WAV {value:f} NM\" . format ( slot = self . _slot , value = wavelength ) self . command ( cmd ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot:d} :POW?\" . format ( slot = self . _slot ) power_value = float ( self . query ( cmd )) return power_value get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 206 207 208 209 210 211 212 213 214 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENS {slot:d} :POW:UNIT?\" . format ( slot = self . _slot ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 216 217 218 219 220 221 222 223 224 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENS {slot:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENS {slot:d} :CORR?\" . format ( slot = self . _slot ) cal = - float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 243 244 245 246 247 248 249 250 251 252 253 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( \"param value out of range: {value} \" . format ( value = value )) cmd = \":SENS {slot} :CORR {value} DB\" . format ( slot = self . _slot , value =- value ) self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 255 256 257 258 259 260 261 262 263 264 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENS {slot:d} :POW:ATIM?\" . format ( slot = self . _slot ) avg_t = float ( self . query ( cmd )) * 10 ** 3 return avg_t set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 266 267 268 269 270 271 272 273 274 275 276 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( \"param value out of range: {value} \" . format ( value = value )) cmd = \":SENS {slot} :POW:ATIM {value} MS\" . format ( slot = self . _slot , value = value ) self . command ( cmd ) BaseModelN77xx_VOA_with_OPM \u00a4 Bases: BaseModelN77xx , TypeVOA , TypeOPM min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 281 282 283 284 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 286 287 288 289 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 291 292 293 294 295 296 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :WAVelength? MIN\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 298 299 300 301 302 303 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :WAVelength? MAX\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 305 306 307 308 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 2.0 max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 310 311 312 313 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 315 316 317 318 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200.0 max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 320 321 322 323 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0 min_att () property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 325 326 327 328 329 330 331 332 333 334 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :ATT? MIN\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att max_att () property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 336 337 338 339 340 341 342 343 344 345 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :ATT? MAX\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att min_att_offset () property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\models.py 347 348 349 350 351 352 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INP {slot} :OFFS? MIN\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset max_att_offset () property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\models.py 354 355 356 357 358 359 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INP {slot} :OFFS? MAX\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 361 362 363 364 365 366 367 368 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 370 371 372 373 374 375 376 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 378 379 380 381 382 383 384 385 386 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INPut {slot:d} :WAVelength?\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 388 389 390 391 392 393 394 395 396 397 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength } \" ) cmd = \":INPut {slot:d} :WAVelength {wl} NM\" . format ( slot = self . _slot , wl = wavelength ) self . command ( cmd ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot:d} :POW?\" . format ( slot = self . _slot ) power_value = float ( self . query ( cmd )) return power_value get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 415 416 417 418 419 420 421 422 423 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":OUTPut {slot:d} :POWer:UNit?\" . format ( slot = self . _slot ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 425 426 427 428 429 430 431 432 433 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":OUTPut {slot:d} :POWer:UNit {unit:d} \" . format ( slot = self . _slot , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" cmd = \":OUTPut {slot:d} :POWer:OFFSet?\" . format ( slot = self . _slot ) cal = - float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 452 453 454 455 456 457 458 459 460 461 462 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTPut {slot:d} :POWer:OFFSet {value} DB\" . format ( slot = self . _slot , value =- value ) # opposite sign self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 464 465 466 467 468 469 470 471 472 473 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":OUTPut {slot:d} :ATIMe?\" . format ( slot = self . _slot ) atime = float ( self . query ( cmd )) * 10 ** 3 return atime set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 475 476 477 478 479 480 481 482 483 484 485 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTPut {slot:d} :ATIMe {value} MS\" . format ( slot = self . _slot , value = value ) self . command ( cmd ) enable ( en = True ) \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 487 488 489 490 491 492 493 494 495 496 497 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTP {slot:d} {status:d} \" . format ( slot = self . _slot , status = en ) self . command ( cmd ) disable () \u00a4 Disable the optical output. Source code in pyinst\\models.py 499 500 501 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False ) is_enabled () \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 503 504 505 506 507 508 509 510 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTP {slot:d} ?\" . format ( slot = self . _slot ) status = bool ( int ( self . query ( cmd ))) return status get_att () \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INP {slot:d} :ATT?\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att set_att ( att ) \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 530 531 532 533 534 535 536 537 538 539 540 541 542 543 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INP {slot:d} :ATT {value:.3f} DB\" . format ( slot = self . _slot , value = att ) self . command ( cmd ) get_att_offset () \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 545 546 547 548 549 550 551 552 553 554 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INP {slot:d} :OFFS?\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset set_att_offset ( offset ) \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 556 557 558 559 560 561 562 563 564 565 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) self . command ( \":INP {slot:d} :OFFS {value:.3f} DB\" . format ( slot = self . _slot , value = offset )) ModelN7744A \u00a4 Bases: BaseModelN77xx_OPM Keysight N7744A multi-channel optical power meter. ModelN7752A ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelN77xx_VOA_with_OPM , BaseModelN77xx_OPM Keysight N7752A 2-channel optical attenuator and 2-channel power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 def __init__ ( self , resource_name : str , slot : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelN7752A , self ) . __init__ ( resource_name , slot , ** kwargs ) __topology = { 1 : 'voa_with_opm' , 2 : 'voa_with_opm' , 3 : 'voa_with_opm' , 4 : 'voa_with_opm' , 5 : 'opm' , 6 : 'opm' , } self . __slot_type = __slot_type = __topology [ slot ] self . __Base = BaseModelN77xx_OPM if __slot_type == 'opm' else BaseModelN77xx_VOA_with_OPM min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 648 649 650 651 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 653 654 655 656 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 658 659 660 661 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return self . __Base . min_wavelength . __get__ ( self ) max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 663 664 665 666 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return self . __Base . max_wavelength . __get__ ( self ) min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 668 669 670 671 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 2.0 # 2ms max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 673 674 675 676 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 678 679 680 681 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return self . __Base . min_pow_cal . __get__ ( self ) max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 683 684 685 686 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return self . __Base . max_pow_cal . __get__ ( self ) min_att () property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 688 689 690 691 692 693 694 695 696 697 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . min_att max_att () property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 699 700 701 702 703 704 705 706 707 708 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . max_att min_att_offset () property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\models.py 710 711 712 713 714 715 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . min_att_offset max_att_offset () property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\models.py 717 718 719 720 721 722 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . max_att_offset get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 724 725 726 727 728 729 730 731 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 733 734 735 736 737 738 739 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 741 742 743 744 745 746 747 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return self . __Base . get_wavelength ( self ) set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 749 750 751 752 753 754 755 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" return self . __Base . set_wavelength ( self , wavelength ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 757 758 759 760 761 762 763 764 765 766 767 768 769 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" return self . __Base . get_power_value ( self ) get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 771 772 773 774 775 776 777 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" return self . __Base . get_power_unit ( self ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 779 780 781 782 783 784 785 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" return self . __Base . set_power_unit ( self , unit ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 787 788 789 790 791 792 793 794 795 796 797 798 799 800 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" return self . __Base . get_pow_cal ( self ) set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 802 803 804 805 806 807 808 809 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" return self . __Base . set_pow_cal ( self , value ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 811 812 813 814 815 816 817 818 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" return self . __Base . get_avg_time ( self ) set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 820 821 822 823 824 825 826 827 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" return self . __Base . set_avg_time ( self , value ) enable ( en = True ) \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 829 830 831 832 833 834 835 836 837 838 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . enable ( en ) disable () \u00a4 Disable the optical output. Source code in pyinst\\models.py 840 841 842 843 844 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () self . enable ( False ) is_enabled () \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 846 847 848 849 850 851 852 853 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . is_enabled () get_att () \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . get_att () set_att ( att ) \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 873 874 875 876 877 878 879 880 881 882 883 884 885 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . set_att ( att ) get_att_offset () \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 887 888 889 890 891 892 893 894 895 896 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . get_att_offset () set_att_offset ( offset ) \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 898 899 900 901 902 903 904 905 906 907 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . set_att_offset ( offset ) ModelN7764A ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelN77xx_VOA_with_OPM Keysight N7764A 4-channel variable optical attenuator with built-in power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 931 932 933 934 935 936 937 938 def __init__ ( self , resource_name : str , slot : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super ( ModelN7764A , self ) . __init__ ( resource_name , slot ) BaseModelAQ2200_VOA ( resource_name , slot , channel , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeVOA The base class of AQ2200 Series, application type ATTN, without built-in OPM. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 949 950 951 952 953 954 955 956 957 958 959 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , read_termination = '' , ** kwargs ) self . _slot = slot self . _channel = channel min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 961 962 963 964 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 966 967 968 969 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 971 972 973 974 975 976 977 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( wl_str ) * 10 ** 9 return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 979 980 981 982 983 984 985 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( wl_str ) * 10 ** 9 return wl min_att () property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 987 988 989 990 991 992 993 994 995 996 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT? MIN\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att max_att () property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 998 999 1000 1001 1002 1003 1004 1005 1006 1007 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT? MAX\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att min_att_offset () property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\models.py 1009 1010 1011 1012 1013 1014 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS? MIN\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset max_att_offset () property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\models.py 1016 1017 1018 1019 1020 1021 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS? MAX\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1023 1024 1025 1026 1027 1028 1029 1030 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1032 1033 1034 1035 1036 1037 1038 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV?\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( wl_str ) * 10 ** 9 return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f 'Parameter wavelength is out of range: { wavelength !r} ' ) cmd = \":INP {slot:d} :CHAN {channel:d} :WAV {wl:f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd ) enable ( en = True ) \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} {en:d} \" . format ( slot = self . _slot , channel = self . _channel , en = en ) self . command ( cmd ) disable () \u00a4 Disable the optical output. Source code in pyinst\\models.py 1074 1075 1076 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False ) is_enabled () \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 1078 1079 1080 1081 1082 1083 1084 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} ?\" . format ( slot = self . _slot , channel = self . _channel ) return bool ( int ( self . query ( cmd ))) get_att () \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT?\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att set_att ( att ) \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INP {slot:d} :CHAN {channel:d} :ATT {att:.3f} dB\" . format ( slot = self . _slot , channel = self . _channel , att = att ) self . command ( cmd ) get_att_offset () \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS?\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset set_att_offset ( offset ) \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS {offset:.3f} dB\" . format ( slot = self . _slot , channel = self . _channel , offset = offset ) self . command ( cmd ) BaseModelAQ2200_VOA_with_OPM \u00a4 Bases: BaseModelAQ2200_VOA , TypeOPM The base class of AQ2200 Series, application type ATTN, with built-in OPM. min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 1148 1149 1150 1151 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 10.0 # 10ms max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 1153 1154 1155 1156 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 1158 1159 1160 1161 1162 1163 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS? MIN\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 1165 1166 1167 1168 1169 1170 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS? MAX\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot} :CHAN {channel} :POW?\" . format ( slot = self . _slot , channel = self . _channel ) power = float ( self . query ( cmd )) return power get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) unit = OpticalPowerUnit ( unit_int ) return unit set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 1199 1200 1201 1202 1203 1204 1205 1206 1207 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS {value:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :ATIM?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( self . query ( cmd )) * 1000 return avg_t set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :ATIM {value:d} MS\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) BaseModelAQ2200_OPM ( resource_name , slot , channel , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOPM Base Model of AQ2200 Series, application type Sensor. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super ( BaseModelAQ2200_OPM , self ) . __init__ ( resource_name , read_termination = '' , ** kwargs ) self . _slot = slot self . _channel = channel min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1271 1272 1273 1274 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1276 1277 1278 1279 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1281 1282 1283 1284 1285 1286 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :CHAN {slot:d} :POW:WAV? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1288 1289 1290 1291 1292 1293 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :CHAN {slot:d} :POW:WAV? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 1295 1296 1297 1298 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.1 # 100us max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 1300 1301 1302 1303 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s avg_time_table () property \u00a4 AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. Source code in pyinst\\models.py 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 @property def avg_time_table ( self ) -> tuple : \"\"\" AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. \"\"\" return ( 0.1 , 0.2 , 0.5 , 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 , 500 , 1000 , 2000 , 5000 , 10000 , ) min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 1323 1324 1325 1326 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 180.0 max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 1328 1329 1330 1331 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0 get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1333 1334 1335 1336 1337 1338 1339 1340 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1342 1343 1344 1345 1346 1347 1348 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1350 1351 1352 1353 1354 1355 1356 1357 1358 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:WAV?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:WAV {wl} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot} :CHAN {channel} :POW?\" . format ( slot = self . _slot , channel = self . _channel ) power = float ( self . query ( cmd )) return power get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 1387 1388 1389 1390 1391 1392 1393 1394 1395 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 1397 1398 1399 1400 1401 1402 1403 1404 1405 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :CORR?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENS {slot:d} :CHAN {channel:d} :CORR {value:.4f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:ATIM?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( self . query ( cmd )) * 1000 return avg_t set_avg_time ( value ) \u00a4 Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) value = round ( value , 1 ) if value in self . avg_time_table : valid_value = value else : l = list ( self . avg_time_table ) l . sort ( key = lambda x : abs ( x - value )) valid_value = l [ 0 ] warnings . warn ( \"Averaging time value {value} not valid. \" \"Fall back to the closest valid value {valid_value} .\" . format ( value = value , valid_value = valid_value ), InstrWarning ) if valid_value < 1 : v = round ( valid_value * 1000 ) u = \"US\" else : v = valid_value u = \"MS\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:ATIM {value:d}{unit} \" . format ( slot = self . _slot , channel = self . _channel , value = v , unit = u ) self . command ( cmd ) ModelAQ2200_215 ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelAQ2200_OPM Yokogawa AQ2200-215 optical power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1497 1498 1499 1500 1501 1502 1503 1504 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) ModelAQ2200_221 \u00a4 Bases: BaseModelAQ2200_OPM Yokogawa AQ2200-221 2-channel optical power meter. min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 1534 1535 1536 1537 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.2 avg_time_table () property \u00a4 AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. Source code in pyinst\\models.py 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 @property def avg_time_table ( self ) -> tuple : \"\"\" AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. \"\"\" return ( 0.2 , 0.5 , 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 , 500 , 1000 , 2000 , 5000 , 10000 , ) ModelAQ2200_311 ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelAQ2200_VOA Yokogawa AQ2200-311 variable optical attenuator. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1581 1582 1583 1584 1585 1586 1587 1588 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) ModelAQ2200_311A ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelAQ2200_VOA Yokogawa AQ2200-311A variable optical attenuator. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1614 1615 1616 1617 1618 1619 1620 1621 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) ModelAQ2200_331 ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModelAQ2200_VOA_with_OPM Yokogawa AQ2200-331 variable optical attenuator with built-in power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1647 1648 1649 1650 1651 1652 1653 1654 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) ModelAQ2200_342 \u00a4 Bases: BaseModelAQ2200_VOA_with_OPM Yokogawa AQ2200-342 variable optical attenuator with built-in power meter. BaseModel815x_VOA ( resource_name , slot , channel , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeVOA Base class of Keysight 815x variable optical attenuators. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , ** kwargs ) self . _slot = slot self . _channel = channel min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1701 1702 1703 1704 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1706 1707 1708 1709 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1711 1712 1713 1714 1715 1716 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1718 1719 1720 1721 1722 1723 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl min_att () property \u00a4 Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation? MIN\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att max_att () property \u00a4 Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation? MAX\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att min_att_offset () property \u00a4 Minimum attenuation offset value in dB. Source code in pyinst\\models.py 1747 1748 1749 1750 1751 1752 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet? MIN\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset max_att_offset () property \u00a4 Maximum attenuation offset value in dB. Source code in pyinst\\models.py 1754 1755 1756 1757 1758 1759 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet? MAX\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1761 1762 1763 1764 1765 1766 1767 1768 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1770 1771 1772 1773 1774 1775 1776 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1778 1779 1780 1781 1782 1783 1784 1785 1786 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength {wl:.4f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd ) enable ( en = True ) \u00a4 Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTPut {slot:d} :CHANnel {channel:d} :STATe {state:d} \" . format ( slot = self . _slot , channel = self . _channel , state = en ) self . command ( cmd ) disable () \u00a4 Disable the optical output. Source code in pyinst\\models.py 1811 1812 1813 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False ) is_enabled () \u00a4 Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 1815 1816 1817 1818 1819 1820 1821 1822 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTPut {slot:d} :CHANnel {channel:d} :STATe?\" . format ( slot = self . _slot , channel = self . _channel ) status = bool ( int ( self . query ( cmd ))) return status get_att () \u00a4 Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation?\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att set_att ( att ) \u00a4 Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation {att:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , att = att ) self . command ( cmd ) get_att_offset () \u00a4 Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet?\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset set_att_offset ( offset ) \u00a4 Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet {offset:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , offset = offset ) self . command ( cmd ) Model81571A ( resource_name , slot , ** kwargs ) \u00a4 Bases: BaseModel815x_VOA Keysight 81571A variable optical attenuator plug-in module. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1902 1903 1904 1905 1906 1907 1908 1909 def __init__ ( self , resource_name : str , slot : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs ) BaseModel816x_OPM ( resource_name , slot , channel , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOPM Base class of Keysight 816x optical power meters. Note For the Keysight 81635A Dual Power Sensor and Keysight 81619A Dual Optical Head Interface module, channel 1 is the primary channel and channel 2 is the secondary channel. The primary and secondary channels share the same software and hardware triggering system. For some methods, setting parameters for the primary channel sets the parameters for the secondary channel. For these methods, setting for the secondary channel is not allowed. Currently, these methods are: set_avg_time() Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , ** kwargs ) self . _slot = slot self . _channel = channel min_frequency () property \u00a4 The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1942 1943 1944 1945 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency max_frequency () property \u00a4 The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1947 1948 1949 1950 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency min_wavelength () property \u00a4 The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1952 1953 1954 1955 1956 1957 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl max_wavelength () property \u00a4 The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1959 1960 1961 1962 1963 1964 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl min_avg_time () property \u00a4 The minimum averaging time in ms. Source code in pyinst\\models.py 1966 1967 1968 1969 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.1 # 100us max_avg_time () property \u00a4 The maximum averaging time in ms. Source code in pyinst\\models.py 1971 1972 1973 1974 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000 # 10s min_pow_cal () property \u00a4 The minimum power calibration value in dB. Source code in pyinst\\models.py 1976 1977 1978 1979 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200 max_pow_cal () property \u00a4 The maximum power calibration value in dB. Source code in pyinst\\models.py 1981 1982 1983 1984 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200 get_frequency () \u00a4 Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1986 1987 1988 1989 1990 1991 1992 1993 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency () set_frequency ( frequency ) \u00a4 Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1995 1996 1997 1998 1999 2000 2001 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency ) get_wavelength () \u00a4 Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 2003 2004 2005 2006 2007 2008 2009 2010 2011 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl set_wavelength ( wavelength ) \u00a4 Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength {wl:.4f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd ) get_power_value () \u00a4 Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETCh {slot:d} :CHANnel {channel:d} :POWer?\" . format ( slot = self . _slot , channel = self . _channel ) value = float ( self . query ( cmd )) return value get_power_unit () \u00a4 Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 2040 2041 2042 2043 2044 2045 2046 2047 2048 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int ) set_power_unit ( unit ) \u00a4 Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 2050 2051 2052 2053 2054 2055 2056 2057 2058 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd ) get_pow_cal () \u00a4 Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :CORRection?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal set_pow_cal ( value ) \u00a4 Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :CORRection {value:.4f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) get_avg_time () \u00a4 Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:ATIMe?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( self . query ( cmd )) * 1000 return avg_t set_avg_time ( value ) \u00a4 Set the averaging time in ms. Note Can only be sent to primary channel, and secondary channel is also affected. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Note: Can only be sent to primary channel, and secondary channel is also affected. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:ATIMe {value:.4f} \" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd ) Model81635A \u00a4 Bases: BaseModel816x_OPM Keysight 81635A optical power meter plug-in module. BaseModelVSA89600 ( resource_name , encoding = 'latin1' , ** kwargs ) \u00a4 Bases: VisaInstrument The base class of instrument models based on Keysight 89600 VSA software. Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required encoding The encoding of the VISA IO string. 'latin1' kwargs Directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 def __init__ ( self , resource_name , encoding = 'latin1' , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. encoding: The encoding of the VISA IO string. kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , encoding = encoding , ** kwargs ) self . __custom_measurement_demod_filters = { \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" } self . __custom_reference_demod_filters = { \"Rectangular\" , \"RaisedCosine\" , \"RootRaisedCosine\" , \"Gaussian\" , \"HalfSine\" } CUSTOM_DEMOD_MEASUREMENT_FILTERS () property \u00a4 Options for custom demod measurement filter types. Source code in pyinst\\models.py 2154 2155 2156 2157 @property def CUSTOM_DEMOD_MEASUREMENT_FILTERS ( self ) -> set : \"\"\"Options for custom demod measurement filter types.\"\"\" return self . __custom_measurement_demod_filters CUSTOM_DEMOD_REFERENCE_FILTERS () property \u00a4 Options for custom demod reference filter types. Source code in pyinst\\models.py 2159 2160 2161 2162 @property def CUSTOM_DEMOD_REFERENCE_FILTERS ( self ) -> set : \"\"\"Options for custom demod reference filter types.\"\"\" return self . __custom_reference_demod_filters run ( _run = True ) \u00a4 Resume or stop the measurement. Parameters: Name Type Description Default _run bool True = Run the measurement. False = Stops the measurement and clears all measurement data. True Source code in pyinst\\models.py 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 def run ( self , _run : bool = True ) -> None : \"\"\"Resume or stop the measurement. Args: _run: `True` = Run the measurement. `False` = Stops the measurement and clears all measurement data. \"\"\" if _run : self . command ( \":INITiate:RESume\" ) else : self . command ( \":INITiate:ABORt\" ) stop () \u00a4 Stops the measurement and clears all measurement data. Source code in pyinst\\models.py 2176 2177 2178 def stop ( self ) -> None : \"\"\"Stops the measurement and clears all measurement data.\"\"\" self . run ( False ) pause () \u00a4 Causes the measurement to transition to the Paused state. Source code in pyinst\\models.py 2180 2181 2182 def pause ( self ) -> None : \"\"\"Causes the measurement to transition to the Paused state.\"\"\" self . command ( \":INITiate:PAUSe\" ) restart () \u00a4 Causes the measurement to restart. The Average count is reset to 0 and the measurement transitions to the Running State. Source code in pyinst\\models.py 2184 2185 2186 2187 2188 def restart ( self ) -> None : \"\"\"Causes the measurement to restart. The Average count is reset to 0 and the measurement transitions to the Running State. \"\"\" self . command ( \":INITiate:RESTart\" ) get_data_table_names ( trace ) \u00a4 Returns a list of all names in the data table for the specified trace. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ str ] A list of all parameter names in the data table. Source code in pyinst\\models.py 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 def get_data_table_names ( self , trace : int ) -> List [ str ]: \"\"\" Returns a list of all names in the data table for the specified trace. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter names in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) name_str = self . query ( \":TRACe {trace:d} :DATA:TABLe:NAME?\" . format ( trace = trace )) name_list = list ( map ( lambda x : x . strip ( '\"' ), name_str . split ( \",\" ))) return name_list get_data_table_values ( trace ) \u00a4 Gets a list of values from a data table. Enum values are returned as enum indexes ( int type). Numeric values are returned as int or float . Other values are returned as str . Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ int | float | str ] A list of all parameter values in the data table. Source code in pyinst\\models.py 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 def get_data_table_values ( self , trace : int ) -> List [ int | float | str ]: \"\"\"Gets a list of values from a data table. Enum values are returned as enum indexes (`int` type). Numeric values are returned as `int` or `float`. Other values are returned as `str`. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter values in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) value_str = self . query ( \":TRACe {trace:d} :DATA:TABLe?\" . format ( trace = trace )) raw_values = value_str . split ( \",\" ) . strip () values = [] for r_val in raw_values : try : val = int ( r_val ) except ValueError : try : val = float ( r_val ) except : val = r_val values . append ( val ) return values get_data_table_units ( trace ) \u00a4 Get all the units of the specified trace. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ str ] A list of all parameter units in the data table. Source code in pyinst\\models.py 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 def get_data_table_units ( self , trace : int ) -> List [ str ]: \"\"\" Get all the units of the specified trace. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter units in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) unit_str = self . query ( ':TRACe {trace:d} :DATA:TABLe:UNIT?' . format ( trace = trace )) unit_list = list ( map ( lambda x : x . strip ( '\"' ), unit_str . split ( \",\" ))) return unit_list get_data_table ( trace ) \u00a4 Get formatted data including table item names, values, and units. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description Dict [ str , Tuple [ int | float | str , str ]] A dict represents the data table. The format is: Dict [ str , Tuple [ int | float | str , str ]] name => (value, unit) Source code in pyinst\\models.py 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 def get_data_table ( self , trace : int ) -> Dict [ str , Tuple [ int | float | str , str ]]: \"\"\" Get formatted data including table item names, values, and units. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A dict represents the data table. The format is: name => (value, unit) \"\"\" names = self . get_data_table_names ( trace ) values = self . get_data_table_values ( trace ) units = self . get_data_table_units ( trace ) if len ( names ) == len ( values ) == len ( units ): i_len = len ( names ) else : raise IndexError ( 'Numbers of names, values and units do not match.' ) data = {} for i in range ( i_len ): data [ names [ i ]] = ( values [ i ], units [ i ]) return data get_custom_demod_measurement_filter () \u00a4 Gets the measurement filter applied during the digital demodulation measurement. Returns: Type Description Literal ['None', 'Rectangular', 'RootRaisedCosine', 'Gaussian', 'LowPass'] The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" Source code in pyinst\\models.py 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 def get_custom_demod_measurement_filter ( self ) -> Literal [ \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" ]: \"\"\"Gets the measurement filter applied during the digital demodulation measurement. Returns: The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" \"\"\" cmd = \":CDEMod:FILTer?\" filter_type = self . query ( cmd ) . strip () . strip ( '\"' ) return filter_type set_custom_demod_measurement_filter ( filter_type ) \u00a4 Sets the measurement filter applied during the digital demodulation measurement. Parameters: Name Type Description Default filter_type Literal ['None', 'Rectangular', 'RootRaisedCosine', 'Gaussian', 'LowPass'] The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" required Source code in pyinst\\models.py 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 def set_custom_demod_measurement_filter ( self , filter_type : Literal [ \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" ]) -> None : \"\"\"Sets the measurement filter applied during the digital demodulation measurement. Args: filter_type: The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" \"\"\" if filter_type not in self . CUSTOM_DEMOD_MEASUREMENT_FILTERS : raise ValueError ( 'Invalid filter_type: {filter!r} ' . format ( filter = filter_type )) cmd = \":CDEMod:FILTer \\\" {filter} \\\" \" . format ( filter = filter_type ) self . command ( cmd ) get_custom_demod_reference_filter () \u00a4 Gets the reference filter applied during the digital demodulation measurement. Returns: Type Description Literal ['Rectangular', 'RaisedCosine', 'RootRaisedCosine', 'Gaussian', 'HalfSine'] The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" Source code in pyinst\\models.py 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 def get_custom_demod_reference_filter ( self ) -> Literal [ \"Rectangular\" , \"RaisedCosine\" , \"RootRaisedCosine\" , \"Gaussian\" , \"HalfSine\" ]: \"\"\"Gets the reference filter applied during the digital demodulation measurement. Returns: The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" \"\"\" cmd = ':CDEMod:FILTer:REFerence?' filter_type = self . query ( cmd ) . strip () . strip ( '\"' ) return filter_type set_custom_demod_reference_filter ( filter_type ) \u00a4 Sets the reference filter applied during the digital demodulation measurement. Parameters: Name Type Description Default filter_type str The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" required Source code in pyinst\\models.py 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 def set_custom_demod_reference_filter ( self , filter_type : str ) -> None : \"\"\"Sets the reference filter applied during the digital demodulation measurement. Args: filter_type: The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" \"\"\" if filter_type not in self . CUSTOM_DEMOD_REFERENCE_FILTERS : raise ValueError ( 'Invalid filter_type: {filter!r} ' . format ( filter = filter_type )) cmd = \":CDEMod:FILTer:REFerence \\\" {filter} \\\" \" . format ( filter = filter_type ) self . command ( cmd ) get_custom_demod_filter_abt () \u00a4 Gets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Returns: Type Description float The \u03b1 (alpha) or BT (bandwidth time product) parameter. Source code in pyinst\\models.py 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 def get_custom_demod_filter_abt ( self ) -> float : \"\"\"Gets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Returns: The \u03b1 (alpha) or BT (bandwidth time product) parameter. \"\"\" cmd = ':CDEMod:FILTer:ABT?' abt = float ( self . query ( cmd )) return abt set_custom_demod_filter_abt ( abt ) \u00a4 Sets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Parameters: Name Type Description Default abt int | float The \u03b1 (alpha) or BT (bandwidth time product) parameter. required Source code in pyinst\\models.py 2341 2342 2343 2344 2345 2346 2347 2348 2349 def set_custom_demod_filter_abt ( self , abt : int | float ) -> None : \"\"\"Sets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Args: abt: The \u03b1 (alpha) or BT (bandwidth time product) parameter. \"\"\" cmd = ':CDEMod:FILTer:ABT {value:f} ' . format ( value = round ( abt , 6 )) self . command ( cmd ) get_custom_demod_equalization_state () \u00a4 Gets a value indicating whether the equalization filter is enabled. Returns: Type Description bool Whether the equalization filter is enabled. Source code in pyinst\\models.py 2351 2352 2353 2354 2355 2356 2357 2358 2359 def get_custom_demod_equalization_state ( self ) -> bool : \"\"\"Gets a value indicating whether the equalization filter is enabled. Returns: Whether the equalization filter is enabled. \"\"\" cmd = ':CDEMod:COMPensate:EQUalize?' state = bool ( int ( self . query ( cmd ))) return state set_custom_demod_equalization_state ( enable ) \u00a4 Enables or disables the equalization filter. Parameters: Name Type Description Default enable bool True = enable, False = disable required Source code in pyinst\\models.py 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 def set_custom_demod_equalization_state ( self , enable : bool ) -> None : \"\"\" Enables or disables the equalization filter. Args: enable: True = enable, False = disable \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = ':CDEMod:COMPensate:EQUalize {state:d} ' . format ( state = enable ) self . command ( cmd ) get_custom_demod_equalization_length () \u00a4 Gets the length of the equalization filter in symbols. Returns: Type Description int The length of the equalization filter in symbols. Source code in pyinst\\models.py 2373 2374 2375 2376 2377 2378 2379 2380 2381 def get_custom_demod_equalization_length ( self ) -> int : \"\"\"Gets the length of the equalization filter in symbols. Returns: The length of the equalization filter in symbols. \"\"\" cmd = ':CDEMod:COMPensate:EQUalize:LENGth?' rpl = self . query ( cmd ) return int ( rpl ) set_custom_demod_equalization_length ( symbols ) \u00a4 Sets the length of the equalization filter in symbols. Parameters: Name Type Description Default symbols int The length of the equalization filter in symbols. required Source code in pyinst\\models.py 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 def set_custom_demod_equalization_length ( self , symbols : int ) -> None : \"\"\"Sets the length of the equalization filter in symbols. Args: symbols: The length of the equalization filter in symbols. \"\"\" if not symbols >= 3 : raise ValueError ( 'Parameter symbols should >= 3: {symbols!r} ' . format ( symbols = symbols )) cmd = ':CDEMod:COMPensate:EQUalize:LENGth {value:d} ' . format ( value = symbols ) self . command ( cmd ) get_custom_demod_equalization_convergence () \u00a4 Gets the convergence parameter for the Adaptive Equalizer. Returns: Type Description float The equalization convergence parameter. Source code in pyinst\\models.py 2394 2395 2396 2397 2398 2399 2400 2401 def get_custom_demod_equalization_convergence ( self ) -> float : \"\"\"Gets the convergence parameter for the Adaptive Equalizer. Returns: The equalization convergence parameter. \"\"\" cmd = \":CDEMod:COMPensate:EQUalize:CONVergence?\" return float ( self . query ( cmd )) set_custom_demod_equalization_convergence ( value ) \u00a4 Sets the convergence parameter for the Adaptive Equalizer. Parameters: Name Type Description Default value int | float The equalization convergence parameter. required Source code in pyinst\\models.py 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 def set_custom_demod_equalization_convergence ( self , value : int | float ) -> None : \"\"\"Sets the convergence parameter for the Adaptive Equalizer. Args: value: The equalization convergence parameter. \"\"\" if not 1E-8 <= value <= 1e-6 : raise ValueError ( f 'Invalid value for EQ convergence: { value !r} , must be between 1E-6 and 1E-8.' ) cmd = ':CDEMod:COMPensate:EQUalize:CONVergence {value:.4E} ' . format ( value = value ) self . command ( cmd ) get_custom_demod_equalizer_run_mode () \u00a4 Gets the run mode of the Adaptive Equalizer. Returns: Type Description Literal ['Run', 'Hold'] The run mode. Options: \"Run\" | \"Hold\". Source code in pyinst\\models.py 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 def get_custom_demod_equalizer_run_mode ( self ) -> Literal [ \"Run\" , \"Hold\" ]: \"\"\" Gets the run mode of the Adaptive Equalizer. Returns: The run mode. Options: \"Run\" | \"Hold\". \"\"\" cmd = ':CDEMod:COMPensate:EQUalize:MODE?' mode = self . query ( cmd ) . strip () . strip ( '\"' ) return mode set_custom_demod_equalizer_run_mode ( mode ) \u00a4 Sets the run mode of the Adaptive Equalizer. Parameters: Name Type Description Default mode Literal ['Run', 'Hold'] The run mode. Options: \"Run\" | \"Hold\". required Source code in pyinst\\models.py 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 def set_custom_demod_equalizer_run_mode ( self , mode : Literal [ \"Run\" , \"Hold\" ]) -> None : \"\"\" Sets the run mode of the Adaptive Equalizer. Args: mode: The run mode. Options: \"Run\" | \"Hold\". \"\"\" MODES = { \"Run\" , \"Hold\" } if mode not in MODES : raise ValueError ( 'Invalid value for Custom Demod EQ run mode: {vlaue!r} ' . format ( mode )) cmd = ':CDEMod:COMPensate:EQUalize:MODE {value} ' . format ( value = mode ) self . command ( cmd ) reset_custom_demod_equalizer () \u00a4 Reset the custom demod equalizer filter. Source code in pyinst\\models.py 2438 2439 2440 2441 def reset_custom_demod_equalizer ( self ) -> None : \"\"\"Reset the custom demod equalizer filter.\"\"\" cmd = ':CDEMod:COMPensate:EQUalize:RESet' self . command ( cmd ) get_custom_demod_result_length () \u00a4 Gets the demodulation measurement result length (in symbols). Returns: Type Description int The result length in symbols. Source code in pyinst\\models.py 2443 2444 2445 2446 2447 2448 2449 2450 2451 def get_custom_demod_result_length ( self ) -> int : \"\"\"Gets the demodulation measurement result length (in symbols). Returns: The result length in symbols. \"\"\" cmd = ':CDEMod:RLENgth?' l = int ( self . query ( cmd )) return l set_custom_demod_result_length ( length ) \u00a4 Sets the demodulation measurement result length (in symbols). Parameters: Name Type Description Default length int The result length in symbols. required Source code in pyinst\\models.py 2453 2454 2455 2456 2457 2458 2459 2460 def set_custom_demod_result_length ( self , length : int ) -> None : \"\"\"Sets the demodulation measurement result length (in symbols). Args: length: The result length in symbols. \"\"\" cmd = ':CDEMod:RLENgth {v:d} ' . format ( v = length ) self . command ( cmd ) get_custom_demod_reference () \u00a4 Gets the reference used for normalization of IQ traces and EVM calculations. Returns: Type Description str The reference type. Possible return values: ConstellationMaximum | ReferenceRms Source code in pyinst\\models.py 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 def get_custom_demod_reference ( self ) -> str : \"\"\"Gets the reference used for normalization of IQ traces and EVM calculations. Returns: The reference type. Possible return values: `ConstellationMaximum` | `ReferenceRms` \"\"\" cmd = f ':CDEMod:COMPensate:NREFerence?' return self . query ( cmd ) . strip () set_custom_demod_reference ( ref_type ) \u00a4 Sets the reference used for normalization of IQ traces and EVM calculations. Parameters: Name Type Description Default ref_type str The reference type. Options: ConstellationMaximum | ReferenceRms required Source code in pyinst\\models.py 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 def set_custom_demod_reference ( self , ref_type : str ) -> None : \"\"\"Sets the reference used for normalization of IQ traces and EVM calculations. Args: ref_type: The reference type. Options: `ConstellationMaximum` | `ReferenceRms` \"\"\" if ref_type not in { \"ConstellationMaximum\" , \"ReferenceRms\" }: raise ValueError ( f \"Invaild ref_type: { ref_type !r} \" ) cmd = f ':CDEMod:COMPensate:NREFerence { ref_type } ' return self . command ( cmd ) BaseModelVSA89600_OMA \u00a4 Bases: BaseModelVSA89600 , TypeOMA Base class for Keysight OMAs based on VSA 89600 software: M8290A and N4392A Optical Modulation Analyzers smart_setup ( execute = True , frequency = None , symbol_rate = None , fine_tune_symbol_rate = None , demodulation_format = None , polarization = None , pre_set_layout = None , compensate_cd = None , compensate_pmd = None ) \u00a4 Perform smart setup of the OMA. Use parameter execute to choose whether to execute the changed settings or not. If a setting parameter is not explicitly given (default as None), the old setting will be kept. Parameters: Name Type Description Default execute bool Whether to execute smart setup with the new settings. If set to False, the settings of smart setup will be changed, but the OMA will not execute smart setup. True frequency Optional [ int | float ] The carrier frequency in THz. None symbol_rate Optional [ int | float ] The symbol rate in GHz. None fine_tune_symbol_rate Optional [ bool ] Whether the system should try to fine tune the symbol rate. None demodulation_format Optional [ str ] The selected digital demodulation format. Refer to DEMOD_FORMATS for options. None polarization Optional [ str ] The expected polarization or if auto detection should be used. options: \"Single\" | \"Dual\" | \"Auto\" . None pre_set_layout Optional [ bool ] Whether a preset of the trace layout should be performed. None compensate_cd Optional [ bool ] A value indicating whether CD should be compensated. None compensate_pmd Optional [ bool ] A value indicating whether PMD should be compensated. None Source code in pyinst\\models.py 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 def smart_setup ( self , execute : bool = True , frequency : Optional [ int | float ] = None , symbol_rate : Optional [ int | float ] = None , fine_tune_symbol_rate : Optional [ bool ] = None , demodulation_format : Optional [ str ] = None , polarization : Optional [ str ] = None , pre_set_layout : Optional [ bool ] = None , compensate_cd : Optional [ bool ] = None , compensate_pmd : Optional [ bool ] = None ): \"\"\"Perform smart setup of the OMA. Use parameter `execute` to choose whether to execute the changed settings or not. If a setting parameter is not explicitly given (default as None), the old setting will be kept. Args: execute: Whether to execute smart setup with the new settings. If set to False, the settings of smart setup will be changed, but the OMA will not execute smart setup. frequency: The carrier frequency in THz. symbol_rate: The symbol rate in GHz. fine_tune_symbol_rate: Whether the system should try to fine tune the symbol rate. demodulation_format: The selected digital demodulation format. Refer to `DEMOD_FORMATS` for options. polarization: The expected polarization or if auto detection should be used. options: `\"Single\"` | `\"Dual\"` | `\"Auto\"`. pre_set_layout: Whether a preset of the trace layout should be performed. compensate_cd: A value indicating whether CD should be compensated. compensate_pmd: A value indicating whether PMD should be compensated. \"\"\" if frequency is not None : self . command ( ':OMA:SMartSEtup:CarrierFrequency:FRErequency {value:d} ' . format ( value = round ( frequency * 10 ** 12 ))) if symbol_rate is not None : self . command ( ':OMA:SMartSEtup:SYMBRate {value:d} ' . format ( value = round ( symbol_rate * 10 ** 9 ))) if fine_tune_symbol_rate is not None : if not isinstance ( fine_tune_symbol_rate , bool ): raise TypeError ( f \"Parameter fine_tune_symbol_rate must be a bool, not ' { type ( fine_tune_symbol_rate ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:FINetuneSymbolRate {enable:d} ' . format ( enable = fine_tune_symbol_rate )) if demodulation_format is not None : if demodulation_format not in self . DEMOD_FORMATS : raise ValueError ( 'Invalid modulation demodulation format: {format!r} ' . format ( format = demodulation_format )) self . command ( ':OMA:SMartSEtup:FORMat \" {format} \"' . format ( format = demodulation_format )) if polarization is not None : if not polarization in self . POLARIZATIONS : raise ValueError ( 'Invalid polarization: {pol!r} ' . format ( pol = polarization )) self . command ( ':OMA:SMartSEtup:POLarization \" {pol} \"' . format ( pol = polarization )) if pre_set_layout is not None : if not isinstance ( pre_set_layout , bool ): raise TypeError ( f \"Parameter pre_set_layout must be a bool, not ' { type ( pre_set_layout ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:PREsetLAyout {enable:d} ' . format ( enable = pre_set_layout )) if compensate_cd is not None : if not isinstance ( compensate_cd , bool ): raise TypeError ( f \"Parameter compensate_cd must be a bool, not ' { type ( compensate_cd ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:COmpensateCD {:d} ' . format ( compensate_cd )) if compensate_pmd is not None : if not isinstance ( compensate_pmd , bool ): raise TypeError ( f \"Parameter compensate_pmd must be a bool, not ' { type ( compensate_pmd ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:COmpensatePMD {:d} ' . format ( compensate_pmd )) if execute : self . command ( ':OMA:SMartSEtup:PERformProposedActions' ) ModelN4392A ( resource_name , ** kwargs ) \u00a4 Bases: BaseModelVSA89600_OMA N4392A Optical Modulation Analyzer. Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 2613 2614 2615 2616 2617 2618 2619 def __init__ ( self , resource_name , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelN4392A , self ) . __init__ ( resource_name , ** kwargs ) ModelM8292A ( resource_name , ** kwargs ) \u00a4 Bases: BaseModelVSA89600_OMA M8290A Optical Modulation Analyzer Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 2650 2651 2652 2653 2654 2655 2656 def __init__ ( self , resource_name , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelM8292A , self ) . __init__ ( resource_name , ** kwargs ) ModelAQ6370 ( resource_name , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOSA OSA Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 def __init__ ( self , resource_name , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelAQ6370 , self ) . __init__ ( resource_name , ** kwargs ) self . __analysis_cat = [ \"SWTHRESH\" , \"DFBLD\" , \"SMSR\" , \"OSNR\" , \"WDM\" , ] self . command ( ':FORMat:DATA ASCii' ) # set data format to ascii get_x_unit () \u00a4 Queries the units for the X axis. Returns: Type Description str \"WAV\" = Wavelength, str \"FREQ\" = Frequency Source code in pyinst\\models.py 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 def get_x_unit ( self ) -> str : \"\"\"Queries the units for the X axis. Returns: `\"WAV\"` = Wavelength, `\"FREQ\"` = Frequency \"\"\" cmd = \":UNIT:X?\" options = [ \"WAV\" , \"FREQ\" ] unit = options [ int ( self . query ( cmd ))] return unit set_x_unit ( unit ) \u00a4 Sets the units for the X axis. Parameters: Name Type Description Default unit str \"WAV\" | \"FREQ\" . \"WAV\" = Wavelength, \"FREQ\" = Frequency required Source code in pyinst\\models.py 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 def set_x_unit ( self , unit : str ): \"\"\"Sets the units for the X axis. Args: unit: `\"WAV\"` | `\"FREQ\"`. `\"WAV\"` = Wavelength, `\"FREQ\"` = Frequency \"\"\" cmd = \":UNIT:X {unit} \" . format ( unit ) self . command ( cmd ) sweep ( mode = 'REPEAT' ) \u00a4 Sets the sweep mode and makes a sweep. For information about the sweep modes, please refer to documentation of the instrument. Parameters: Name Type Description Default mode str Sweep mode. \"AUTO\" | \"REPEAT\" | \"SINGLE\" | \"STOP\" . 'REPEAT' Source code in pyinst\\models.py 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 def sweep ( self , mode : str = \"REPEAT\" ) -> None : \"\"\"Sets the sweep mode and makes a sweep. For information about the sweep modes, please refer to documentation of the instrument. Args: mode: Sweep mode. `\"AUTO\"` | `\"REPEAT\"` | `\"SINGLE\"` | `\"STOP\"`. \"\"\" options = [ \"AUTO\" , \"REPEAT\" , \"SINGLE\" , \"STOP\" ] if mode not in options : raise ValueError ( \"Invalid value for param mode: {value} \" . format ( value = mode )) if mode == \"STOP\" : self . command ( ':ABOR' ) else : self . command ( ':INIT:SMOD {mode} ;:INIT' . format ( mode = mode )) run () \u00a4 Makes a REPEAT sweep. Refer to sweep for more information. Source code in pyinst\\models.py 2757 2758 2759 def run ( self ) -> None : \"\"\"Makes a REPEAT sweep. Refer to `sweep` for more information.\"\"\" self . command ( ':INIT:SMOD REPEAT;:INIT' ) stop () \u00a4 Stops sweep. Source code in pyinst\\models.py 2761 2762 2763 def stop ( self ) -> None : \"\"\"Stops sweep.\"\"\" self . command ( ':ABOR' ) single () \u00a4 Makes a SINGLE sweep. Refer to sweep for more information. Source code in pyinst\\models.py 2765 2766 2767 def single ( self ) -> None : \"\"\"Makes a SINGLE sweep. Refer to `sweep` for more information.\"\"\" self . command ( ':INIT:SMOD SINGLE;:INIT' ) set_auto_zero ( status ) \u00a4 Sets whether to enable the auto offset function of the level. Source code in pyinst\\models.py 2769 2770 2771 2772 2773 2774 def set_auto_zero ( self , status : bool ) -> None : \"\"\"Sets whether to enable the auto offset function of the level.\"\"\" if not isinstance ( status , bool ): raise TypeError ( f \"Parameter status must be a bool, not ' { type ( status ) . __name__ } '.\" ) cmd = \":CALibration:ZERO {status:d} \" . format ( status = status ) self . command ( cmd ) get_auto_zero () \u00a4 Queries whether to enable the auto offset function of the level. Source code in pyinst\\models.py 2776 2777 2778 2779 2780 def get_auto_zero ( self ) -> bool : \"\"\"Queries whether to enable the auto offset function of the level.\"\"\" cmd = \":CALibration:ZERO?\" status = bool ( int ( self . query ( cmd ))) return status zero_once () \u00a4 Perform offset adjustment once and wait until adjustment complete. TODO: should stopped? Source code in pyinst\\models.py 2782 2783 2784 2785 2786 2787 2788 def zero_once ( self ): \"\"\"Perform offset adjustment once and wait until adjustment complete. TODO: should stopped?\"\"\" self . command ( \":CALibration:ZERO ONCE\" ) while True : being_executed = int ( self . query ( \":CALibration:ZERO:STATus?\" )) if not being_executed : break set_auto_analysis ( enable ) \u00a4 Sets the automatic analysis function. Source code in pyinst\\models.py 2790 2791 2792 2793 2794 2795 def set_auto_analysis ( self , enable ): \"\"\"Sets the automatic analysis function.\"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = \":CALCulate:AUTO {enable:d} \" . format ( enable = enable ) self . command ( cmd ) get_auto_analysis () \u00a4 Queries the automatic analysis function. Source code in pyinst\\models.py 2797 2798 2799 2800 2801 def get_auto_analysis ( self ): \"\"\"Queries the automatic analysis function.\"\"\" cmd = \":CALCulate:AUTO?\" enabled = bool ( int ( self . query ( cmd ))) return enabled set_analysis_category ( category ) \u00a4 Sets the type of analysis. Parameters: Name Type Description Default category str The type of analysis. Options: required - `SWTHRESH` Spectrum width analysis (THRESH) required - `DFBLD` DFB-LD parameter analysis required - `SMSR` SMSR analysis required - `OSNR`|`WDM` OSNR(WDM), WDM analysis required Source code in pyinst\\models.py 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 def set_analysis_category ( self , category : str ): \"\"\"Sets the type of analysis. Args: category: The type of analysis. Options: - `SWTHRESH`: Spectrum width analysis (THRESH) - `DFBLD`: DFB-LD parameter analysis - `SMSR`: SMSR analysis - `OSNR`|`WDM`: OSNR(WDM), WDM analysis \"\"\" if category not in self . ANALYSIS_CATEGORIES : raise ValueError ( 'Invalid option of category: %r ' % category ) cmd = \":CALCulate:CATegory {cat} \" . format ( cat = category ) self . command ( cmd ) get_analysis_category () \u00a4 Queries the type of analysis. Returns: Type Description str The type of analysis. SWTHRESH | DFBLD | SMSR | WDM . str Please refer to set_analysis_category for detail. Source code in pyinst\\models.py 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 def get_analysis_category ( self ) -> str : \"\"\"Queries the type of analysis. Returns: The type of analysis. `SWTHRESH`|`DFBLD`|`SMSR`|`WDM`. Please refer to `set_analysis_category` for detail. \"\"\" cat_dict = { 0 : \"SWTHRESH\" , 5 : \"DFBLD\" , 8 : \"SMSR\" , 11 : \"WDM\" } cmd = \":CALCulate:CATegory?\" cat = cat_dict [ int ( self . query ( cmd ))] return cat set_wdm_analysis_threshold ( threshold ) \u00a4 Set the threshold level of channel detection for the WDM analysis function. Parameters: Name Type Description Default threshold int | float The threshold level value in dB. required Source code in pyinst\\models.py 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 def set_wdm_analysis_threshold ( self , threshold : int | float ) -> None : \"\"\" Set the threshold level of channel detection for the WDM analysis function. Args: threshold: The threshold level value in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:TH {th:.2f} DB\" . format ( th = threshold ) self . command ( cmd ) get_wdm_analysis_threshold () \u00a4 Queries the threshold level of channel detection for the WDM analysis function. Returns: Type Description float The threshold level value in dB. Source code in pyinst\\models.py 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 def get_wdm_analysis_threshold ( self ) -> float : \"\"\" Queries the threshold level of channel detection for the WDM analysis function. Returns: The threshold level value in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:TH?\" th = float ( self . query ( cmd )) return th set_wdm_analysis_mdiff ( mdiff ) \u00a4 Sets the peak bottom difference of channel detection for the WDM analysis function. Parameters: Name Type Description Default mdiff int | float The peak-bottom difference in dB. required Source code in pyinst\\models.py 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 def set_wdm_analysis_mdiff ( self , mdiff : int | float ) -> None : \"\"\" Sets the peak bottom difference of channel detection for the WDM analysis function. Args: mdiff: The peak-bottom difference in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:MDIFf {mdiff:.2f} DB\" . format ( mdiff = mdiff ) self . command ( cmd ) get_wdm_analysis_mdiff () \u00a4 Queries the peak bottom difference of channel detection for the WDM analysis function. Returns: Type Description float The peak-bottom difference in dB. Source code in pyinst\\models.py 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 def get_wdm_analysis_mdiff ( self ) -> float : \"\"\" Queries the peak bottom difference of channel detection for the WDM analysis function. Returns: The peak-bottom difference in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:MDIFf?\" mdiff = float ( self . query ( cmd )) return mdiff set_wdm_analysis_dmask ( dmask ) \u00a4 Sets the channel mask threshold level for the WDM analysis function. Parameters: Name Type Description Default dmask int | float The channel mask threshold level in dB. required Source code in pyinst\\models.py 2876 2877 2878 2879 2880 2881 2882 2883 2884 def set_wdm_analysis_dmask ( self , dmask : int | float ) -> None : \"\"\" Sets the channel mask threshold level for the WDM analysis function. Args: dmask: The channel mask threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:DMASk {dmask:.2f} DB\" . format ( dmask = dmask ) self . command ( cmd ) get_wdm_analysis_dmask () \u00a4 Queries the channel mask threshold level for the WDM analysis function. Returns: Type Description float The channel mask threshold level in dB. Source code in pyinst\\models.py 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 def get_wdm_analysis_dmask ( self ) -> float : \"\"\" Queries the channel mask threshold level for the WDM analysis function. Returns: The channel mask threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:DMASk?\" dmask = float ( self . query ( cmd )) return dmask set_wdm_analysis_nalgo ( algo ) \u00a4 Sets the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: AFIX = AUTO FIX MFIX = MANUAL FIX ACEN = AUTO CENTER MCEN = MANUAL CENTER PIT = PIT Parameters: Name Type Description Default algo str The name of algorithm. Refer to options above. required Source code in pyinst\\models.py 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 def set_wdm_analysis_nalgo ( self , algo : str ) -> None : \"\"\" Sets the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `AFIX` = AUTO FIX - `MFIX` = MANUAL FIX - `ACEN` = AUTO CENTER - `MCEN` = MANUAL CENTER - `PIT` = PIT Args: algo: The name of algorithm. Refer to options above. \"\"\" algo_options = [ \"AFIX\" , \"MFIX\" , \"ACEN\" , \"MCEN\" , \"PIT\" ] if algo . upper () not in algo_options : raise ValueError ( \"Invalid value for algo: {value!r} \" . format ( value = algo )) cmd = \":CALCulate:PARameter:WDM:NALGo {algo} \" . format ( algo = algo ) self . command ( cmd ) get_wdm_analysis_nalgo () \u00a4 Queries the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: AFIX = AUTO FIX MFIX = MANUAL FIX ACEN = AUTO CENTER MCEN = MANUAL CENTER PIT = PIT Returns: Type Description str The name of algorithm. Refer to options above. Source code in pyinst\\models.py 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 def get_wdm_analysis_nalgo ( self ) -> str : \"\"\" Queries the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `AFIX` = AUTO FIX - `MFIX` = MANUAL FIX - `ACEN` = AUTO CENTER - `MCEN` = MANUAL CENTER - `PIT` = PIT Returns: The name of algorithm. Refer to options above. \"\"\" algo_options = [ \"AFIX\" , \"MFIX\" , \"ACEN\" , \"MCEN\" , \"PIT\" ] cmd = \":CALCulate:PARameter:WDM:NALGo?\" algo = algo_options [ int ( self . query ( cmd ))] return algo set_wdm_analysis_narea ( narea ) \u00a4 Sets the measuring range applied to noise level measurements made by the WDM analysis function. Parameters: Name Type Description Default narea int | float The range in nm. required Source code in pyinst\\models.py 2940 2941 2942 2943 2944 2945 2946 2947 2948 def set_wdm_analysis_narea ( self , narea : int | float ) -> None : \"\"\"Sets the measuring range applied to noise level measurements made by the WDM analysis function. Args: narea: The range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NARea {narea:.2f} NM\" . format ( narea = narea ) self . command ( cmd ) get_wdm_analysis_narea () \u00a4 Quereis the measuring range applied to noise level measurements made by the WDM analysis function. Returns: Type Description float The range in nm. Source code in pyinst\\models.py 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 def get_wdm_analysis_narea ( self ) -> float : \"\"\"Quereis the measuring range applied to noise level measurements made by the WDM analysis function. Returns: The range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NARea?\" narea = float ( self . query ( cmd )) * 10 ** 9 return narea set_wdm_analysis_marea ( marea ) \u00a4 Sets the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Parameters: Name Type Description Default marea int | float The mask range in nm. required Source code in pyinst\\models.py 2961 2962 2963 2964 2965 2966 2967 2968 2969 def set_wdm_analysis_marea ( self , marea : int | float ) -> None : \"\"\"Sets the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Args: marea: The mask range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:MARea {marea:.2f} NM\" . format ( marea = marea ) self . command ( cmd ) get_wdm_analysis_marea () \u00a4 Queries the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Returns: Type Description float The mask range in nm. Source code in pyinst\\models.py 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 def get_wdm_analysis_marea ( self ) -> float : \"\"\"Queries the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Returns: The mask range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:MARea?\" marea = float ( self . query ( cmd )) * 10 ** 9 return marea set_wdm_analysis_falgo ( algo ) \u00a4 Sets the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: LIN = LINEAR GAUS = GAUSS LOR = LORENZ 3RD = 3RD POLY 4TH = 4YH POLY 5TH = 5TH POLY Parameters: Name Type Description Default algo str The name of the algorithm. Refer to options above. required Source code in pyinst\\models.py 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 def set_wdm_analysis_falgo ( self , algo : str ) -> None : \"\"\"Sets the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `LIN` = LINEAR - `GAUS` = GAUSS - `LOR` = LORENZ - `3RD` = 3RD POLY - `4TH` = 4YH POLY - `5TH` = 5TH POLY Args: algo: The name of the algorithm. Refer to options above. \"\"\" algo_options = [ \"LIN\" , \"GAUS\" , \"LOR\" , \"3RD\" , \"4TH\" , \"5TH\" ] if algo . upper () not in algo_options : raise ValueError ( \"Invalid value for algo: {value!r} \" . format ( value = algo )) cmd = \":CALCulate:PARameter:WDM:FALGo {algo} \" . format ( algo = algo ) self . command ( cmd ) get_wdm_analysis_falgo () \u00a4 Queries the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: LIN = LINEAR GAUS = GAUSS LOR = LORENZ 3RD = 3RD POLY 4TH = 4YH POLY 5TH = 5TH POLY Returns: Type Description str The name of the algorithm. Refer to options above. Source code in pyinst\\models.py 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 def get_wdm_analysis_falgo ( self ) -> str : \"\"\"Queries the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `LIN` = LINEAR - `GAUS` = GAUSS - `LOR` = LORENZ - `3RD` = 3RD POLY - `4TH` = 4YH POLY - `5TH` = 5TH POLY Returns: The name of the algorithm. Refer to options above. \"\"\" algo_options = [ \"LIN\" , \"GAUS\" , \"LOR\" , \"3RD\" , \"4TH\" , \"5TH\" ] cmd = \":CALCulate:PARameter:WDM:FALGo?\" algo = algo_options [ int ( self . query ( cmd ))] return algo set_wdm_analysis_parameter_nbw ( nbw ) \u00a4 Sets the noise bandwidth for the WDM analysis function. Parameters: Name Type Description Default nbw int | float The noise bandwidth in nm. required Source code in pyinst\\models.py 3025 3026 3027 3028 3029 3030 3031 3032 def set_wdm_analysis_parameter_nbw ( self , nbw : int | float ) -> None : \"\"\"Sets the noise bandwidth for the WDM analysis function. Args: nbw: The noise bandwidth in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NBW {nbw:.2f} NM\" . format ( nbw = nbw ) self . command ( cmd ) get_wdm_analysis_parameter_nbw () \u00a4 Queries the noise bandwidth for the WDM analysis function. Returns: Type Description float The noise bandwidth in nm. Source code in pyinst\\models.py 3034 3035 3036 3037 3038 3039 3040 3041 3042 def get_wdm_analysis_parameter_nbw ( self ) -> float : \"\"\"Queries the noise bandwidth for the WDM analysis function. Returns: The noise bandwidth in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NBW?\" nbw = float ( self . query ( cmd )) * 10 ** 9 return nbw set_smsr_analysis_mask ( mask ) \u00a4 Set the mask value for the SMSR analysis function. Parameters: Name Type Description Default mask int | float The mask value in nm. required Source code in pyinst\\models.py 3044 3045 3046 3047 3048 3049 3050 3051 def set_smsr_analysis_mask ( self , mask : int | float ) -> None : \"\"\"Set the mask value for the SMSR analysis function. Args: mask: The mask value in nm. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MASK {mask:.2f} NM\" . format ( mask = mask ) self . command ( cmd ) get_smsr_analysis_mask ( mask ) \u00a4 Quereis the mask value for the SMSR analysis function. Returns: Type Description None The mask value in nm. Source code in pyinst\\models.py 3053 3054 3055 3056 3057 3058 3059 3060 3061 def get_smsr_analysis_mask ( self , mask : int | float ) -> None : \"\"\"Quereis the mask value for the SMSR analysis function. Returns: The mask value in nm. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MASK?\" mask = float ( self . query ( cmd )) * 10 ** 9 return mask set_smsr_analysis_mode ( mode ) \u00a4 Sets the analysis mode for the SMSR analysis function. Parameters: Name Type Description Default mode str The analysis mode, SMSR1 | SMSR2 | SMSR3 | SMSR4 . required Source code in pyinst\\models.py 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 def set_smsr_analysis_mode ( self , mode : str ) -> None : \"\"\"Sets the analysis mode for the SMSR analysis function. Args: mode: The analysis mode, `SMSR1`|`SMSR2`|`SMSR3`|`SMSR4`. \"\"\" options = [ \"SMSR1\" , \"SMSR2\" , \"SMSR3\" , \"SMSR4\" ] if mode not in options : raise ValueError ( \"Invalid option for mode: {mode!r} \" . format ( mode = mode )) cmd = \":CALCulate:PARameter:SMSR:MODE {mode} \" . format ( mode = mode ) self . command ( cmd ) get_smsr_analysis_mode () \u00a4 Sets the analysis mode for the SMSR analysis function. Returns: Type Description str The analysis mode, SMSR1 | SMSR2 | SMSR3 | SMSR4 . Source code in pyinst\\models.py 3075 3076 3077 3078 3079 3080 3081 3082 3083 def get_smsr_analysis_mode ( self ) -> str : \"\"\"Sets the analysis mode for the SMSR analysis function. Returns: The analysis mode, `SMSR1`|`SMSR2`|`SMSR3`|`SMSR4`. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MODE?\" mode = self . query ( cmd ) . strip () return mode set_dfbld_analysis_parameter ( item , parameter , data ) \u00a4 Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Parameters: Name Type Description Default item str Analytical item that sets parameter(s). required parameter str Parameter to be set. required data str Setting data. required <item> <parameter> <data> SWIDth ALGO ENVelope|THResh|RMS|PKRMs TH <NRf>[DB] TH2 <NRf>[DB] K <NRf> MFIT OFF|ON|0|1 MDIFf <NRf>[DB] SMSR SMODe SMSR1|SMSR2|SMSR3|SMSR4 SMASk <NRf>[M] MDIFf <NRf>[DB] RMS ALGO RMS|PKRMs TH <NRf>[DB] K <NRf> MDIFf <NRf>[DB] POWer SPAN <NRf>[M] OSNR MDIFf <NRf>[DB] NALGo AFIX|MFIX|ACENter|MCENter|PIT|0|1|2|3|4 NARea <NRf>[M] MARea <NRf>[M] FALGo LINear|GAUSs|LORenz|3RD|4TH|5TH|0|1|2|3|4|5 NBW <NRf>[M] SPOWer PEAK|INTegral|0|1 IRANge <NRf> Source code in pyinst\\models.py 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 def set_dfbld_analysis_parameter ( self , item : str , parameter : str , data : str ) -> None : \"\"\"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Args: item: Analytical item that sets parameter(s). parameter: Parameter to be set. data: Setting data. |`<item>`|`<parameter>`|`<data>`| |--------|-------------|--------| |SWIDth |ALGO |`ENVelope|THResh|RMS|PKRMs`| | |TH |`<NRf>[DB]`| | |TH2 |`<NRf>[DB]`| | |K |`<NRf>`| | |MFIT |`OFF|ON|0|1`| | |MDIFf |`<NRf>[DB]`| |SMSR |SMODe |`SMSR1|SMSR2|SMSR3|SMSR4`| | |SMASk |`<NRf>[M]`| | |MDIFf |`<NRf>[DB]`| |RMS |ALGO |`RMS|PKRMs`| | |TH |`<NRf>[DB]`| | |K |`<NRf>`| | |MDIFf |`<NRf>[DB]`| |POWer |SPAN |`<NRf>[M]`| |OSNR |MDIFf |`<NRf>[DB]`| | |NALGo |`AFIX|MFIX|ACENter|MCENter|PIT|0|1|2|3|4`| | |NARea |`<NRf>[M]`| | |MARea |`<NRf>[M]`| | |FALGo |`LINear|GAUSs|LORenz|3RD|4TH|5TH|0|1|2|3|4|5`| | |NBW |`<NRf>[M]`| | |SPOWer |`PEAK|INTegral|0|1`| | |IRANge |`<NRf>`| \"\"\" cmd = \":CALCulate:PARameter:DFBLd {item} , {paramater} , {data} \" . format ( item = item , parameter = parameter , data = data ) self . command ( cmd ) get_dfbld_analysis_parameter ( item , parameter ) \u00a4 Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Parameters: Name Type Description Default item str Analytical item that sets parameter(s). required parameter str Parameter to be set. required Returns: Type Description str A string of the value of parameter. Please refer to str set_dfbld_analysis_parameter for detail. Source code in pyinst\\models.py 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 def get_dfbld_analysis_parameter ( self , item : str , parameter : str ) -> str : \"\"\"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Args: item: Analytical item that sets parameter(s). parameter: Parameter to be set. Returns: A string of the value of parameter. Please refer to `set_dfbld_analysis_parameter` for detail. \"\"\" cmd = \":CALCulate:PARameter:DFBLd? {item} , {paramater} \" . format ( item = item , parameter = parameter ) return self . query ( cmd ) set_swthresh_analysis_k ( k ) \u00a4 Sets the magnification of the THRESH method-based spectrum width analysis function. Parameters: Name Type Description Default k int | float The magnification. required Source code in pyinst\\models.py 3140 3141 3142 3143 3144 3145 3146 3147 3148 def set_swthresh_analysis_k ( self , k : int | float ) -> None : \"\"\"Sets the magnification of the THRESH method-based spectrum width analysis function. Args: k: The magnification. \"\"\" cmd = \":CALCulate:PARameter:SWTHResh:K {k:.2f} \" . format ( k = k ) self . command ( cmd ) get_swthresh_analysis_k () \u00a4 Sets the magnification of the THRESH method-based spectrum width analysis function. Returns: Type Description float The magnification. Source code in pyinst\\models.py 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 def get_swthresh_analysis_k ( self ) -> float : \"\"\"Sets the magnification of the THRESH method-based spectrum width analysis function. Returns: The magnification. \"\"\" cmd = \":CALCulate:PARameter:SWTHResh:K?\" k = float ( self . query ( cmd )) return k set_swthresh_analysis_mfit ( en ) \u00a4 Sets whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Parameters: Name Type Description Default en bool Whether to enable the mode fit. required Source code in pyinst\\models.py 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 def set_swthresh_analysis_mfit ( self , en : bool ) -> None : \"\"\"Sets whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Args: en: Whether to enable the mode fit. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":CALCulate:PARameter:SWTHresh:MFIT {en:d} \" . format ( en = en ) self . command ( cmd ) get_swthresh_analysis_mfit () \u00a4 Queries whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Returns: Type Description bool Whether to enable the mode fit. Source code in pyinst\\models.py 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 def get_swthresh_analysis_mfit ( self ) -> bool : \"\"\"Queries whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Returns: Whether to enable the mode fit. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:MFIT?\" en = bool ( int ( self . query ( cmd ))) return en set_swthresh_analysis_th ( th ) \u00a4 Sets the threshold level of the THRESH method-based spectrum width analysis function. Parameters: Name Type Description Default th int | float The threshold level in dB. required Source code in pyinst\\models.py 3184 3185 3186 3187 3188 3189 3190 3191 3192 def set_swthresh_analysis_th ( self , th : int | float ) -> None : \"\"\"Sets the threshold level of the THRESH method-based spectrum width analysis function. Args: th: The threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:TH {th:.2f} DB\" . format ( th = th ) self . command ( cmd ) get_swthresh_analysis_th () \u00a4 Queries the threshold level of the THRESH method-based spectrum width analysis function. Returns: Type Description float The threshold level in dB. Source code in pyinst\\models.py 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 def get_swthresh_analysis_th ( self ) -> float : \"\"\"Queries the threshold level of the THRESH method-based spectrum width analysis function. Returns: The threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:TH?\" th = float ( self . query ( cmd )) return th get_analysis_data () \u00a4 Queries the analysis results from the last time analysis was executed. For the output formats of analysis results, please refer to documents from the instrument vendor. Source code in pyinst\\models.py 3205 3206 3207 3208 3209 3210 3211 3212 def get_analysis_data ( self ) -> str : \"\"\"Queries the analysis results from the last time analysis was executed. For the output formats of analysis results, please refer to documents from the instrument vendor. \"\"\" return self . query ( ':CALC:DATA?' ) set_center ( value , unit ) \u00a4 Sets the measurement condition center wavelength/frequency. Parameters: Name Type Description Default value int | float The center frequency in THz or wavelength in nm. required unit str \"NM\" or \"THZ\" . required Source code in pyinst\\models.py 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 def set_center ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the measurement condition center wavelength/frequency. Args: value: The center frequency in THz or wavelength in nm. unit: `\"NM\"` or `\"THZ\"`. \"\"\" if unit . upper () not in self . WL_UNITS : raise ValueError ( 'Invalid option for unit: {unit!r} .' . format ( unit = unit )) cmd = \":SENSe:WAVelength:CENTer {value:.4f}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd ) get_center () \u00a4 Queries the measurement condition center wavelength/frequency. Returns: Type Description float The value of center frequency/wavelength value. If x unit is float \"WAV\", returns the center wavelength in nm. If x unit is \"FREQ\", float returns the center frequency in THz. float Please refer to get_x_unit for more information. Source code in pyinst\\models.py 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 def get_center ( self ) -> float : \"\"\" Queries the measurement condition center wavelength/frequency. Returns: The value of center frequency/wavelength value. If x unit is \"WAV\", returns the center wavelength in nm. If x unit is \"FREQ\", returns the center frequency in THz. Please refer to `get_x_unit` for more information. \"\"\" cmd = \":SENSe:WAVelength:CENTer?\" if \"WAV\" == self . get_x_unit (): center = float ( self . query ( cmd )) * 10 ** 9 else : center = float ( self . query ( cmd )) / 10 ** 12 return center set_span ( value , unit ) \u00a4 Sets the measurement condition measurement span. Parameters: Name Type Description Default value int | float The value of measurement span. required unit str \"NM\" or \"GHZ\" . required Source code in pyinst\\models.py 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 def set_span ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the measurement condition measurement span. Args: value: The value of measurement span. unit: `\"NM\"` or `\"GHZ\"`. \"\"\" if unit not in self . WL_SPAN_UNITS : raise ValueError ( \"Invalid option for unit: {unit!r} \" . format ( unit = unit )) cmd = \":SENSe:WAVelengthSPAN {value:.2f}{unit} \" . format ( value = value , unit = unit ) return self . command ( cmd ) get_span () \u00a4 Queries the measurement condition measurement span and unit. Returns: Type Description float The value of measurement span value. If x unit is \"WAV\", returns float the span in nm. If x unit is \"FREQ\", returns the span in GHz. float Please refer to get_x_unit for more information. Source code in pyinst\\models.py 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 def get_span ( self ) -> float : \"\"\"Queries the measurement condition measurement span and unit. Returns: The value of measurement span value. If x unit is \"WAV\", returns the span in nm. If x unit is \"FREQ\", returns the span in GHz. Please refer to `get_x_unit` for more information. \"\"\" cmd = \":SENSe:WAVelengthSPAN?\" if \"WAV\" == self . get_x_unit (): span = float ( self . query ( cmd )) * 10 ** 9 else : span = float ( self . query ( cmd )) / 10 ** 9 return span get_start_wavelength () \u00a4 Queries the measurement condition measurement start wavelength in nm. Returns: Type Description float The start wavelength in nm. Source code in pyinst\\models.py 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 def get_start_wavelength ( self ) -> float : \"\"\"Queries the measurement condition measurement start wavelength in nm. Returns: The start wavelength in nm. \"\"\" cmd = \":SENSe:WAVelength:STARt?\" if \"WAV\" == self . get_x_unit (): wl = float ( self . query ( cmd )) * 10 ** 9 else : wl = LIGHTSPEED / ( float ( self . query ( cmd )) / 10 ** 12 ) return wl set_start_wavelength ( wavelength ) \u00a4 Sets the measurement condition measurement start wavelength in nm. Parameters: Name Type Description Default wavelength int | float The start wavelength in nm. required Source code in pyinst\\models.py 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 def set_start_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Sets the measurement condition measurement start wavelength in nm. Args: wavelength: The start wavelength in nm. \"\"\" if \"WAV\" == self . get_x_unit (): cmd = \":SENSe:WAVelength:STARt {wl:.6f} NM\" . format ( wl = wavelength ) self . command ( cmd ) else : self . set_stop_frequency ( LIGHTSPEED / wavelength ) get_stop_wavelength () \u00a4 Queries the measurement condition measurement stop wavelength in nm. Returns: Type Description float The stop wavelength in nm. Source code in pyinst\\models.py 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 def get_stop_wavelength ( self ) -> float : \"\"\"Queries the measurement condition measurement stop wavelength in nm. Returns: The stop wavelength in nm. \"\"\" cmd = \":SENSe:WAVelength:STOP?\" if \"WAV\" == self . get_x_unit (): wl = float ( self . query ( cmd )) * 10 ** 9 else : wl = LIGHTSPEED / ( float ( self . query ( cmd )) / 10 ** 12 ) return wl set_stop_wavelength ( wavelength ) \u00a4 Sets the measurement condition measurement stop wavelength in nm. Parameters: Name Type Description Default wavelength int | float The stop wavelength in nm. required Source code in pyinst\\models.py 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 def set_stop_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Sets the measurement condition measurement stop wavelength in nm. Args: wavelength: The stop wavelength in nm. \"\"\" if \"WAV\" == self . get_x_unit (): cmd = \":SENSe:WAVelength:STOP {wl:.6f} NM\" . format ( wl = wavelength ) self . command ( cmd ) else : self . set_start_frequency ( LIGHTSPEED / wavelength ) get_start_frequency () \u00a4 Queries the measurement condition measurement start frequency in THz. Returns: Type Description float The start frequency in THz. Source code in pyinst\\models.py 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 def get_start_frequency ( self ) -> float : \"\"\"Queries the measurement condition measurement start frequency in THz. Returns: The start frequency in THz. \"\"\" cmd = \":SENSe:WAVelength:STOP?\" if \"FREQ\" == self . get_x_unit (): f = float ( self . query ( cmd )) / 10 ** 12 else : f = LIGHTSPEED / ( float ( self . query ( cmd )) * 10 ** 9 ) return f set_start_frequency ( frequency ) \u00a4 Queries the measurement condition measurement start frequency in THz. Parameters: Name Type Description Default frequency int | float The start frequency in THz. required Source code in pyinst\\models.py 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 def set_start_frequency ( self , frequency : int | float ) -> None : \"\"\"Queries the measurement condition measurement start frequency in THz. Args: frequency: The start frequency in THz. \"\"\" if \"FREQ\" == self . get_x_unit (): cmd = \":SENSe:WAVelength:STOP {freq:.6f} THZ\" . format ( freq = frequency ) self . command ( cmd ) else : self . set_stop_wavelength ( LIGHTSPEED / frequency ) get_stop_frequency () \u00a4 Queries the measurement condition measurement stop frequency in THz. Returns: Type Description float The stop frequency in THz. Source code in pyinst\\models.py 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 def get_stop_frequency ( self ) -> float : \"\"\"Queries the measurement condition measurement stop frequency in THz. Returns: The stop frequency in THz. \"\"\" cmd = \":SENSe:WAVelength:STARt?\" if \"FREQ\" == self . get_x_unit (): f = float ( self . query ( cmd )) / 10 ** 12 else : f = LIGHTSPEED / ( float ( self . query ( cmd )) * 10 ** 9 ) return f set_stop_frequency ( frequency ) \u00a4 Queries the measurement condition measurement stop frequency in THz. Parameters: Name Type Description Default frequency int | float The stop frequency in THz. required Source code in pyinst\\models.py 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 def set_stop_frequency ( self , frequency : int | float ) -> None : \"\"\"Queries the measurement condition measurement stop frequency in THz. Args: frequency: The stop frequency in THz. \"\"\" if \"FREQ\" == self . get_x_unit (): cmd = \":SENSe:WAVelength:STARt {freq:.6f} THZ\" . format ( freq = frequency ) self . command ( cmd ) else : self . set_start_wavelength ( LIGHTSPEED / frequency ) set_marker_active_state ( marker , state ) \u00a4 Set the active state of a specified marker. A marker should be set into active state before further operations. Parameters: Name Type Description Default marker int Marker number. 1 | 2 | 3 | 4 . required state bool True = active, False = inactive. required Source code in pyinst\\models.py 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 def set_marker_active_state ( self , marker : int , state : bool ) -> None : \"\"\"Set the active state of a specified marker. A marker should be set into active state before further operations. Args: marker: Marker number. `1` | `2` | `3` | `4`. state: `True` = active, `False` = inactive. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) if not isinstance ( state , bool ): raise TypeError ( f \"Parameter state must be a bool, not ' { type ( state ) . __name__ } '.\" ) cmd = \":CALCULATE:MARKER:STATE {marker:d} , {state:d} \" self . command ( cmd ) get_marker_active_state ( marker ) \u00a4 Queries the active state of a specified marker. A marker should be set into active state before further operations. Parameters: Name Type Description Default marker int Marker number. 1 | 2 | 3 | 4 . required Returns: Type Description bool True = active, False = inactive. Source code in pyinst\\models.py 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 def get_marker_active_state ( self , marker : int ) -> bool : \"\"\"Queries the active state of a specified marker. A marker should be set into active state before further operations. Args: marker: Marker number. `1` | `2` | `3` | `4`. Returns: `True` = active, `False` = inactive. \"\"\" cmd = \":CALCulate:MARKer:STATe? {marker:d} \" . format ( marker = marker ) state = bool ( int ( self . query ( cmd ))) return state get_marker_x_unit () \u00a4 Queries the units of display for the marker values. Returns: Type Description str The unit of marker X. \"WAV\" | \"FREQ\" . Source code in pyinst\\models.py 3423 3424 3425 3426 3427 3428 3429 3430 3431 def get_marker_x_unit ( self ) -> str : \"\"\"Queries the units of display for the marker values. Returns: The unit of marker X. `\"WAV\"` | `\"FREQ\"`. \"\"\" cmd = \":CALCulate:MARKer:UNIT?\" unit = [ \"WAV\" , \"FREQ\" ][ int ( self . query ( cmd ))] return unit set_marker_x_unit ( unit ) \u00a4 Sets the units of display for the marker values. Parameters: Name Type Description Default unit str The unit of marker X. \"WAV\" | \"FREQ\" . required Source code in pyinst\\models.py 3433 3434 3435 3436 3437 3438 3439 3440 def set_marker_x_unit ( self , unit : str ) -> None : \"\"\"Sets the units of display for the marker values. Args: unit: The unit of marker X. `\"WAV\"` | `\"FREQ\"`. \"\"\" cmd = \":CALCulate:MARKer:UNIT {unit} \" . format ( unit = unit ) self . command ( cmd ) set_marker_x ( marker , x , unit ) \u00a4 Places a specified marker in a specified position. Parameters: Name Type Description Default marker int Marker number. 1 | 2 | 3 | 4 . required x int | float The x value to put the marker. required unit str The unit of x value. \"THZ\" or \"NM\" . required Source code in pyinst\\models.py 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 def set_marker_x ( self , marker : int , x : int | float , unit : str ): \"\"\"Places a specified marker in a specified position. Args: marker: Marker number. `1` | `2` | `3` | `4`. x: The x value to put the marker. unit: The unit of x value. `\"THZ\"` or `\"NM\"`. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) if unit not in [ 'NM' , 'THZ' ]: raise ValueError ( \"Invalid unit: {u!r} \" . format ( u = unit )) cmd = \":CALCulate:MARKer:X {marker:d} , {x:.6f}{unit} \" . format ( marker = marker , x = x , unit = unit ) self . command ( cmd ) get_marker_x ( marker ) \u00a4 Queries the X value of the specified marker. Parameters: Name Type Description Default marker int Marker number. 1 | 2 | 3 | 4 required Returns: Type Description float The X value of the specified marker. If marker x unit is float \"WAV\", returns the x value in nm. If x unit is \"FREQ\", float returns the x value in THz. float Please refer to get_marker_x_unit for information. Source code in pyinst\\models.py 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 def get_marker_x ( self , marker : int ) -> float : \"\"\"Queries the X value of the specified marker. Args: marker: Marker number. `1` | `2` | `3` | `4` Returns: The X value of the specified marker. If marker x unit is \"WAV\", returns the x value in nm. If x unit is \"FREQ\", returns the x value in THz. Please refer to `get_marker_x_unit` for information. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:X? {marker:d} \" . format ( marker = marker ) x_unit = self . get_marker_x_unit () if \"WAV\" == x_unit : x = float ( self . query ( cmd )) * 10 ** 9 else : x = float ( self . query ( cmd )) / 10 ** 12 return x get_marker_y ( marker ) \u00a4 Queries the Y value of the specified marker. This unit of the marker level to be queried is dependent on the Y-axis unit of the active trace. Source code in pyinst\\models.py 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 def get_marker_y ( self , marker : int ) -> str : \"\"\"Queries the Y value of the specified marker. This unit of the marker level to be queried is dependent on the Y-axis unit of the active trace. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:Y? {marker:d} \" . format ( marker = marker ) y = float ( self . query ( cmd )) return y set_y_scale_mode ( mode ) \u00a4 Sets the scale mode of the main scale of the level axis. Parameters: Name Type Description Default mode str The scale mode of level axis. \"LOG\" = Logarighmic, \"LIN\" = Linear. required Source code in pyinst\\models.py 3492 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 def set_y_scale_mode ( self , mode : str ) -> None : \"\"\"Sets the scale mode of the main scale of the level axis. Args: mode: The scale mode of level axis. `\"LOG\"` = Logarighmic, `\"LIN\"` = Linear. \"\"\" if mode not in ( \"LOG\" , \"LIN\" ): raise ValueError ( \"Invalid mode: {mode!r} \" . format ( mode = mode )) cmd = \":DISPlay:TRACe:Y1:SPACing {mode} \" . format ( mode = mode ) self . command ( cmd ) get_y_scale_mode () \u00a4 Queries the scale mode of the main scale of the level axis. Returns: Name Type Description mode str The scale mode of level axis. \"LOG\" = Logarighmic, \"LIN\" = Linear. Source code in pyinst\\models.py 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 def get_y_scale_mode ( self ) -> str : \"\"\"Queries the scale mode of the main scale of the level axis. Returns: mode: The scale mode of level axis. `\"LOG\"` = Logarighmic, `\"LIN\"` = Linear. \"\"\" cmd = \":DISPlay:TRACe:Y1:SPACing?\" mode = [ \"LOG\" , \"LIN\" ][ int ( self . query ( cmd ))] return mode set_peak_to_center () \u00a4 Detects the peak wavelength and sets it as the measurement center waveform. Source code in pyinst\\models.py 3515 3516 3517 3518 3519 3520 def set_peak_to_center ( self ) -> None : \"\"\"Detects the peak wavelength and sets it as the measurement center waveform. \"\"\" cmd = \":CALCulate:MARKer:MAXimum:SCENter\" self . command ( cmd ) set_ref_level ( value , unit ) \u00a4 Sets the reference level of the main scale of the level axis. Parameters: Name Type Description Default value int | float The value of the ref level. required unit str The unit of the ref level. \"DBM\" | \"W\" | \"MW\" . required Source code in pyinst\\models.py 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 def set_ref_level ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the reference level of the main scale of the level axis. Args: value: The value of the ref level. unit: The unit of the ref level. `\"DBM\"` | `\"W\"` | `\"MW\"`. \"\"\" if unit not in [ 'DBM' , 'W' , 'MW' ]: raise ValueError ( 'Invalid unit: {unit!r} ' . format ( unit = unit )) cmd = \":DISPlay:TRACe:Y1:RLEVel {value:.6E}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd ) get_ref_level () \u00a4 Sets/queries the reference level of the main scale of the level axis. Returns: Type Description float The value of the ref level in unit dBm or W depends on the Y scale str mode. Please refer to get_y_scale_mode for information. Source code in pyinst\\models.py 3534 3535 3536 3537 3538 3539 3540 3541 3542 3543 3544 def get_ref_level ( self ) -> Tuple [ float , str ]: \"\"\"Sets/queries the reference level of the main scale of the level axis. Returns: The value of the ref level in unit dBm or W depends on the Y scale mode. Please refer to `get_y_scale_mode` for information. \"\"\" cmd = \":DISPlay:TRACe:Y1:RLEVel?\" level = float ( self . query ( cmd )) return level set_peak_to_ref () \u00a4 Detects the peak level and sets it for the reference level. Source code in pyinst\\models.py 3546 3547 3548 3549 def set_peak_to_ref ( self ) -> None : \"\"\"Detects the peak level and sets it for the reference level.\"\"\" cmd = \":CALCulate:MARKer:MAXimum:SRLevel\" self . command ( cmd ) set_auto_ref_level ( enable ) \u00a4 Sets ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Parameters: Name Type Description Default enable bool Whether to enable auto ref level. required Source code in pyinst\\models.py 3551 3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 def set_auto_ref_level ( self , enable : bool ) -> None : \"\"\"Sets ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Args: enable: Whether to enable auto ref level. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = \":CALCulate:MARKer:MAXimum:SRLevel:AUTO {enable:d} \" . format ( enable = enable ) self . command ( cmd ) get_auto_ref_level () \u00a4 Queries ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Returns: Type Description bool If this function is enabled. Source code in pyinst\\models.py 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 def get_auto_ref_level ( self ) -> bool : \"\"\"Queries ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Returns: If this function is enabled. \"\"\" cmd = \":CALCulate:MARKer:MAXimum:SRLevel:AUTO?\" enabled = bool ( int ( self . query ( cmd ))) return enabled get_resolution_bandwidth () \u00a4 Queries the measurment resolution. Returns: Type Description float The resolution bandwidth. If x unit is \"WAV\", returns the float resolution in nm. If x unit is \"FREQ\", returns the resolution float in GHz. float Please refer to get_x_unit for more information. Source code in pyinst\\models.py 3574 3575 3576 3577 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 3588 3589 def get_resolution_bandwidth ( self ) -> float : \"\"\"Queries the measurment resolution. Returns: The resolution bandwidth. If x unit is \"WAV\", returns the resolution in nm. If x unit is \"FREQ\", returns the resolution in GHz. Please refer to `get_x_unit` for more information. \"\"\" cmd = \":SENSe:BANDwidth?\" if \"WAV\" == self . get_x_unit (): res = float ( self . query ( cmd )) * 10 ** 9 else : res = float ( self . query ( cmd )) / 10 ** 9 return res set_resolution_bandwidth ( bandwidth , unit ) \u00a4 Sets the measurment resolution. Parameters: Name Type Description Default bandwidth int | float The resolution bandwidth. required unit str \"NM\" or \"GHZ\" . required Source code in pyinst\\models.py 3591 3592 3593 3594 3595 3596 3597 3598 3599 3600 3601 3602 def set_resolution_bandwidth ( self , bandwidth : int | float , unit : str ) -> None : # TODO: verify if only particular values can be set. \"\"\"Sets the measurment resolution. Args: bandwidth: The resolution bandwidth. unit: `\"NM\"` or `\"GHZ\"`. \"\"\" if unit not in [ \"NM\" , \"GHZ\" ]: raise ValueError ( \"Invalid unit: {unit!r} \" . format ( unit = unit )) cmd = \":SENSe:BANDwidth {bandwidth:.6f}{unit} \" . format ( bandwidth = bandwidth , unit = unit ) self . command ( cmd ) clear_all_markers () \u00a4 Clears all markers. Source code in pyinst\\models.py 3604 3605 3606 def clear_all_markers ( self ) -> None : \"\"\"Clears all markers.\"\"\" self . command ( ':CALCulate:MARKer:AOFF' ) set_active_trace ( trace_name ) \u00a4 Sets the active trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Source code in pyinst\\models.py 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 def set_active_trace ( self , trace_name : str ) -> None : \"\"\"Sets the active trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:ACTive {trace_name} ' . format ( trace_name = trace_name ) self . command ( cmd ) get_active_trace () \u00a4 Queries the active trace. Returns: Type Description str The trace name, TRA | TRB | TRC | TRD | TRE | TRF | TRG . Source code in pyinst\\models.py 3619 3620 3621 3622 3623 3624 3625 3626 3627 def get_active_trace ( self ) -> str : \"\"\"Queries the active trace. Returns: The trace name, `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG`. \"\"\" cmd = ':TRACe:ACTive?' trace_name = self . query ( cmd ) . strip () return trace_name set_trace_attribute ( trace_name , attribute ) \u00a4 Sets the attributes of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required attribute str WRIT | FIX | MAX | MIN | RAVG | CALC required Source code in pyinst\\models.py 3629 3630 3631 3632 3633 3634 3635 3636 3637 3638 3639 3640 3641 def set_trace_attribute ( self , trace_name : str , attribute : str ) -> None : \"\"\"Sets the attributes of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` attribute: `WRIT` | `FIX` | `MAX` | `MIN` | `RAVG` | `CALC` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) if attribute not in [ 'WRIT' , 'FIX' , 'MAX' , 'MIN' , 'RAVG' , 'CALC' ]: raise ValueError ( 'Invalid attribute: {attr!r} ' . format ( attr = attribute )) cmd = ':TRACe:ATTRibute: {trace} {attribute} ' . format ( trace = trace_name , attribute = attribute ) self . command ( cmd ) get_trace_attribute ( trace_name ) \u00a4 Queries the attributes of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Name Type Description attribute str WRIT | FIX | MAX | MIN | RAVG | CALC Source code in pyinst\\models.py 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 3653 3654 def get_trace_attribute ( self , trace_name : str ) -> str : \"\"\"Queries the attributes of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: attribute: `WRIT` | `FIX` | `MAX` | `MIN` | `RAVG` | `CALC` \"\"\" cmd = ':TRACe:ATTRibute: {trace} ?' . format ( trace = trace_name ) ATTRS = [ 'WRIT' , 'FIX' , 'MAX' , 'MIN' , 'RAVG' , 'CALC' ] attr = ATTRS [ int ( self . query ( cmd ))] return attr set_trace_display_status ( trace_name , display ) \u00a4 Sets the display status of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required display bool Whether to display the trace. required Source code in pyinst\\models.py 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 def set_trace_display_status ( self , trace_name : str , display : bool ) -> None : \"\"\"Sets the display status of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` display: Whether to display the trace. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) if not isinstance ( display , bool ): raise TypeError ( f \"Parameter display must be a bool, not ' { type ( display ) . __name__ } '.\" ) cmd = ':TRACe:STATe: {trace_name} {display:d} ' . format ( trace_name = trace_name , display = display ) self . command ( cmd ) get_trace_display_status ( trace_name ) \u00a4 Queries the display status of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description bool Whether the trace is displayed. Source code in pyinst\\models.py 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 def get_trace_display_status ( self , trace_name : str ) -> bool : \"\"\"Queries the display status of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: Whether the trace is displayed. \"\"\" cmd = ':TRACe:STATe: {trace_name} ?' . format ( trace_name = trace_name ) displayed = bool ( int ( self . query ( cmd ))) return displayed clear_trace ( trace_name ) \u00a4 Deletes the data of a specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Source code in pyinst\\models.py 3683 3684 3685 3686 3687 3688 3689 3690 3691 3692 def clear_trace ( self , trace_name : str ) -> None : \"\"\"Deletes the data of a specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:DELete {trace_name} ' . format ( trace_name = trace_name ) self . command ( cmd ) clear_all_traces () \u00a4 Clears the data for all traces. Source code in pyinst\\models.py 3694 3695 3696 def clear_all_traces ( self ) -> None : \"\"\"Clears the data for all traces. \"\"\" self . command ( ':TRACe:DELete:ALL' ) get_trace_data_x ( trace_name ) \u00a4 Queries the wavelength axis data of the specified trace. Data is output in the unit of wavelength value (nm), regardless of whether this unit is in the wavelength mode or in the frequency mode. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description List [ float ] A list of the wavelength axis data in nm. Source code in pyinst\\models.py 3698 3699 3700 3701 3702 3703 3704 3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 def get_trace_data_x ( self , trace_name : str ) -> List [ float ]: \"\"\"Queries the wavelength axis data of the specified trace. Data is output in the unit of wavelength value (nm), regardless of whether this unit is in the wavelength mode or in the frequency mode. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: A list of the wavelength axis data in nm. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:DATA:X? {trace_name} ' . format ( trace_name ) result = [ float ( i ) * 10 ** 9 for i in self . query ( cmd ) . split ( ',' )] return result get_trace_data_y ( trace_name ) \u00a4 Queries the level axis data of specified trace. The data is output in order of its wavelength from the shortest level to the longest, irrespective of the wavelength/frequency mode. When the level scale is LOG, data is output in LOG values. When the level scale is Linear, data is output in linear values. Source code in pyinst\\models.py 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 def get_trace_data_y ( self , trace_name : str ) -> List [ float ]: \"\"\"Queries the level axis data of specified trace. The data is output in order of its wavelength from the shortest level to the longest, irrespective of the wavelength/frequency mode. When the level scale is LOG, data is output in LOG values. When the level scale is Linear, data is output in linear values. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:DATA:Y? {trace_name} ' . format ( trace_name ) result = [ float ( i ) for i in self . query ( cmd ) . split ( ',' )] return result capture_screen () \u00a4 Capture the screen in BMP format and returns the iamge data as bytes. Returns: Type Description bytes The image data of the screen capture. Source code in pyinst\\models.py 3732 3733 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 def capture_screen ( self ) -> bytes : \"\"\"Capture the screen in BMP format and returns the iamge data as bytes. Returns: The image data of the screen capture. \"\"\" # create a unique name with nearly no chance to conflict temp_filename = 'tmp- {timestamp:X} ' . format ( timestamp = int ( time . time () * 10 ** 6 )) # save image to internal memory self . command ( ':MMEMORY:STORE:GRAPHICS COLOR,BMP,\" {filename} \",INTERNAL' . format ( filename = temp_filename )) self . opc # save data to PC bin_data = self . query ( ':MMEMORY:DATA? \" {filename} .BMP\",internal' . format ( filename = temp_filename ), bin = True ) bytes_data = bytes ( bin_data ) # delete temp file from internal memory self . command ( ':MMEMORY:DELETE \" {filename} .BMP\",internal' . format ( filename = temp_filename )) return bytes_data save_screen ( file_path ) \u00a4 Capture the screen and save as a .bmp file. Parameters: Name Type Description Default file_path The file path to save the screen capture. required Source code in pyinst\\models.py 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 def save_screen ( self , file_path ): \"\"\"Capture the screen and save as a .bmp file. Args: file_path: The file path to save the screen capture. \"\"\" data = self . capture_screen () if os . path . exists ( file_path ): raise PermissionError ( 'The file path {path} already exists.' . format ( path = file_path )) with open ( file_path , 'wb' ) as f : f . write ( data ) ModelAQ6150 ( resource_name , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeWM Source code in pyinst\\models.py 3773 3774 def __init__ ( self , resource_name , ** kwargs ): super ( ModelAQ6150 , self ) . __init__ ( resource_name , ** kwargs ) run ( state = True ) \u00a4 Executes (stops) repeat measurement. Parameters: Name Type Description Default state bool True = Execute, False = Stop. True Source code in pyinst\\models.py 3776 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 def run ( self , state : bool = True ) -> None : \"\"\" Executes (stops) repeat measurement. Args: state: `True` = Execute, `False` = Stop. \"\"\" if not isinstance ( state , bool ): raise TypeError ( f \"Parameter state must be a bool, not ' { type ( state ) . __name__ } '.\" ) cmd = ':INITiate:CONTinuous {state:d} ' . format ( state = state ) self . command ( cmd ) stop () \u00a4 Stops repeat measurement. Source code in pyinst\\models.py 3788 3789 3790 3791 3792 def stop ( self ): \"\"\" Stops repeat measurement. \"\"\" self . run ( False ) is_running () \u00a4 Queries the repeat measurement state. Returns: Type Description bool True = Execute, False = Stop. Source code in pyinst\\models.py 3794 3795 3796 3797 3798 3799 3800 3801 3802 3803 def is_running ( self ) -> bool : \"\"\" Queries the repeat measurement state. Returns: `True` = Execute, `False` = Stop. \"\"\" cmd = ':INITiate:CONTinuous?' state = bool ( int ( self . query ( cmd ))) return state get_frequency () \u00a4 Queries the peak frequency in single view mode for single measurement. Returns: Type Description float The peak frequency in THz. Source code in pyinst\\models.py 3805 3806 3807 3808 3809 3810 3811 3812 3813 3814 3815 def get_frequency ( self ) -> float : \"\"\"Queries the peak frequency in single view mode for single measurement. Returns: The peak frequency in THz. \"\"\" cmd = \":MEASure:POWer:FREQuency?\" freq = float ( self . query ( cmd )) / 10 ** 12 if freq == 0 : raise ValueError ( 'No optical input signal.' ) return freq get_wavelength () \u00a4 Queries the peak wavelength in single view mode for single measurement. Returns: Type Description The peak wavelength in nm. Source code in pyinst\\models.py 3817 3818 3819 3820 3821 3822 3823 3824 3825 3826 3827 def get_wavelength ( self ): \"\"\"Queries the peak wavelength in single view mode for single measurement. Returns: The peak wavelength in nm. \"\"\" cmd = \":MEASure:POWer:WAVelength?\" wl = float ( self . query ( cmd )) * 10 ** 9 if wl == 0 : raise ValueError ( 'No optical input signal.' ) return wl BaseModelEspecOld ( resource_name , dev_id = 0 , baud_rate = 19200 , read_timeout = 0.5 , ** kwargs ) \u00a4 Bases: BaseInstrument , TypeTS The base class for old chamber models by Espec MC-711 MT3065 Note Before communication, some configuration must be performed on the chamber: - Device ID: Correspond with the dev_id in the __init__ method. Defaults to 0. Parameters: Name Type Description Default resource_name str Serial port name. required dev_id int The device ID of the chamber. 0 baudrate Baud rate such as 9600 or 115200 etc.. required read_timeout int | float Timeout in milliseconds for read operations. 0.5 **kwargs Directly passed to serial.Serial() . {} Source code in pyinst\\models.py 3852 3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 def __init__ ( self , resource_name : str , dev_id : int = 0 , baud_rate : int = 19200 , read_timeout : int | float = 0.5 , ** kwargs ): \"\"\" Args: resource_name: Serial port name. dev_id: The device ID of the chamber. baudrate: Baud rate such as 9600 or 115200 etc.. read_timeout: Timeout in milliseconds for read operations. **kwargs: Directly passed to `serial.Serial()`. \"\"\" super ( BaseModelEspecOld , self ) . __init__ () if dev_id not in range ( 16 ): raise ValueError ( 'Device ID must be between 0 and 15' ) self . __dev_id = dev_id self . __serial = serial . Serial ( port = resource_name , baudrate = baud_rate , timeout = read_timeout , ** kwargs ) self . __serial . setRTS () self . __serial . setDTR () self . __serial . reset_input_buffer () self . __resource_name = resource_name run ( en = True ) \u00a4 TODO Source code in pyinst\\models.py 3904 3905 def run ( self , en : bool = True ) -> None : \"\"\"TODO\"\"\" is_running () \u00a4 TODO Source code in pyinst\\models.py 3910 3911 def is_running ( self ) -> bool : \"\"\"TODO\"\"\" ModelMC711 \u00a4 Bases: BaseModelEspecOld See base class: [ BaseModelEspecOld ][pyinst.instrument_models.BaseModelEspecOld ModelMT3065 \u00a4 Bases: BaseModelEspecOld See base class: BaseModelEspecOld ModelMC811 ( resource_name , baudrate = 19200 , bytesize = SerialByteSize . EIGHTBITS , parity = SerialParity . NONE , stopbits = SerialStopBits . ONE , termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: RawSerialInstrument , TypeTS MC-811 is a chamber model by GWS. Note Before communication, some configuration should be performed on the chamber. Communication: Serial Protocol: STEN Baudrate/Parity/Bytesize/Stopbits/Termination: Correspond with the settings in the __init__ method. Default values: baudrate = 19200 parity = NONE Bytesize = 8 bits Stopbits: 1 bit Termination: <CR><LF> Device ID: None Parameters: Name Type Description Default resource_name Serial port name. required baudrate Baud rate such as 9600 or 115200 etc.. 19200 bytesize SerialByteSize = SerialByteSize.EIGHTBITS, SerialByteSize.EIGHTBITS parity SerialParity = SerialParity.NONE, SerialParity.NONE stopbits SerialStopBits = SerialStopBits.ONE, SerialStopBits.ONE termination The write and read termination character. '\\r\\n' **kwargs Directly passed to RawSerialInstrument.__init__ . {} Source code in pyinst\\models.py 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 3999 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 def __init__ ( self , resource_name , baudrate = 19200 , bytesize = SerialByteSize . EIGHTBITS , parity = SerialParity . NONE , stopbits = SerialStopBits . ONE , termination = ' \\r\\n ' , ** kwargs ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. bytesize: SerialByteSize = SerialByteSize.EIGHTBITS, parity: SerialParity = SerialParity.NONE, stopbits: SerialStopBits = SerialStopBits.ONE, termination: The write and read termination character. **kwargs: Directly passed to `RawSerialInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , baudrate = baudrate , bytesize = bytesize , parity = parity , stopbits = stopbits , write_termination = termination , read_termination = termination , ** kwargs ) run ( en = True ) \u00a4 TODO Source code in pyinst\\models.py 4027 4028 def run ( self , en : bool = True ) -> None : \"\"\"TODO\"\"\" is_running () \u00a4 TODO Source code in pyinst\\models.py 4033 4034 def is_running ( self ) -> bool : \"\"\"TODO\"\"\" ModelATS535 ( resource_name , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeTS ATS-535 is a thermo-stream model by Temptronic. Note that before operating with temperature directly (means not in Cycle mode), you should set the thermo-stream to the Operator screen, and make sure the test head is lower down, and the air flow is on. Examples: ts = ModelATS535 ( '<resource-name>' ) ts . reset_operator () # check the test head is down if not ts . is_head_down (): raise OperationalError ( 'The thermo-stream test head is up.' ) # turn on the air flow ts . flow () # operate with the temperature directly ts . set_target_temp ( 35 ) t = ts . get_current_temp () Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required **kwargs directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 4083 4084 4085 4086 4087 4088 4089 def __init__ ( self , resource_name , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: directly passed to `VisaInstrument.__init__` \"\"\" super ( ModelATS535 , self ) . __init__ ( resource_name , ** kwargs ) head_up () \u00a4 Raise up the test head. Source code in pyinst\\models.py 4095 4096 4097 def head_up ( self ) -> None : \"\"\"Raise up the test head.\"\"\" self . command ( 'HEAD 0' ) head_down () \u00a4 Lower down the test head. Source code in pyinst\\models.py 4099 4100 4101 def head_down ( self ) -> None : \"\"\"Lower down the test head.\"\"\" self . command ( 'HEAD 1' ) is_head_down () \u00a4 Queries if the test head is lowered down. Returns: Type Description bool If the test head is lowered down. Source code in pyinst\\models.py 4103 4104 4105 4106 4107 4108 4109 4110 def is_head_down ( self ) -> bool : \"\"\"Queries if the test head is lowered down. Returns: If the test head is lowered down. \"\"\" is_down = bool ( int ( self . query ( 'HEAD?' ))) return is_down flow ( on = True ) \u00a4 Turn the main nozzle air flow on or off. Parameters: Name Type Description Default on bool True = turn on, False = turn off. True Source code in pyinst\\models.py 4112 4113 4114 4115 4116 4117 4118 4119 def flow ( self , on : bool = True ) -> None : \"\"\"Turn the main nozzle air flow on or off. Args: on: `True` = turn on, `False` = turn off. \"\"\" cmd = 'FLOW {:d} ' . format ( on ) self . command ( cmd ) enable_dut_mode ( en = True ) \u00a4 Enable (disable) DUT mode. Parameters: Name Type Description Default en bool True = DUT mode on (DUT control); False = DUT mode off (air control). True Source code in pyinst\\models.py 4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 def enable_dut_mode ( self , en : bool = True ) -> None : \"\"\"Enable (disable) DUT mode. Args: en: True = DUT mode on (DUT control); False = DUT mode off (air control). \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = 'DUTM {en:d} ' . format ( en = en ) self . command ( cmd ) is_dut_mode () \u00a4 Queries if DUT mode is on. Returns: Type Description bool True = DUT mode on (DUT control); False = DUT mode off (air control). Source code in pyinst\\models.py 4132 4133 4134 4135 4136 4137 4138 4139 def is_dut_mode ( self ) -> bool : \"\"\"Queries if DUT mode is on. Returns: True = DUT mode on (DUT control); False = DUT mode off (air control). \"\"\" state = bool ( int ( self . query ( 'DUTM?' ))) return state disable_dut_mode () \u00a4 Disable DUT mode. Source code in pyinst\\models.py 4141 4142 4143 def disable_dut_mode ( self ) -> None : \"\"\"Disable DUT mode.\"\"\" self . enable_dut_mode ( False ) reset_operator () \u00a4 Reset (force) the System to the Operator screen. Source code in pyinst\\models.py 4145 4146 4147 4148 def reset_operator ( self ) -> None : \"\"\"Reset (force) the System to the Operator screen.\"\"\" self . command ( 'RSTO' ) time . sleep ( 0.3 ) set_n ( n ) \u00a4 Select a setpoint to be the current setpoint. Parameters: Name Type Description Default n int n is 0 - 17 when on the Cycle screen. n is 0 to 2 when on the Operator screen (0=hot, 1=ambient, 2=cold). required Source code in pyinst\\models.py 4154 4155 4156 4157 4158 4159 4160 4161 4162 def set_n ( self , n : int ) -> None : \"\"\"Select a setpoint to be the current setpoint. Args: n: - n is 0 - 17 when on the Cycle screen. - n is 0 to 2 when on the Operator screen (0=hot, 1=ambient, 2=cold). \"\"\" return self . command ( 'SETN %d ' % n ) set_p ( p ) \u00a4 Set the currently selected setpoint's temperature. Source code in pyinst\\models.py 4164 4165 4166 def set_p ( self , p : int | float ) -> None : \"\"\"Set the currently selected setpoint's temperature.\"\"\" return self . command ( 'SETP %.1f ' % p ) get_p_setting () \u00a4 Read the current temperature setpoint. Source code in pyinst\\models.py 4168 4169 4170 4171 def get_p_setting ( self ) -> float : \"\"\"Read the current temperature setpoint.\"\"\" p = float ( self . query ( 'SETP?' )) return p set_ramp ( ramp ) \u00a4 Set the ramp rate for the currently selected setpoint, in \u00b0C per minute. Parameters: Name Type Description Default ramp int | float The ramp rate in \u00b0C per minute. required Source code in pyinst\\models.py 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 def set_ramp ( self , ramp : int | float ) -> None : \"\"\"Set the ramp rate for the currently selected setpoint, in \u00b0C per minute. Args: ramp: The ramp rate in \u00b0C per minute. \"\"\" if 0 <= ramp <= 99.9 : t = ' {:.1f} ' . format ( ramp ) elif 99.9 < ramp <= 9999 : t = ' {:d} ' . format ( ramp ) else : raise ValueError ( 'Parameter ramp out of range.' ) return self . command ( 'RAMP {} ' . format ( t )) get_ramp () \u00a4 Read the setting of RAMP. Returns: Type Description float The ramp rate in \u00b0C per minute. Source code in pyinst\\models.py 4188 4189 4190 4191 4192 4193 4194 4195 4196 def get_ramp ( self ) -> float : \"\"\"Read the setting of RAMP. Returns: The ramp rate in \u00b0C per minute. \"\"\" cmd = 'RAMP?' ramp = float ( self . query ( cmd )) return ramp ModelTC3625 ( resource_name , baudrate = 9600 , read_termination = '^' , write_termination = ' \\r ' , ** kwargs ) \u00a4 Bases: RawSerialInstrument , TypeTS TC-36-25 is a TEC model by TE Technology. You may have to configure some parameters via the GUI provided by the vendor before your first use, this class will only perform the temperature control. Parameters: Name Type Description Default resource_name Serial port name. required baudrate Baud rate such as 9600 or 115200 etc.. 9600 read_termination Read termination character. '^' write_termination Write termination character. '\\r' Source code in pyinst\\models.py 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 4250 def __init__ ( self , resource_name , baudrate = 9600 , read_termination = '^' , write_termination = ' \\r ' , ** kwargs ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super ( ModelTC3625 , self ) . __init__ ( resource_name , baudrate = baudrate , read_termination = read_termination , write_termination = write_termination , ** kwargs ) formatted_query ( cmd_code , value = 0 ) \u00a4 Send a formated command to the TEC and return the result value. Parameters: Name Type Description Default cmd_code int Comand code is an int between 0 and 0xFF. required value int An int value sent with the command. Defaults to 0 if it is not needed. Between -0x80000000 and 0x7FFFFFFF. 0 Returns: Type Description int The Source code in pyinst\\models.py 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 def formatted_query ( self , cmd_code : int , value : int = 0 ) -> int : \"\"\" Send a formated command to the TEC and return the result value. Args: cmd_code: Comand code is an int between 0 and 0xFF. value: An int value sent with the command. Defaults to 0 if it is not needed. Between -0x80000000 and 0x7FFFFFFF. Returns: The \"\"\" if not 0 <= value <= 0xFF : raise ValueError ( 'Parameter cmd_code out of range: {!r} ' . format ( cmd_code )) if not - 0x80000000 <= value <= 0x7FFFFFFF : raise ValueError ( 'Parameter value out of range: {!r} ' . format ( value )) STX = '*' # Start of text character that always prepend to the cmd. ADDR = 0 # The address of this device is fixed to 0 cmd_body = ' {addr:02x}{cmd_code:02x}{val:08x} ' . format ( addr = ADDR , cmd_code = cmd_code , val = signed_to_unsigned ( value , byte_count = 4 )) check_sum = calc_check_sum ( cmd_body . encode ()) cmd = ' {pre}{cmd_body}{check_sum:02x} ' . format ( pre = STX , cmd_body = cmd_body , check_sum = check_sum ) result = self . query ( cmd )[ 1 :] result_content = result [ 0 : - 2 ] result_check_sum = int ( result [ - 2 :], base = 16 ) calculated_check_sum = calc_check_sum ( result_content . encode ()) if result_check_sum != calculated_check_sum : raise ValueError ( \"Mismatched checksum of the reply.\" ) if result_content == \"X\" * 8 : raise ValueError ( \"Mismatched checksum of the command.\" ) result_value = unsigned_to_signed ( int ( result_content , base = 16 ), 4 ) return result_value BaseModelSantecBandwidthTunableFilter ( resource_name , read_termination = ' \\r\\n ' , write_termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOTF Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' Source code in pyinst\\models.py 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super () . __init__ ( resource_name , read_termination = read_termination , write_termination = write_termination , ** kwargs ) ModelOTF930 ( resource_name , read_termination = ' \\r\\n ' , write_termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeOTF Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' Source code in pyinst\\models.py 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super () . __init__ ( resource_name , read_termination = read_termination , write_termination = write_termination , ** kwargs ) ModelNSW ( resource_name , slot_or_type ) \u00a4 Bases: BaseInstrument , TypeSW The Smart Optical Switch produced by NeoPhotonics. Parameters: Name Type Description Default resource_name str The USB S/N of the device. You can use get_usb_devices() method to list all the available devices. required slot_or_type int | str For optical switch with 1x2/2x2/1x4 optical switch slots, this parameter is the slot in the frame. For 1x8 and 1x16 optical switch, this parameter defines the type of the optical switch. - 1 | 2 | 3 : The slot in the frame. - '1 8': This optical switch is 1x8 type. - '1 16': This optical switch is 1x16 type. required Source code in pyinst\\models.py 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 4669 4670 4671 4672 4673 4674 4675 4676 4677 4678 4679 4680 4681 4682 def __init__ ( self , resource_name : str , slot_or_type : int | str ) -> None : \"\"\" Args: resource_name: The USB S/N of the device. You can use get_usb_devices() method to list all the available devices. slot_or_type: For optical switch with 1x2/2x2/1x4 optical switch slots, this parameter is the slot in the frame. For 1x8 and 1x16 optical switch, this parameter defines the type of the optical switch. - `1`|`2`|`3`: The slot in the frame. - '1*8': This optical switch is 1x8 type. - '1*16': This optical switch is 1x16 type. \"\"\" super ( ModelNSW , self ) . __init__ () if isinstance ( slot_or_type , int ): self . __index = slot_or_type - 1 else : index_map = { '1' : 0 , '2' : 1 , '3' : 2 , '1*8' : 3 , '1*16' : 4 , } try : self . __index = index_map [ slot_or_type ] except KeyError : raise KeyError ( 'Invalid value for slot_or_type: %r ' % slot_or_type ) self . __usb_dev = NeoUsbDevice ( resource_name ) self . __reg_ch_sel = 16 * self . __index + 130 resource_name () property \u00a4 The USB S/N of the device. Source code in pyinst\\models.py 4684 4685 4686 4687 @property def resource_name ( self ) -> str : \"\"\"The USB S/N of the device.\"\"\" return super () . resource_name get_usb_devices () classmethod \u00a4 The USB S/N of all the available devices. Source code in pyinst\\models.py 4689 4690 4691 4692 @classmethod def get_usb_devices ( cls ) -> List [ str ]: \"\"\"The USB S/N of all the available devices.\"\"\" return [ i [ \"Serial Number\" ] . upper () for i in NeoUsbDevice . get_devices_information ()] ModelMAP_mOSX_C1 ( resource_name , slot , ** kwargs ) \u00a4 Bases: VisaInstrument , TypeMSW mOSX-C1 is a optical matrix switch by VIAVI. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required kwargs: directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 4761 4762 4763 4764 4765 4766 4767 4768 4769 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. :kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelMAP_mOSX_C1 , self ) . __init__ ( resource_name , ** kwargs ) self . __device = ' {slot:d} , {device} ' . format ( slot = slot , device = 1 ) get_switch_topology () \u00a4 Returns the configured switch topology Returns: Name Type Description M int number of input ports N int number of output ports Notes For common connection mode, M = total number of ports, N = 0. Source code in pyinst\\models.py 4771 4772 4773 4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 def get_switch_topology ( self ) -> Tuple [ int , int ]: \"\"\" Returns the configured switch topology Returns: M: number of input ports N: number of output ports Notes: For common connection mode, M = total number of ports, N = 0. \"\"\" cmd = ':MODUle:TYPE? {device} ' . format ( device = self . __device ) rpl = self . query ( cmd ) config = tuple ( int ( i ) for i in rpl . split ( ',' )) return config set_switch_topology ( n_in , n_out ) \u00a4 Sets the switch topology to emulate an MxN switch or common connection. All the channels will be cleared after topology changed. Parameters: Name Type Description Default n_in int Number of input ports (0 for common connection mode). required n_out int Number of output ports (0 for common connection mode). required Source code in pyinst\\models.py 4787 4788 4789 4790 4791 4792 4793 4794 4795 4796 4797 4798 4799 4800 4801 def set_switch_topology ( self , n_in : int , n_out : int ) -> None : \"\"\" Sets the switch topology to emulate an MxN switch or common connection. All the channels will be cleared after topology changed. Args: n_in: Number of input ports (0 for common connection mode). n_out: Number of output ports (0 for common connection mode). \"\"\" cmd = ':MODUle:TYPe {device} , {n_in} , {n_out} ' . format ( device = self . __device , n_in = n_in , n_out = n_out ) self . command ( cmd ) list_channels () \u00a4 Returns a list of all configured connections and their status. Returns: Type Description List [ Tuple [ int , int , bool ]] All configured connections and their status. [(port1, port2, state), ...]. List [ Tuple [ int , int , bool ]] For state, False = Disabled, True = Enabled. Source code in pyinst\\models.py 4803 4804 4805 4806 4807 4808 4809 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 def list_channels ( self ) -> List [ Tuple [ int , int , bool ]]: \"\"\" Returns a list of all configured connections and their status. Returns: All configured connections and their status. [(port1, port2, state), ...]. For state, False = Disabled, True = Enabled. \"\"\" cmd = ':ROUTe:LIST? {device} ' . format ( device = self . __device ) rpl = self . query ( cmd ) channels = [] for s in rpl . split ( ',' ): spl = s . split () port1 , port2 = ( int ( i ) for i in spl [ 0 ] . split ( '-' )) state = bool ( int ( spl [ 1 ])) channels . append (( port1 , port2 , state )) return channels ModelE3631A ( resource_name , port , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePS Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required port int The port number among three output ports. - 1 : +6V - 2 : +25V - 3 : -25V required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899 4900 4901 4902 4903 def __init__ ( self , resource_name : str , port : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. port: The port number among three output ports. - `1`: +6V - `2`: +25V - `3`: -25V kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , ** kwargs ) if port not in { 1 , 2 , 3 }: raise ValueError ( f \"Invalid parameter port: { port !r} \" ) self . __port = port port () property \u00a4 The selected port number among three output ports. Source code in pyinst\\models.py 4913 4914 4915 4916 @property def port ( self ): \"\"\"The selected port number among three output ports.\"\"\" return self . __port ModelE3633A ( resource_name , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePSwithOvpOcpFunctions Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 5011 5012 5013 5014 5015 5016 5017 def __init__ ( self , resource_name : str , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , ** kwargs ) set_output_range ( option ) \u00a4 Selects an output range to be programmed. Note For model E3633A, the programming ranges are: LOW: 0 V to 8.24 V, 0 A to 20.60 A HIGH: 0 V to 20.60 V, 0 A to 10.30 A Parameters: Name Type Description Default option str \"LOW\" | \"HIGH\" required Source code in pyinst\\models.py 5019 5020 5021 5022 5023 5024 5025 5026 5027 5028 5029 5030 5031 5032 def set_output_range ( self , option : str ) -> None : \"\"\"Selects an output range to be programmed. Note: For model E3633A, the programming ranges are: - LOW: 0 V to 8.24 V, 0 A to 20.60 A - HIGH: 0 V to 20.60 V, 0 A to 10.30 A Args: option: `\"LOW\"` | `\"HIGH\"` \"\"\" cmd = f \":VOLTage:RANGe { option } \" self . command ( cmd ) get_output_range () \u00a4 Queries current selected output range. Please refer to set_output_range() for more information. Returns: Type Description str \"LOW\" | \"HIGH\" Source code in pyinst\\models.py 5034 5035 5036 5037 5038 5039 5040 5041 def get_output_range ( self ) -> str : \"\"\"Queries current selected output range. Please refer to `set_output_range()` for more information. Returns: `\"LOW\"` | `\"HIGH\"` \"\"\" ModelPSY201 ( resource_name , write_termination = ' \\r\\n ' , read_termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePOLC Source code in pyinst\\models.py 5268 5269 5270 5271 def __init__ ( self , resource_name : str , write_termination : str = ' \\r\\n ' , read_termination : str = ' \\r\\n ' , ** kwargs ): super ( ModelPSY201 , self ) . __init__ ( resource_name , write_termination = write_termination , read_termination = read_termination , ** kwargs ) set_wavelength ( wavelength ) \u00a4 Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Parameters: Name Type Description Default wavelength int | float The optical wavelength in nm. required Source code in pyinst\\models.py 5300 5301 5302 5303 5304 5305 5306 5307 5308 5309 5310 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Args: wavelength: The optical wavelength in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \":CONFigure:WLENgth { wavelength : d } \" self . command ( cmd ) get_sop () \u00a4 Query measured SOP (Stokes parameters) S1, S2, S3. Returns: Type Description Tuple [ float , float , float ] The stokes parameters S1, S2, S3. Source code in pyinst\\models.py 5366 5367 5368 5369 5370 5371 5372 5373 5374 def get_sop ( self ) -> Tuple [ float , float , float ]: \"\"\"Query measured SOP (Stokes parameters) S1, S2, S3. Returns: The stokes parameters S1, S2, S3. \"\"\" cmd = \":MEASure:SOP? \" s1 , s2 , s3 = ( float ( i ) for i in self . query ( cmd ) . split ( ',' )) return s1 , s2 , s3 get_dop () \u00a4 Query measured degree of polarization. Returns: Type Description float The degree of polarization. Source code in pyinst\\models.py 5376 5377 5378 5379 5380 5381 5382 5383 5384 def get_dop ( self ) -> float : \"\"\"Query measured degree of polarization. Returns: The degree of polarization. \"\"\" cmd = ':MEASure:DOP?' dop = float ( self . query ( cmd )) return dop set_sop ( s1 , s2 , s3 ) \u00a4 Set SOP by Stokes parameters and enable tracking. Parameters: Name Type Description Default s1 int | float 1st dimention of the Stokes parameters. required s2 int | float 2nd dimention of the Stokes parameters. required s3 int | float 3rd dimention of the Stokes parameters. required Tips Stokes parameters are auto-normalized to unit vector before tracking: SOP will be set to (s1/A, s2/A, s3/A) where A = sqrt(s1*s1, s2*s2, s3*s3) Note s1=s2=s3=0 is not allowed. Source code in pyinst\\models.py 5386 5387 5388 5389 5390 5391 5392 5393 5394 5395 5396 5397 5398 5399 5400 5401 5402 5403 5404 5405 5406 5407 5408 def set_sop ( self , s1 : int | float , s2 : int | float , s3 : int | float ) -> None : \"\"\"Set SOP by Stokes parameters and enable tracking. Args: s1: 1st dimention of the Stokes parameters. s2: 2nd dimention of the Stokes parameters. s3: 3rd dimention of the Stokes parameters. Tips: Stokes parameters are auto-normalized to unit vector before tracking: SOP will be set to `(s1/A, s2/A, s3/A)` where `A = sqrt(s1*s1, s2*s2, s3*s3)` Note: `s1=s2=s3=0` is not allowed. \"\"\" if s1 == s2 == s3 == 0 : raise ValueError ( \"s1=s2=s3=0 is not allowed.\" ) cmd = f \":CONTrol:SOP { s1 : .2f } , { s2 : .2f } , { s3 : .2f } \" self . command ( cmd ) set_sop_in_spherical ( theta , phi ) \u00a4 Set SOP in spherical coordinates and enable tracking. Parameters: Name Type Description Default theta int | float 1st dimension in degree of the spherical coordinates. 0 to 360 (degrees). required phi int | float 2nd dimention in degree of the spherical cordinates. 0 to 180 (degrees). required Source code in pyinst\\models.py 5410 5411 5412 5413 5414 5415 5416 5417 5418 5419 5420 5421 5422 def set_sop_in_spherical ( self , theta : int | float , phi : int | float ) -> None : \"\"\" Set SOP in spherical coordinates and enable tracking. Args: theta: 1st dimension in degree of the spherical coordinates. 0 to 360 (degrees). phi: 2nd dimention in degree of the spherical cordinates. 0 to 180 (degrees). \"\"\" if not 0 <= theta <= 360 : raise ValueError ( f \"Parameter theta is out of range: { theta !r} \" ) if not 0 <= phi <= 180 : raise ValueError ( f \"Parameter phi is out of range: { phi !r} \" ) cmd = f \":CONTrol:ANGLe { theta : .2f } , { phi : .2f } \" self . command ( cmd ) start_scrambling ( mode , rate , ** params ) \u00a4 Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. DISCrete : Discrete scrambling. TRIangle : Triangle scrambling. TORNado : Tornado scrambling. Additional scrambling parameter _type is required. required rate int | float Scrambling rate. Different mode may have different units. required params Additional scrambling params if any. _type (int) : For TORNado mode only. 0 = Fixed axis, 1 = Rotating axis. required Note Different mode has different unit for scrambling rate: Discrete: points/s Triangle: 2\u03c0 rad/s Tornado: rev/s Source code in pyinst\\models.py 5424 5425 5426 5427 5428 5429 5430 5431 5432 5433 5434 5435 5436 5437 5438 5439 5440 5441 5442 5443 5444 5445 5446 5447 5448 5449 5450 5451 5452 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `DISCrete`: Discrete scrambling. - `TRIangle`: Triangle scrambling. - `TORNado`: Tornado scrambling. Additional scrambling parameter `_type` is required. rate: Scrambling rate. Different mode may have different units. params: Additional scrambling params if any. * `_type (int)`: For `TORNado` mode only. `0` = Fixed axis, `1` = Rotating axis. Note: Different mode has different unit for scrambling rate: - Discrete: points/s - Triangle: 2\u03c0 rad/s - Tornado: rev/s \"\"\" if mode . upper () . startswith ( 'DISC' ): self . _discrete_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TRI' ): self . _triangle_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TORN' ): self . _tornado_scramble ( True , _type = params [ '_type' ], rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" ) ModelPSY101 ( resource_name , read_termination = '#' , write_termination = '' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePOLC Source code in pyinst\\models.py 5469 5470 def __init__ ( self , resource_name : str , read_termination : str = '#' , write_termination : str = '' , ** kwargs ): super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs ) start_scrambling ( mode , rate , ** params ) \u00a4 Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. RANdom : Random scrambling. SAW : Saw wave scrambling. required rate int | float Scrambling rate in Hz. required params Not used for PSY-101. required Source code in pyinst\\models.py 5550 5551 5552 5553 5554 5555 5556 5557 5558 5559 5560 5561 5562 5563 5564 5565 5566 5567 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `RANdom`: Random scrambling. - `SAW`: Saw wave scrambling. rate: Scrambling rate in Hz. params: Not used for PSY-101. \"\"\" if mode . upper () . startswith ( 'RAN' ): self . _random_scramble ( True , rate = rate ) if mode . upper () . startswith ( 'SAW' ): self . _saw_scramble ( True , rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" ) ModelMPC202 ( resource_name , read_termination = ' \\r\\n ' , write_termination = ' \\r\\n ' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePOLC Source code in pyinst\\models.py 5588 5589 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs ): super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs ) start_scrambling ( mode , rate , ** params ) \u00a4 Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. DISCrete : Discrete scrambling. TRIangle : Triangle scrambling. RAYLeigh : Rayleigh scrambling. TORNado : Tornado scrambling. Additional scrambling parameter _type is required. required rate int | float Scrambling rate. Different mode may have different units. required params Additional scrambling params if any. _type (int) : For TORNado mode only. 0 = Fixed axis, 1 = Rotating axis. required Note Different mode has different unit for scrambling rate: Discrete: points/s Triangle: 2\u03c0 rad/s Rayleigh: rad/s Tornado: rev/s Source code in pyinst\\models.py 5694 5695 5696 5697 5698 5699 5700 5701 5702 5703 5704 5705 5706 5707 5708 5709 5710 5711 5712 5713 5714 5715 5716 5717 5718 5719 5720 5721 5722 5723 5724 5725 5726 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `DISCrete`: Discrete scrambling. - `TRIangle`: Triangle scrambling. - `RAYLeigh`: Rayleigh scrambling. - `TORNado`: Tornado scrambling. Additional scrambling parameter `_type` is required. rate: Scrambling rate. Different mode may have different units. params: Additional scrambling params if any. * `_type (int)`: For `TORNado` mode only. `0` = Fixed axis, `1` = Rotating axis. Note: Different mode has different unit for scrambling rate: - Discrete: points/s - Triangle: 2\u03c0 rad/s - Rayleigh: rad/s - Tornado: rev/s \"\"\" if mode . upper () . startswith ( 'DISC' ): self . _discrete_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TRI' ): self . _triangle_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'RAYL' ): self . _rayleigh_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TORN' ): self . _tornado_scramble ( True , _type = params [ '_type' ], rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" ) ModelEPS1000 ( resource_name , timeout = 3 , ** kwargs ) \u00a4 Bases: BaseInstrument , TypePOLC Source code in pyinst\\models.py 5744 5745 5746 5747 5748 5749 5750 5751 5752 5753 5754 5755 5756 5757 5758 5759 5760 5761 5762 5763 5764 5765 5766 5767 def __init__ ( self , resource_name : str , timeout = 3 , ** kwargs ): super () . __init__ ( resource_name , ** kwargs ) baudrate = 230400 device_list = ftd . listDevices () for i in range ( len ( device_list )): desc = ftd . getDeviceInfoDetail ( i )[ \"description\" ] . decode () if desc . startswith ( 'EPS1000' ): sn = desc . split ()[ - 1 ] else : continue if resource_name . endswith ( sn ): self . __device_num = i break else : raise ValueError ( 'Device not found: {model} | S/N: {sn} ' . format ( model = self . model , sn = resource_name )) self . __device = ftd . open ( self . __device_num ) self . __device . setBaudRate ( baudrate ) self . __device . setDataCharacteristics ( 8 , 0 , 0 ) self . __device . setTimeouts ( round ( timeout * 1000 ), round ( timeout * 1000 )) self . __connected = True set_qwp ( qwp_n , direction , speed ) \u00a4 qwp_n = 0, 1, 2, 3, 4, 5 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (rad/s) Source code in pyinst\\models.py 5830 5831 5832 5833 5834 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 5847 5848 5849 5850 5851 5852 5853 def set_qwp ( self , qwp_n , direction , speed ): \"\"\" qwp_n = 0, 1, 2, 3, 4, 5 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (rad/s) \"\"\" control_reg_addr = qwp_n + 1 speed_reg_addr0 = qwp_n * 2 + 11 speed_reg_addr1 = qwp_n * 2 + 12 if direction == 0 : self . __write_register ( control_reg_addr , 0 ) elif direction == 1 : self . __write_register ( control_reg_addr , 1 ) elif direction == - 1 : self . __write_register ( control_reg_addr , 3 ) else : raise ValueError ( 'Invalid value for direction: {} . Options: 0(Disabled), 1(Forward), -1(Backward)' . format ( direction )) speed_msb = int (( speed * 100 ) / ( 2 ** 16 )) & 0xffff speed_lsb = int (( speed * 100 )) & 0xffff self . __write_register ( speed_reg_addr0 , speed_lsb ) self . __write_register ( speed_reg_addr1 , speed_msb ) set_hwp ( direction , speed ) \u00a4 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (krad/s) Source code in pyinst\\models.py 5855 5856 5857 5858 5859 5860 5861 5862 5863 5864 5865 5866 5867 5868 5869 5870 5871 5872 5873 5874 5875 5876 5877 5878 5879 def set_hwp ( self , direction , speed ): \"\"\" direction = 0(Disabled), 1(Forward), -1(Backward) speed = (krad/s) \"\"\" control_reg_addr = 0 speed_reg_addr0 = 9 speed_reg_addr1 = 10 if direction == 0 : self . __write_register ( control_reg_addr , 0 ) elif direction == 1 : self . __write_register ( control_reg_addr , 1 ) elif direction == - 1 : self . __write_register ( control_reg_addr , 3 ) else : raise ValueError ( 'Invalid value for direction: {} . Options: 0(Disabled), 1(Forward), -1(Backward)' . format ( direction )) speed_msb = int (( speed * 100 ) / ( 2 ** 16 )) & 0xffff speed_lsb = int (( speed * 100 )) & 0xffff self . __write_register ( speed_reg_addr0 , speed_lsb ) self . __write_register ( speed_reg_addr1 , speed_msb ) start_scrambling ( mode , rate , ** params ) \u00a4 speed unit: rad/s when mode is 'Peaked', the max rate is 2000000rad/s when mode is 'Rayleigh', the max rate is 1000000rad/s when mode is 'Marvell', the unit is rad/s Source code in pyinst\\models.py 5897 5898 5899 5900 5901 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 5913 5914 5915 5916 5917 5918 5919 5920 5921 5922 5923 5924 5925 5926 5927 5928 5929 5930 5931 5932 5933 5934 5935 5936 5937 5938 5939 5940 5941 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : ''' speed unit: rad/s when mode is 'Peaked', the max rate is 2000000rad/s when mode is 'Rayleigh', the max rate is 1000000rad/s when mode is 'Marvell', the unit is rad/s ''' speed = rate if mode == 'Peaked' : if 0 <= speed <= 20000000 : speed_10 = round ( speed / 10 ) lsb = speed_10 & 0xFFFF msb = ( 2 << 14 ) | ( speed_10 >> 16 ) self . write_register ( addr = 23 , data = lsb ) self . write_register ( addr = 24 , data = msb ) else : raise ValueError ( \"Speed is out of range, the max speed of 'Peaked' mode is 2000000rad/s\" ) elif mode == 'Rayleigh' : if 0 <= speed <= 10000000 : speed_10 = round ( speed / 10 ) lsb = speed_10 & 0xFFFF msb = ( 3 << 14 ) | ( speed_10 >> 16 ) self . write_register ( addr = 23 , data = lsb ) self . write_register ( addr = 24 , data = msb ) else : raise ValueError ( \"Speed is out of range, the max speed of 'Rayleigh' mode is 1000000rad/s\" ) elif mode == 'Marvell' : self . stop_scrambling () self . write_register ( addr = 23 , data = 0 ) self . write_register ( addr = 24 , data = 0 ) time . sleep ( 0.1 ) qwp_speed = speed / 6 offset = 0.02 self . set_qwp ( qwp_n = 0 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_qwp ( qwp_n = 1 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) self . set_qwp ( qwp_n = 2 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_hwp ( direction =- 1 , speed = 0.01 ) # -1 is backward. 0.01 could be just rad/s self . set_qwp ( qwp_n = 3 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) self . set_qwp ( qwp_n = 4 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_qwp ( qwp_n = 5 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) if qwp_speed < 10 : self . set_hwp ( direction = 0 , speed = 0 ) ModelPMD1000 ( resource_name , read_termination = '' , write_termination = '#' , ** kwargs ) \u00a4 Bases: VisaInstrument , TypePMDE Source code in pyinst\\models.py 5957 5958 def __init__ ( self , resource_name : str , read_termination : str = '' , write_termination : str = '#' , ** kwargs ): super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs ) set_frequency ( frequency ) \u00a4 Set optical frequency value. Note The PMD-1000 can only set to several discrete values on the ITU C-band: frequency = 191.6 + n*0.05, 0 <= n <= 86 If the frequency is not on the ITU grid, it will be set to the nearest valid value, and no exception will be raised. Parameters: Name Type Description Default frequency int | float optical frequency in THz. required Source code in pyinst\\models.py 5987 5988 5989 5990 5991 5992 5993 5994 5995 5996 5997 5998 5999 6000 6001 6002 6003 6004 6005 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency value. Note: The PMD-1000 can only set to several discrete values on the ITU C-band: frequency = 191.6 + n*0.05, 0 <= n <= 86 If the frequency is not on the ITU grid, it will be set to the nearest valid value, and no exception will be raised. Args: frequency: optical frequency in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f 'frequency is out of range: { frequency !r} ' ) ch = round (( frequency - 191.6 ) / 0.05 ) + 1 self . command ( '*CHC %03d #' % ch ) set_pmd_value ( pmd , sopmd ) \u00a4 Note The pmd and sopmd setting of the PMD-1000 is not continuous. The pmd and sopmd will be set to the nearest supported values, so the real value will not be exactly the same with the setting values. Source code in pyinst\\models.py 6019 6020 6021 6022 6023 6024 6025 6026 6027 6028 6029 6030 def set_pmd_value ( self , pmd : int | float , sopmd : int | float ) -> None : \"\"\" Note: The pmd and sopmd setting of the PMD-1000 is not continuous. The pmd and sopmd will be set to the nearest supported values, so the real value will not be exactly the same with the setting values. \"\"\" if not 0 <= pmd <= 182.4 : raise ValueError ( f 'pmd is out of range: { pmd } ' ) if not 0 <= sopmd <= 8319.9 : raise ValueError ( f 'sopmd is out of range: { sopmd } ' ) self . command ( '*PMD:CON %.2f , %.2f #' % ( pmd , sopmd ))","title":"Instrument Models"},{"location":"api/models/#instrument-models","text":"Instrument Model classes are types to drive specific instrument models. An Instrument Model class always starts with a prefix Model , for example: ModelAQ6370 , ModelOTF980 . All Instrument Model classes can be directly imported from pyinst name space. The Instrument Model is immediately opened on object creation. The first parameter of the __init__ method is always resource_name : For VISA compatible instruments, it is the VISA resource name or alias. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument/USB chip. For more details, please refer to the specific Instrument Model class. Examples: >>> from pyinst import ModelN7744A >>> opm = ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) >>> opm . get_power_value () -10.85 >>> opm . close () # release the instrument resource Note An Instrument Model object is a function component in logic, does not correspond with the physical topography of the real-world instrument. For example, for OPM N7744A, it has 4 slots of OPM function components. Each slot can be considered as an independent ModelN7744A object. Instrument Model classes also support context management, so you can use the \"with\" statement to ensure that the instrument resource is closed after usage. Examples: >>> with ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) as opm : >>> opm . get_power_value () >>> -10.85","title":"Instrument Models"},{"location":"api/models/#pyinst.models.BaseModelN77xx","text":"Bases: VisaInstrument Base class for Keysight N77xx Series: N7744A, N7745A, N7747A and N7748A Optical Multiport Power Meters N7751A and N7752A Variable Optical Attenuators and 2-Channel Optical Power Meter N7761A, N7762A and N7764A Variable Optical Attenuators Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 81 82 83 84 85 86 87 88 89 90 91 def __init__ ( self , resource_name : str , slot : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" if not 1 <= slot <= self . _max_slot : raise ValueError ( f 'Parameter slot is out of range: { slot !r} . The max slot number is { self . _max_slot } .' ) self . __slot = slot super () . __init__ ( resource_name , ** kwargs )","title":"BaseModelN77xx"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM","text":"Bases: BaseModelN77xx , TypeOPM","title":"BaseModelN77xx_OPM"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 108 109 110 111 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 113 114 115 116 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 118 119 120 121 122 123 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :POW:WAV? MIN\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 125 126 127 128 129 130 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :POW:WAV? MAX\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 132 133 134 135 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.001 # 1us","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 137 138 139 140 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 142 143 144 145 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200.0 # dB","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 147 148 149 150 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0 # dB","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 152 153 154 155 156 157 158 159 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 161 162 163 164 165 166 167 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 169 170 171 172 173 174 175 176 177 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENS {slot:d} :POW:WAV?\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 179 180 181 182 183 184 185 186 187 188 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENS {slot:d} :POW:WAV {value:f} NM\" . format ( slot = self . _slot , value = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot:d} :POW?\" . format ( slot = self . _slot ) power_value = float ( self . query ( cmd )) return power_value","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 206 207 208 209 210 211 212 213 214 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENS {slot:d} :POW:UNIT?\" . format ( slot = self . _slot ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 216 217 218 219 220 221 222 223 224 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENS {slot:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENS {slot:d} :CORR?\" . format ( slot = self . _slot ) cal = - float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 243 244 245 246 247 248 249 250 251 252 253 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( \"param value out of range: {value} \" . format ( value = value )) cmd = \":SENS {slot} :CORR {value} DB\" . format ( slot = self . _slot , value =- value ) self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 255 256 257 258 259 260 261 262 263 264 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENS {slot:d} :POW:ATIM?\" . format ( slot = self . _slot ) avg_t = float ( self . query ( cmd )) * 10 ** 3 return avg_t","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_OPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 266 267 268 269 270 271 272 273 274 275 276 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( \"param value out of range: {value} \" . format ( value = value )) cmd = \":SENS {slot} :POW:ATIM {value} MS\" . format ( slot = self . _slot , value = value ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM","text":"Bases: BaseModelN77xx , TypeVOA , TypeOPM","title":"BaseModelN77xx_VOA_with_OPM"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 281 282 283 284 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 286 287 288 289 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 291 292 293 294 295 296 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :WAVelength? MIN\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 298 299 300 301 302 303 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :WAVelength? MAX\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 305 306 307 308 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 2.0","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 310 311 312 313 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 315 316 317 318 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200.0","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 320 321 322 323 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 325 326 327 328 329 330 331 332 333 334 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :ATT? MIN\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att","title":"min_att()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 336 337 338 339 340 341 342 343 344 345 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :ATT? MAX\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att","title":"max_att()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\models.py 347 348 349 350 351 352 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INP {slot} :OFFS? MIN\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset","title":"min_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\models.py 354 355 356 357 358 359 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INP {slot} :OFFS? MAX\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset","title":"max_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 361 362 363 364 365 366 367 368 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 370 371 372 373 374 375 376 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 378 379 380 381 382 383 384 385 386 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INPut {slot:d} :WAVelength?\" . format ( slot = self . _slot ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 388 389 390 391 392 393 394 395 396 397 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength } \" ) cmd = \":INPut {slot:d} :WAVelength {wl} NM\" . format ( slot = self . _slot , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot:d} :POW?\" . format ( slot = self . _slot ) power_value = float ( self . query ( cmd )) return power_value","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 415 416 417 418 419 420 421 422 423 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":OUTPut {slot:d} :POWer:UNit?\" . format ( slot = self . _slot ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 425 426 427 428 429 430 431 432 433 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":OUTPut {slot:d} :POWer:UNit {unit:d} \" . format ( slot = self . _slot , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" cmd = \":OUTPut {slot:d} :POWer:OFFSet?\" . format ( slot = self . _slot ) cal = - float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 452 453 454 455 456 457 458 459 460 461 462 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTPut {slot:d} :POWer:OFFSet {value} DB\" . format ( slot = self . _slot , value =- value ) # opposite sign self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 464 465 466 467 468 469 470 471 472 473 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":OUTPut {slot:d} :ATIMe?\" . format ( slot = self . _slot ) atime = float ( self . query ( cmd )) * 10 ** 3 return atime","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 475 476 477 478 479 480 481 482 483 484 485 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTPut {slot:d} :ATIMe {value} MS\" . format ( slot = self . _slot , value = value ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 487 488 489 490 491 492 493 494 495 496 497 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTP {slot:d} {status:d} \" . format ( slot = self . _slot , status = en ) self . command ( cmd )","title":"enable()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.disable","text":"Disable the optical output. Source code in pyinst\\models.py 499 500 501 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 503 504 505 506 507 508 509 510 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTP {slot:d} ?\" . format ( slot = self . _slot ) status = bool ( int ( self . query ( cmd ))) return status","title":"is_enabled()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INP {slot:d} :ATT?\" . format ( slot = self . _slot ) att = float ( self . query ( cmd )) return att","title":"get_att()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 530 531 532 533 534 535 536 537 538 539 540 541 542 543 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INP {slot:d} :ATT {value:.3f} DB\" . format ( slot = self . _slot , value = att ) self . command ( cmd )","title":"set_att()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 545 546 547 548 549 550 551 552 553 554 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INP {slot:d} :OFFS?\" . format ( slot = self . _slot ) offset = float ( self . query ( cmd )) return offset","title":"get_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelN77xx_VOA_with_OPM.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 556 557 558 559 560 561 562 563 564 565 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) self . command ( \":INP {slot:d} :OFFS {value:.3f} DB\" . format ( slot = self . _slot , value = offset ))","title":"set_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7744A","text":"Bases: BaseModelN77xx_OPM Keysight N7744A multi-channel optical power meter.","title":"ModelN7744A"},{"location":"api/models/#pyinst.models.ModelN7752A","text":"Bases: BaseModelN77xx_VOA_with_OPM , BaseModelN77xx_OPM Keysight N7752A 2-channel optical attenuator and 2-channel power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Directly passed to VisaInstrument.__init__ . {} Source code in pyinst\\models.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 def __init__ ( self , resource_name : str , slot : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelN7752A , self ) . __init__ ( resource_name , slot , ** kwargs ) __topology = { 1 : 'voa_with_opm' , 2 : 'voa_with_opm' , 3 : 'voa_with_opm' , 4 : 'voa_with_opm' , 5 : 'opm' , 6 : 'opm' , } self . __slot_type = __slot_type = __topology [ slot ] self . __Base = BaseModelN77xx_OPM if __slot_type == 'opm' else BaseModelN77xx_VOA_with_OPM","title":"ModelN7752A"},{"location":"api/models/#pyinst.models.ModelN7752A.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 648 649 650 651 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 653 654 655 656 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 658 659 660 661 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" return self . __Base . min_wavelength . __get__ ( self )","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 663 664 665 666 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" return self . __Base . max_wavelength . __get__ ( self )","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 668 669 670 671 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 2.0 # 2ms","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 673 674 675 676 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 678 679 680 681 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return self . __Base . min_pow_cal . __get__ ( self )","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 683 684 685 686 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return self . __Base . max_pow_cal . __get__ ( self )","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 688 689 690 691 692 693 694 695 696 697 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . min_att","title":"min_att()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 699 700 701 702 703 704 705 706 707 708 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . max_att","title":"max_att()"},{"location":"api/models/#pyinst.models.ModelN7752A.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\models.py 710 711 712 713 714 715 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . min_att_offset","title":"min_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7752A.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\models.py 717 718 719 720 721 722 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . max_att_offset","title":"max_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 724 725 726 727 728 729 730 731 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 733 734 735 736 737 738 739 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 741 742 743 744 745 746 747 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" return self . __Base . get_wavelength ( self )","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 749 750 751 752 753 754 755 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" return self . __Base . set_wavelength ( self , wavelength )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 757 758 759 760 761 762 763 764 765 766 767 768 769 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" return self . __Base . get_power_value ( self )","title":"get_power_value()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 771 772 773 774 775 776 777 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" return self . __Base . get_power_unit ( self )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 779 780 781 782 783 784 785 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" return self . __Base . set_power_unit ( self , unit )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_pow_cal","text":"Get the power calibration offset in dB. Note The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to get_power_value for the math equation. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 787 788 789 790 791 792 793 794 795 796 797 798 799 800 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Note: The power calibration value defined here is opposite in sign with the instrument display value. This is to unify the definition of power calibration across different models of OPMs. Please refer to `get_power_value` for the math equation. Returns: The power calibration offset in dB. \"\"\" return self . __Base . get_pow_cal ( self )","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 802 803 804 805 806 807 808 809 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" return self . __Base . set_pow_cal ( self , value )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 811 812 813 814 815 816 817 818 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" return self . __Base . get_avg_time ( self )","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 820 821 822 823 824 825 826 827 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" return self . __Base . set_avg_time ( self , value )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.ModelN7752A.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 829 830 831 832 833 834 835 836 837 838 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . enable ( en )","title":"enable()"},{"location":"api/models/#pyinst.models.ModelN7752A.disable","text":"Disable the optical output. Source code in pyinst\\models.py 840 841 842 843 844 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.ModelN7752A.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 846 847 848 849 850 851 852 853 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . is_enabled ()","title":"is_enabled()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . get_att ()","title":"get_att()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 873 874 875 876 877 878 879 880 881 882 883 884 885 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . set_att ( att )","title":"set_att()"},{"location":"api/models/#pyinst.models.ModelN7752A.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 887 888 889 890 891 892 893 894 895 896 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . get_att_offset ()","title":"get_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7752A.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 898 899 900 901 902 903 904 905 906 907 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if self . __slot_type == 'opm' : self . __raise_NotImplementedError () return super () . set_att_offset ( offset )","title":"set_att_offset()"},{"location":"api/models/#pyinst.models.ModelN7764A","text":"Bases: BaseModelN77xx_VOA_with_OPM Keysight N7764A 4-channel variable optical attenuator with built-in power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 931 932 933 934 935 936 937 938 def __init__ ( self , resource_name : str , slot : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super ( ModelN7764A , self ) . __init__ ( resource_name , slot )","title":"ModelN7764A"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA","text":"Bases: VisaInstrument , TypeVOA The base class of AQ2200 Series, application type ATTN, without built-in OPM. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 949 950 951 952 953 954 955 956 957 958 959 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , read_termination = '' , ** kwargs ) self . _slot = slot self . _channel = channel","title":"BaseModelAQ2200_VOA"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 961 962 963 964 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 966 967 968 969 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 971 972 973 974 975 976 977 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( wl_str ) * 10 ** 9 return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 979 980 981 982 983 984 985 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( wl_str ) * 10 ** 9 return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 987 988 989 990 991 992 993 994 995 996 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT? MIN\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"min_att()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 998 999 1000 1001 1002 1003 1004 1005 1006 1007 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT? MAX\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"max_att()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\models.py 1009 1010 1011 1012 1013 1014 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS? MIN\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"min_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\models.py 1016 1017 1018 1019 1020 1021 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS? MAX\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"max_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1023 1024 1025 1026 1027 1028 1029 1030 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1032 1033 1034 1035 1036 1037 1038 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :WAV?\" . format ( slot = self . _slot , channel = self . _channel ) wl_str = self . query ( cmd ) wl = float ( wl_str ) * 10 ** 9 return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f 'Parameter wavelength is out of range: { wavelength !r} ' ) cmd = \":INP {slot:d} :CHAN {channel:d} :WAV {wl:f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} {en:d} \" . format ( slot = self . _slot , channel = self . _channel , en = en ) self . command ( cmd )","title":"enable()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.disable","text":"Disable the optical output. Source code in pyinst\\models.py 1074 1075 1076 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 1078 1079 1080 1081 1082 1083 1084 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} ?\" . format ( slot = self . _slot , channel = self . _channel ) return bool ( int ( self . query ( cmd )))","title":"is_enabled()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :ATT?\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"get_att()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INP {slot:d} :CHAN {channel:d} :ATT {att:.3f} dB\" . format ( slot = self . _slot , channel = self . _channel , att = att ) self . command ( cmd )","title":"set_att()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS?\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"get_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) cmd = \":INP {slot:d} :CHAN {channel:d} :OFFS {offset:.3f} dB\" . format ( slot = self . _slot , channel = self . _channel , offset = offset ) self . command ( cmd )","title":"set_att_offset()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM","text":"Bases: BaseModelAQ2200_VOA , TypeOPM The base class of AQ2200 Series, application type ATTN, with built-in OPM.","title":"BaseModelAQ2200_VOA_with_OPM"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 1148 1149 1150 1151 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 10.0 # 10ms","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 1153 1154 1155 1156 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 1158 1159 1160 1161 1162 1163 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS? MIN\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 1165 1166 1167 1168 1169 1170 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS? MAX\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot} :CHAN {channel} :POW?\" . format ( slot = self . _slot , channel = self . _channel ) power = float ( self . query ( cmd )) return power","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) unit = OpticalPowerUnit ( unit_int ) return unit","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 1199 1200 1201 1202 1203 1204 1205 1206 1207 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :POW:OFFS {value:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":OUTP {slot:d} :CHAN {channel:d} :ATIM?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( self . query ( cmd )) * 1000 return avg_t","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_VOA_with_OPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":OUTP {slot:d} :CHAN {channel:d} :ATIM {value:d} MS\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM","text":"Bases: VisaInstrument , TypeOPM Base Model of AQ2200 Series, application type Sensor. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super ( BaseModelAQ2200_OPM , self ) . __init__ ( resource_name , read_termination = '' , ** kwargs ) self . _slot = slot self . _channel = channel","title":"BaseModelAQ2200_OPM"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1271 1272 1273 1274 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1276 1277 1278 1279 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1281 1282 1283 1284 1285 1286 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :CHAN {slot:d} :POW:WAV? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1288 1289 1290 1291 1292 1293 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENS {slot:d} :CHAN {slot:d} :POW:WAV? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 1295 1296 1297 1298 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.1 # 100us","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 1300 1301 1302 1303 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000.0 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.avg_time_table","text":"AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. Source code in pyinst\\models.py 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 @property def avg_time_table ( self ) -> tuple : \"\"\" AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. \"\"\" return ( 0.1 , 0.2 , 0.5 , 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 , 500 , 1000 , 2000 , 5000 , 10000 , )","title":"avg_time_table()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 1323 1324 1325 1326 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 180.0","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 1328 1329 1330 1331 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200.0","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1333 1334 1335 1336 1337 1338 1339 1340 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1342 1343 1344 1345 1346 1347 1348 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1350 1351 1352 1353 1354 1355 1356 1357 1358 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:WAV?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:WAV {wl} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETC {slot} :CHAN {channel} :POW?\" . format ( slot = self . _slot , channel = self . _channel ) power = float ( self . query ( cmd )) return power","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 1387 1388 1389 1390 1391 1392 1393 1394 1395 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 1397 1398 1399 1400 1401 1402 1403 1404 1405 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :CORR?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENS {slot:d} :CHAN {channel:d} :CORR {value:.4f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:ATIM?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( self . query ( cmd )) * 1000 return avg_t","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModelAQ2200_OPM.set_avg_time","text":"Set the averaging time in ms. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) value = round ( value , 1 ) if value in self . avg_time_table : valid_value = value else : l = list ( self . avg_time_table ) l . sort ( key = lambda x : abs ( x - value )) valid_value = l [ 0 ] warnings . warn ( \"Averaging time value {value} not valid. \" \"Fall back to the closest valid value {valid_value} .\" . format ( value = value , valid_value = valid_value ), InstrWarning ) if valid_value < 1 : v = round ( valid_value * 1000 ) u = \"US\" else : v = valid_value u = \"MS\" cmd = \":SENS {slot:d} :CHAN {channel:d} :POW:ATIM {value:d}{unit} \" . format ( slot = self . _slot , channel = self . _channel , value = v , unit = u ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.ModelAQ2200_215","text":"Bases: BaseModelAQ2200_OPM Yokogawa AQ2200-215 optical power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1497 1498 1499 1500 1501 1502 1503 1504 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"ModelAQ2200_215"},{"location":"api/models/#pyinst.models.ModelAQ2200_221","text":"Bases: BaseModelAQ2200_OPM Yokogawa AQ2200-221 2-channel optical power meter.","title":"ModelAQ2200_221"},{"location":"api/models/#pyinst.models.ModelAQ2200_221.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 1534 1535 1536 1537 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.2","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.ModelAQ2200_221.avg_time_table","text":"AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. Source code in pyinst\\models.py 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 @property def avg_time_table ( self ) -> tuple : \"\"\" AQ-2200 Series OPM only support discrete averaging values. This table contains all the valid averaging time value. If the averaging time value set with self.set_avg_time() is not valid, a warning will be displayed and the value will fall back to the closest value in this table. No exception will be raised. \"\"\" return ( 0.2 , 0.5 , 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 , 500 , 1000 , 2000 , 5000 , 10000 , )","title":"avg_time_table()"},{"location":"api/models/#pyinst.models.ModelAQ2200_311","text":"Bases: BaseModelAQ2200_VOA Yokogawa AQ2200-311 variable optical attenuator. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1581 1582 1583 1584 1585 1586 1587 1588 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"ModelAQ2200_311"},{"location":"api/models/#pyinst.models.ModelAQ2200_311A","text":"Bases: BaseModelAQ2200_VOA Yokogawa AQ2200-311A variable optical attenuator. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1614 1615 1616 1617 1618 1619 1620 1621 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"ModelAQ2200_311A"},{"location":"api/models/#pyinst.models.ModelAQ2200_331","text":"Bases: BaseModelAQ2200_VOA_with_OPM Yokogawa AQ2200-331 variable optical attenuator with built-in power meter. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1647 1648 1649 1650 1651 1652 1653 1654 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"ModelAQ2200_331"},{"location":"api/models/#pyinst.models.ModelAQ2200_342","text":"Bases: BaseModelAQ2200_VOA_with_OPM Yokogawa AQ2200-342 variable optical attenuator with built-in power meter.","title":"ModelAQ2200_342"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA","text":"Bases: VisaInstrument , TypeVOA Base class of Keysight 815x variable optical attenuators. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , ** kwargs ) self . _slot = slot self . _channel = channel","title":"BaseModel815x_VOA"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1701 1702 1703 1704 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1706 1707 1708 1709 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1711 1712 1713 1714 1715 1716 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1718 1719 1720 1721 1722 1723 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.min_att","text":"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. Source code in pyinst\\models.py 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 @property def min_att ( self ) -> float : \"\"\"Minimum settable attenuation in dB. The minimum settable attenuation = 0 dB + the optical attenuation offset value. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation? MIN\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"min_att()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.max_att","text":"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. Source code in pyinst\\models.py 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 @property def max_att ( self ) -> float : \"\"\"Maximum settable attenuation in dB. The maximum settable attenuation = The maximum attenuation + the optical attenuation offset value. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation? MAX\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"max_att()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.min_att_offset","text":"Minimum attenuation offset value in dB. Source code in pyinst\\models.py 1747 1748 1749 1750 1751 1752 @property def min_att_offset ( self ) -> float : \"\"\"Minimum attenuation offset value in dB.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet? MIN\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"min_att_offset()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.max_att_offset","text":"Maximum attenuation offset value in dB. Source code in pyinst\\models.py 1754 1755 1756 1757 1758 1759 @property def max_att_offset ( self ) -> float : \"\"\"Maximum attenuation offset value in dB.\"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet? MAX\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"max_att_offset()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1761 1762 1763 1764 1765 1766 1767 1768 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1770 1771 1772 1773 1774 1775 1776 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 1778 1779 1780 1781 1782 1783 1784 1785 1786 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :WAVelength {wl:.4f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.enable","text":"Enable (disable) the optical output. Parameters: Name Type Description Default en bool True = Enable, False = Disable. True Source code in pyinst\\models.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 def enable ( self , en : bool = True ) -> None : \"\"\" Enable (disable) the optical output. Args: en: True = Enable, False = Disable. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":OUTPut {slot:d} :CHANnel {channel:d} :STATe {state:d} \" . format ( slot = self . _slot , channel = self . _channel , state = en ) self . command ( cmd )","title":"enable()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.disable","text":"Disable the optical output. Source code in pyinst\\models.py 1811 1812 1813 def disable ( self ) -> None : \"\"\"Disable the optical output.\"\"\" self . enable ( False )","title":"disable()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.is_enabled","text":"Returns: Type Description bool Whether the optical output is enabled. Source code in pyinst\\models.py 1815 1816 1817 1818 1819 1820 1821 1822 def is_enabled ( self ) -> bool : \"\"\" Returns: Whether the optical output is enabled. \"\"\" cmd = \":OUTPut {slot:d} :CHANnel {channel:d} :STATe?\" . format ( slot = self . _slot , channel = self . _channel ) status = bool ( int ( self . query ( cmd ))) return status","title":"is_enabled()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.get_att","text":"Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use get_att_offset and set_att_offset to operate with the attenuator offset. Returns: Type Description float The attenuation value in dB. Source code in pyinst\\models.py 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 def get_att ( self ) -> float : \"\"\" Get the current attenuation value in dB. Includes the attenuation offset. Queried attenuator = the actual attenuator value + attenuator offset Use `get_att_offset` and `set_att_offset` to operate with the attenuator offset. Returns: The attenuation value in dB. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation?\" . format ( slot = self . _slot , channel = self . _channel ) att = float ( self . query ( cmd )) return att","title":"get_att()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.set_att","text":"Set attenuation value in dB. Includes the attenuation offset. Refer to get_att for more information. Parameters: Name Type Description Default att int | float The attenuation value in dB. required Source code in pyinst\\models.py 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 def set_att ( self , att : int | float ) -> None : \"\"\" Set attenuation value in dB. Includes the attenuation offset. Refer to `get_att` for more information. Args: att: The attenuation value in dB. \"\"\" if not self . min_att <= att <= self . max_att : raise ValueError ( f 'Parameter att is out of range: { att !r} ' ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :ATTenuation {att:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , att = att ) self . command ( cmd )","title":"set_att()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.get_att_offset","text":"Get the attenuation offset value in dB. Returns: Type Description float The attenuation offset in dB. Source code in pyinst\\models.py 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 def get_att_offset ( self ) -> float : \"\"\" Get the attenuation offset value in dB. Returns: The attenuation offset in dB. \"\"\" cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet?\" . format ( slot = self . _slot , channel = self . _channel ) offset = float ( self . query ( cmd )) return offset","title":"get_att_offset()"},{"location":"api/models/#pyinst.models.BaseModel815x_VOA.set_att_offset","text":"Set the attenuation offset value in dB. Parameters: Name Type Description Default offset int | float The attenuation offset in dB. required Source code in pyinst\\models.py 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 def set_att_offset ( self , offset : int | float ) -> None : \"\"\" Set the attenuation offset value in dB. Args: offset: The attenuation offset in dB. \"\"\" if not self . min_att_offset <= offset <= self . max_att_offset : raise ValueError ( f \"Parameter offset is out of range: { offset !r} \" ) cmd = \":INPut {slot:d} :CHANnel {channel:d} :OFFSet {offset:.3f} DB\" . format ( slot = self . _slot , channel = self . _channel , offset = offset ) self . command ( cmd )","title":"set_att_offset()"},{"location":"api/models/#pyinst.models.Model81571A","text":"Bases: BaseModel815x_VOA Keysight 81571A variable optical attenuator plug-in module. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1902 1903 1904 1905 1906 1907 1908 1909 def __init__ ( self , resource_name : str , slot : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , slot , channel = 1 , ** kwargs )","title":"Model81571A"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM","text":"Bases: VisaInstrument , TypeOPM Base class of Keysight 816x optical power meters. Note For the Keysight 81635A Dual Power Sensor and Keysight 81619A Dual Optical Head Interface module, channel 1 is the primary channel and channel 2 is the secondary channel. The primary and secondary channels share the same software and hardware triggering system. For some methods, setting parameters for the primary channel sets the parameters for the secondary channel. For these methods, setting for the secondary channel is not allowed. Currently, these methods are: set_avg_time() Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required channel int The channel number. required **kwargs Directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 def __init__ ( self , resource_name : str , slot : int , channel : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. channel: The channel number. **kwargs: Directly passed to `VisaInstrument.__init__` \"\"\" super () . __init__ ( resource_name , ** kwargs ) self . _slot = slot self . _channel = channel","title":"BaseModel816x_OPM"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.min_frequency","text":"The minimum settable optical frequency value in THz. Source code in pyinst\\models.py 1942 1943 1944 1945 @property def min_frequency ( self ) -> float : \"\"\"The minimum settable optical frequency value in THz.\"\"\" return super () . min_frequency","title":"min_frequency()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.max_frequency","text":"The maximum settable optical frequency value in THz. Source code in pyinst\\models.py 1947 1948 1949 1950 @property def max_frequency ( self ) -> float : \"\"\"The maximum settable optical frequency value in THz.\"\"\" return super () . max_frequency","title":"max_frequency()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.min_wavelength","text":"The minimum settable optical wavelength value in nm. Source code in pyinst\\models.py 1952 1953 1954 1955 1956 1957 @property def min_wavelength ( self ) -> float : \"\"\"The minimum settable optical wavelength value in nm.\"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength? MIN\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"min_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.max_wavelength","text":"The maximum settable optical wavelength value in nm. Source code in pyinst\\models.py 1959 1960 1961 1962 1963 1964 @property def max_wavelength ( self ) -> float : \"\"\"The maximum settable optical wavelength value in nm.\"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength? MAX\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"max_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.min_avg_time","text":"The minimum averaging time in ms. Source code in pyinst\\models.py 1966 1967 1968 1969 @property def min_avg_time ( self ) -> float : \"\"\"The minimum averaging time in ms.\"\"\" return 0.1 # 100us","title":"min_avg_time()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.max_avg_time","text":"The maximum averaging time in ms. Source code in pyinst\\models.py 1971 1972 1973 1974 @property def max_avg_time ( self ) -> float : \"\"\"The maximum averaging time in ms.\"\"\" return 10000 # 10s","title":"max_avg_time()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.min_pow_cal","text":"The minimum power calibration value in dB. Source code in pyinst\\models.py 1976 1977 1978 1979 @property def min_pow_cal ( self ) -> float : \"\"\"The minimum power calibration value in dB.\"\"\" return - 200","title":"min_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.max_pow_cal","text":"The maximum power calibration value in dB. Source code in pyinst\\models.py 1981 1982 1983 1984 @property def max_pow_cal ( self ) -> float : \"\"\"The maximum power calibration value in dB.\"\"\" return 200","title":"max_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_frequency","text":"Queries the optical frequency setting of the instrument in THz. Returns: Type Description float The optical frequency setting value in THz. Source code in pyinst\\models.py 1986 1987 1988 1989 1990 1991 1992 1993 def get_frequency ( self ) -> float : \"\"\" Queries the optical frequency setting of the instrument in THz. Returns: The optical frequency setting value in THz. \"\"\" return super () . get_frequency ()","title":"get_frequency()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_frequency","text":"Set optical frequency. Parameters: Name Type Description Default frequency int | float The optical frequency setting in THz. required Source code in pyinst\\models.py 1995 1996 1997 1998 1999 2000 2001 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency. Args: frequency: The optical frequency setting in THz. \"\"\" return super () . set_frequency ( frequency )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_wavelength","text":"Queries the optical wavelength setting of the instrument in nm. Returns: Type Description float The optical wavelength setting value in nm. Source code in pyinst\\models.py 2003 2004 2005 2006 2007 2008 2009 2010 2011 def get_wavelength ( self ) -> float : \"\"\"Queries the optical wavelength setting of the instrument in nm. Returns: The optical wavelength setting value in nm. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength?\" . format ( slot = self . _slot , channel = self . _channel ) wl = float ( self . query ( cmd )) * 10 ** 9 return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_wavelength","text":"Set optical wavelength. Parameters: Name Type Description Default wavelength int | float The optical wavelength setting in nm. required Source code in pyinst\\models.py 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength. Args: wavelength: The optical wavelength setting in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:WAVelength {wl:.4f} NM\" . format ( slot = self . _slot , channel = self . _channel , wl = wavelength ) self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_power_value","text":"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to get_pow_cal and set_pow_cal to operate with the power calibration. Returns: Type Description float The value of the optical power. Source code in pyinst\\models.py 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 def get_power_value ( self ) -> float : \"\"\"Fetch the value of measured optical power in current unit setting. The measured value includes the power calibration. Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) Refer to `get_pow_cal` and `set_pow_cal` to operate with the power calibration. Returns: The value of the optical power. \"\"\" cmd = \":FETCh {slot:d} :CHANnel {channel:d} :POWer?\" . format ( slot = self . _slot , channel = self . _channel ) value = float ( self . query ( cmd )) return value","title":"get_power_value()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_power_unit","text":"Get optical power unit setting. Returns: Type Description OpticalPowerUnit The unit of the optical power. Source code in pyinst\\models.py 2040 2041 2042 2043 2044 2045 2046 2047 2048 def get_power_unit ( self ) -> OpticalPowerUnit : \"\"\"Get optical power unit setting. Returns: The unit of the optical power. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:UNIT?\" . format ( slot = self . _slot , channel = self . _channel ) unit_int = int ( self . query ( cmd )) return OpticalPowerUnit ( unit_int )","title":"get_power_unit()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_power_unit","text":"Set the unit of optical power. Parameters: Name Type Description Default unit OpticalPowerUnit The unit of the optical power. required Source code in pyinst\\models.py 2050 2051 2052 2053 2054 2055 2056 2057 2058 def set_power_unit ( self , unit : OpticalPowerUnit ) -> None : \"\"\"Set the unit of optical power. Args: unit: The unit of the optical power. \"\"\" unit = OpticalPowerUnit ( unit ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:UNIT {unit:d} \" . format ( slot = self . _slot , channel = self . _channel , unit = unit ) self . command ( cmd )","title":"set_power_unit()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_pow_cal","text":"Get the power calibration offset in dB. Returns: Type Description float The power calibration offset in dB. Source code in pyinst\\models.py 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 def get_pow_cal ( self ) -> float : \"\"\" Get the power calibration offset in dB. Returns: The power calibration offset in dB. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :CORRection?\" . format ( slot = self . _slot , channel = self . _channel ) cal = float ( self . query ( cmd )) return cal","title":"get_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_pow_cal","text":"Set the power calibration offset in dB. Parameters: Name Type Description Default value int | float The power calibration offset in dB. required Source code in pyinst\\models.py 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 def set_pow_cal ( self , value : int | float ) -> None : \"\"\" Set the power calibration offset in dB. Args: value: The power calibration offset in dB. \"\"\" if not self . min_pow_cal <= value <= self . max_pow_cal : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :CORRection {value:.4f} DB\" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_pow_cal()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.get_avg_time","text":"Get the averaging time in ms. Returns: Type Description float The averaging time in ms. Source code in pyinst\\models.py 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 def get_avg_time ( self ) -> float : \"\"\" Get the averaging time in ms. Returns: The averaging time in ms. \"\"\" cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:ATIMe?\" . format ( slot = self . _slot , channel = self . _channel ) avg_t = float ( self . query ( cmd )) * 1000 return avg_t","title":"get_avg_time()"},{"location":"api/models/#pyinst.models.BaseModel816x_OPM.set_avg_time","text":"Set the averaging time in ms. Note Can only be sent to primary channel, and secondary channel is also affected. Parameters: Name Type Description Default value int | float The averaging time in ms. required Source code in pyinst\\models.py 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 def set_avg_time ( self , value : int | float ) -> None : \"\"\" Set the averaging time in ms. Note: Can only be sent to primary channel, and secondary channel is also affected. Args: value: The averaging time in ms. \"\"\" if not self . min_avg_time <= value <= self . max_avg_time : raise ValueError ( f \"Parameter value is out of range: { value !r} \" ) cmd = \":SENSe {slot:d} :CHANnel {channel:d} :POWer:ATIMe {value:.4f} \" . format ( slot = self . _slot , channel = self . _channel , value = value ) self . command ( cmd )","title":"set_avg_time()"},{"location":"api/models/#pyinst.models.Model81635A","text":"Bases: BaseModel816x_OPM Keysight 81635A optical power meter plug-in module.","title":"Model81635A"},{"location":"api/models/#pyinst.models.BaseModelVSA89600","text":"Bases: VisaInstrument The base class of instrument models based on Keysight 89600 VSA software. Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required encoding The encoding of the VISA IO string. 'latin1' kwargs Directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 def __init__ ( self , resource_name , encoding = 'latin1' , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. encoding: The encoding of the VISA IO string. kwargs: Directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , encoding = encoding , ** kwargs ) self . __custom_measurement_demod_filters = { \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" } self . __custom_reference_demod_filters = { \"Rectangular\" , \"RaisedCosine\" , \"RootRaisedCosine\" , \"Gaussian\" , \"HalfSine\" }","title":"BaseModelVSA89600"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.CUSTOM_DEMOD_MEASUREMENT_FILTERS","text":"Options for custom demod measurement filter types. Source code in pyinst\\models.py 2154 2155 2156 2157 @property def CUSTOM_DEMOD_MEASUREMENT_FILTERS ( self ) -> set : \"\"\"Options for custom demod measurement filter types.\"\"\" return self . __custom_measurement_demod_filters","title":"CUSTOM_DEMOD_MEASUREMENT_FILTERS()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.CUSTOM_DEMOD_REFERENCE_FILTERS","text":"Options for custom demod reference filter types. Source code in pyinst\\models.py 2159 2160 2161 2162 @property def CUSTOM_DEMOD_REFERENCE_FILTERS ( self ) -> set : \"\"\"Options for custom demod reference filter types.\"\"\" return self . __custom_reference_demod_filters","title":"CUSTOM_DEMOD_REFERENCE_FILTERS()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.run","text":"Resume or stop the measurement. Parameters: Name Type Description Default _run bool True = Run the measurement. False = Stops the measurement and clears all measurement data. True Source code in pyinst\\models.py 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 def run ( self , _run : bool = True ) -> None : \"\"\"Resume or stop the measurement. Args: _run: `True` = Run the measurement. `False` = Stops the measurement and clears all measurement data. \"\"\" if _run : self . command ( \":INITiate:RESume\" ) else : self . command ( \":INITiate:ABORt\" )","title":"run()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.stop","text":"Stops the measurement and clears all measurement data. Source code in pyinst\\models.py 2176 2177 2178 def stop ( self ) -> None : \"\"\"Stops the measurement and clears all measurement data.\"\"\" self . run ( False )","title":"stop()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.pause","text":"Causes the measurement to transition to the Paused state. Source code in pyinst\\models.py 2180 2181 2182 def pause ( self ) -> None : \"\"\"Causes the measurement to transition to the Paused state.\"\"\" self . command ( \":INITiate:PAUSe\" )","title":"pause()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.restart","text":"Causes the measurement to restart. The Average count is reset to 0 and the measurement transitions to the Running State. Source code in pyinst\\models.py 2184 2185 2186 2187 2188 def restart ( self ) -> None : \"\"\"Causes the measurement to restart. The Average count is reset to 0 and the measurement transitions to the Running State. \"\"\" self . command ( \":INITiate:RESTart\" )","title":"restart()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_data_table_names","text":"Returns a list of all names in the data table for the specified trace. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ str ] A list of all parameter names in the data table. Source code in pyinst\\models.py 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 def get_data_table_names ( self , trace : int ) -> List [ str ]: \"\"\" Returns a list of all names in the data table for the specified trace. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter names in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) name_str = self . query ( \":TRACe {trace:d} :DATA:TABLe:NAME?\" . format ( trace = trace )) name_list = list ( map ( lambda x : x . strip ( '\"' ), name_str . split ( \",\" ))) return name_list","title":"get_data_table_names()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_data_table_values","text":"Gets a list of values from a data table. Enum values are returned as enum indexes ( int type). Numeric values are returned as int or float . Other values are returned as str . Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ int | float | str ] A list of all parameter values in the data table. Source code in pyinst\\models.py 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 def get_data_table_values ( self , trace : int ) -> List [ int | float | str ]: \"\"\"Gets a list of values from a data table. Enum values are returned as enum indexes (`int` type). Numeric values are returned as `int` or `float`. Other values are returned as `str`. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter values in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) value_str = self . query ( \":TRACe {trace:d} :DATA:TABLe?\" . format ( trace = trace )) raw_values = value_str . split ( \",\" ) . strip () values = [] for r_val in raw_values : try : val = int ( r_val ) except ValueError : try : val = float ( r_val ) except : val = r_val values . append ( val ) return values","title":"get_data_table_values()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_data_table_units","text":"Get all the units of the specified trace. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description List [ str ] A list of all parameter units in the data table. Source code in pyinst\\models.py 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 def get_data_table_units ( self , trace : int ) -> List [ str ]: \"\"\" Get all the units of the specified trace. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A list of all parameter units in the data table. \"\"\" if not trace >= 1 : raise ValueError ( f 'Parameter trace must start from 1, got { trace !r} ' ) unit_str = self . query ( ':TRACe {trace:d} :DATA:TABLe:UNIT?' . format ( trace = trace )) unit_list = list ( map ( lambda x : x . strip ( '\"' ), unit_str . split ( \",\" ))) return unit_list","title":"get_data_table_units()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_data_table","text":"Get formatted data including table item names, values, and units. Parameters: Name Type Description Default trace int The index of trace, 1 based from A. For example, A->1, E->5 required Returns: Type Description Dict [ str , Tuple [ int | float | str , str ]] A dict represents the data table. The format is: Dict [ str , Tuple [ int | float | str , str ]] name => (value, unit) Source code in pyinst\\models.py 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 def get_data_table ( self , trace : int ) -> Dict [ str , Tuple [ int | float | str , str ]]: \"\"\" Get formatted data including table item names, values, and units. Args: trace: The index of trace, 1 based from A. For example, A->1, E->5 Returns: A dict represents the data table. The format is: name => (value, unit) \"\"\" names = self . get_data_table_names ( trace ) values = self . get_data_table_values ( trace ) units = self . get_data_table_units ( trace ) if len ( names ) == len ( values ) == len ( units ): i_len = len ( names ) else : raise IndexError ( 'Numbers of names, values and units do not match.' ) data = {} for i in range ( i_len ): data [ names [ i ]] = ( values [ i ], units [ i ]) return data","title":"get_data_table()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_measurement_filter","text":"Gets the measurement filter applied during the digital demodulation measurement. Returns: Type Description Literal ['None', 'Rectangular', 'RootRaisedCosine', 'Gaussian', 'LowPass'] The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" Source code in pyinst\\models.py 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 def get_custom_demod_measurement_filter ( self ) -> Literal [ \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" ]: \"\"\"Gets the measurement filter applied during the digital demodulation measurement. Returns: The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" \"\"\" cmd = \":CDEMod:FILTer?\" filter_type = self . query ( cmd ) . strip () . strip ( '\"' ) return filter_type","title":"get_custom_demod_measurement_filter()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_measurement_filter","text":"Sets the measurement filter applied during the digital demodulation measurement. Parameters: Name Type Description Default filter_type Literal ['None', 'Rectangular', 'RootRaisedCosine', 'Gaussian', 'LowPass'] The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" required Source code in pyinst\\models.py 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 def set_custom_demod_measurement_filter ( self , filter_type : Literal [ \"None\" , \"Rectangular\" , \"RootRaisedCosine\" , \"Gaussian\" , \"LowPass\" ]) -> None : \"\"\"Sets the measurement filter applied during the digital demodulation measurement. Args: filter_type: The custom demod measurement filter type. Options: \"None\", \"Rectangular\", \"RootRaisedCosine\", \"Gaussian\", \"LowPass\" \"\"\" if filter_type not in self . CUSTOM_DEMOD_MEASUREMENT_FILTERS : raise ValueError ( 'Invalid filter_type: {filter!r} ' . format ( filter = filter_type )) cmd = \":CDEMod:FILTer \\\" {filter} \\\" \" . format ( filter = filter_type ) self . command ( cmd )","title":"set_custom_demod_measurement_filter()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_reference_filter","text":"Gets the reference filter applied during the digital demodulation measurement. Returns: Type Description Literal ['Rectangular', 'RaisedCosine', 'RootRaisedCosine', 'Gaussian', 'HalfSine'] The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" Source code in pyinst\\models.py 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 def get_custom_demod_reference_filter ( self ) -> Literal [ \"Rectangular\" , \"RaisedCosine\" , \"RootRaisedCosine\" , \"Gaussian\" , \"HalfSine\" ]: \"\"\"Gets the reference filter applied during the digital demodulation measurement. Returns: The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" \"\"\" cmd = ':CDEMod:FILTer:REFerence?' filter_type = self . query ( cmd ) . strip () . strip ( '\"' ) return filter_type","title":"get_custom_demod_reference_filter()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_reference_filter","text":"Sets the reference filter applied during the digital demodulation measurement. Parameters: Name Type Description Default filter_type str The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" required Source code in pyinst\\models.py 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 def set_custom_demod_reference_filter ( self , filter_type : str ) -> None : \"\"\"Sets the reference filter applied during the digital demodulation measurement. Args: filter_type: The custom demod reference filter type. Options: \"Rectangular\", \"RaisedCosine\", \"RootRaisedCosine\", \"Gaussian\", \"HalfSine\" \"\"\" if filter_type not in self . CUSTOM_DEMOD_REFERENCE_FILTERS : raise ValueError ( 'Invalid filter_type: {filter!r} ' . format ( filter = filter_type )) cmd = \":CDEMod:FILTer:REFerence \\\" {filter} \\\" \" . format ( filter = filter_type ) self . command ( cmd )","title":"set_custom_demod_reference_filter()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_filter_abt","text":"Gets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Returns: Type Description float The \u03b1 (alpha) or BT (bandwidth time product) parameter. Source code in pyinst\\models.py 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 def get_custom_demod_filter_abt ( self ) -> float : \"\"\"Gets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Returns: The \u03b1 (alpha) or BT (bandwidth time product) parameter. \"\"\" cmd = ':CDEMod:FILTer:ABT?' abt = float ( self . query ( cmd )) return abt","title":"get_custom_demod_filter_abt()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_filter_abt","text":"Sets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Parameters: Name Type Description Default abt int | float The \u03b1 (alpha) or BT (bandwidth time product) parameter. required Source code in pyinst\\models.py 2341 2342 2343 2344 2345 2346 2347 2348 2349 def set_custom_demod_filter_abt ( self , abt : int | float ) -> None : \"\"\"Sets the \u03b1 (alpha) or BT (bandwidth time product) parameter for custom demod measurement and reference filters. Args: abt: The \u03b1 (alpha) or BT (bandwidth time product) parameter. \"\"\" cmd = ':CDEMod:FILTer:ABT {value:f} ' . format ( value = round ( abt , 6 )) self . command ( cmd )","title":"set_custom_demod_filter_abt()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_equalization_state","text":"Gets a value indicating whether the equalization filter is enabled. Returns: Type Description bool Whether the equalization filter is enabled. Source code in pyinst\\models.py 2351 2352 2353 2354 2355 2356 2357 2358 2359 def get_custom_demod_equalization_state ( self ) -> bool : \"\"\"Gets a value indicating whether the equalization filter is enabled. Returns: Whether the equalization filter is enabled. \"\"\" cmd = ':CDEMod:COMPensate:EQUalize?' state = bool ( int ( self . query ( cmd ))) return state","title":"get_custom_demod_equalization_state()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_equalization_state","text":"Enables or disables the equalization filter. Parameters: Name Type Description Default enable bool True = enable, False = disable required Source code in pyinst\\models.py 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 def set_custom_demod_equalization_state ( self , enable : bool ) -> None : \"\"\" Enables or disables the equalization filter. Args: enable: True = enable, False = disable \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = ':CDEMod:COMPensate:EQUalize {state:d} ' . format ( state = enable ) self . command ( cmd )","title":"set_custom_demod_equalization_state()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_equalization_length","text":"Gets the length of the equalization filter in symbols. Returns: Type Description int The length of the equalization filter in symbols. Source code in pyinst\\models.py 2373 2374 2375 2376 2377 2378 2379 2380 2381 def get_custom_demod_equalization_length ( self ) -> int : \"\"\"Gets the length of the equalization filter in symbols. Returns: The length of the equalization filter in symbols. \"\"\" cmd = ':CDEMod:COMPensate:EQUalize:LENGth?' rpl = self . query ( cmd ) return int ( rpl )","title":"get_custom_demod_equalization_length()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_equalization_length","text":"Sets the length of the equalization filter in symbols. Parameters: Name Type Description Default symbols int The length of the equalization filter in symbols. required Source code in pyinst\\models.py 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 def set_custom_demod_equalization_length ( self , symbols : int ) -> None : \"\"\"Sets the length of the equalization filter in symbols. Args: symbols: The length of the equalization filter in symbols. \"\"\" if not symbols >= 3 : raise ValueError ( 'Parameter symbols should >= 3: {symbols!r} ' . format ( symbols = symbols )) cmd = ':CDEMod:COMPensate:EQUalize:LENGth {value:d} ' . format ( value = symbols ) self . command ( cmd )","title":"set_custom_demod_equalization_length()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_equalization_convergence","text":"Gets the convergence parameter for the Adaptive Equalizer. Returns: Type Description float The equalization convergence parameter. Source code in pyinst\\models.py 2394 2395 2396 2397 2398 2399 2400 2401 def get_custom_demod_equalization_convergence ( self ) -> float : \"\"\"Gets the convergence parameter for the Adaptive Equalizer. Returns: The equalization convergence parameter. \"\"\" cmd = \":CDEMod:COMPensate:EQUalize:CONVergence?\" return float ( self . query ( cmd ))","title":"get_custom_demod_equalization_convergence()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_equalization_convergence","text":"Sets the convergence parameter for the Adaptive Equalizer. Parameters: Name Type Description Default value int | float The equalization convergence parameter. required Source code in pyinst\\models.py 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 def set_custom_demod_equalization_convergence ( self , value : int | float ) -> None : \"\"\"Sets the convergence parameter for the Adaptive Equalizer. Args: value: The equalization convergence parameter. \"\"\" if not 1E-8 <= value <= 1e-6 : raise ValueError ( f 'Invalid value for EQ convergence: { value !r} , must be between 1E-6 and 1E-8.' ) cmd = ':CDEMod:COMPensate:EQUalize:CONVergence {value:.4E} ' . format ( value = value ) self . command ( cmd )","title":"set_custom_demod_equalization_convergence()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_equalizer_run_mode","text":"Gets the run mode of the Adaptive Equalizer. Returns: Type Description Literal ['Run', 'Hold'] The run mode. Options: \"Run\" | \"Hold\". Source code in pyinst\\models.py 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 def get_custom_demod_equalizer_run_mode ( self ) -> Literal [ \"Run\" , \"Hold\" ]: \"\"\" Gets the run mode of the Adaptive Equalizer. Returns: The run mode. Options: \"Run\" | \"Hold\". \"\"\" cmd = ':CDEMod:COMPensate:EQUalize:MODE?' mode = self . query ( cmd ) . strip () . strip ( '\"' ) return mode","title":"get_custom_demod_equalizer_run_mode()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_equalizer_run_mode","text":"Sets the run mode of the Adaptive Equalizer. Parameters: Name Type Description Default mode Literal ['Run', 'Hold'] The run mode. Options: \"Run\" | \"Hold\". required Source code in pyinst\\models.py 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 def set_custom_demod_equalizer_run_mode ( self , mode : Literal [ \"Run\" , \"Hold\" ]) -> None : \"\"\" Sets the run mode of the Adaptive Equalizer. Args: mode: The run mode. Options: \"Run\" | \"Hold\". \"\"\" MODES = { \"Run\" , \"Hold\" } if mode not in MODES : raise ValueError ( 'Invalid value for Custom Demod EQ run mode: {vlaue!r} ' . format ( mode )) cmd = ':CDEMod:COMPensate:EQUalize:MODE {value} ' . format ( value = mode ) self . command ( cmd )","title":"set_custom_demod_equalizer_run_mode()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.reset_custom_demod_equalizer","text":"Reset the custom demod equalizer filter. Source code in pyinst\\models.py 2438 2439 2440 2441 def reset_custom_demod_equalizer ( self ) -> None : \"\"\"Reset the custom demod equalizer filter.\"\"\" cmd = ':CDEMod:COMPensate:EQUalize:RESet' self . command ( cmd )","title":"reset_custom_demod_equalizer()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_result_length","text":"Gets the demodulation measurement result length (in symbols). Returns: Type Description int The result length in symbols. Source code in pyinst\\models.py 2443 2444 2445 2446 2447 2448 2449 2450 2451 def get_custom_demod_result_length ( self ) -> int : \"\"\"Gets the demodulation measurement result length (in symbols). Returns: The result length in symbols. \"\"\" cmd = ':CDEMod:RLENgth?' l = int ( self . query ( cmd )) return l","title":"get_custom_demod_result_length()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_result_length","text":"Sets the demodulation measurement result length (in symbols). Parameters: Name Type Description Default length int The result length in symbols. required Source code in pyinst\\models.py 2453 2454 2455 2456 2457 2458 2459 2460 def set_custom_demod_result_length ( self , length : int ) -> None : \"\"\"Sets the demodulation measurement result length (in symbols). Args: length: The result length in symbols. \"\"\" cmd = ':CDEMod:RLENgth {v:d} ' . format ( v = length ) self . command ( cmd )","title":"set_custom_demod_result_length()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.get_custom_demod_reference","text":"Gets the reference used for normalization of IQ traces and EVM calculations. Returns: Type Description str The reference type. Possible return values: ConstellationMaximum | ReferenceRms Source code in pyinst\\models.py 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 def get_custom_demod_reference ( self ) -> str : \"\"\"Gets the reference used for normalization of IQ traces and EVM calculations. Returns: The reference type. Possible return values: `ConstellationMaximum` | `ReferenceRms` \"\"\" cmd = f ':CDEMod:COMPensate:NREFerence?' return self . query ( cmd ) . strip ()","title":"get_custom_demod_reference()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600.set_custom_demod_reference","text":"Sets the reference used for normalization of IQ traces and EVM calculations. Parameters: Name Type Description Default ref_type str The reference type. Options: ConstellationMaximum | ReferenceRms required Source code in pyinst\\models.py 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 def set_custom_demod_reference ( self , ref_type : str ) -> None : \"\"\"Sets the reference used for normalization of IQ traces and EVM calculations. Args: ref_type: The reference type. Options: `ConstellationMaximum` | `ReferenceRms` \"\"\" if ref_type not in { \"ConstellationMaximum\" , \"ReferenceRms\" }: raise ValueError ( f \"Invaild ref_type: { ref_type !r} \" ) cmd = f ':CDEMod:COMPensate:NREFerence { ref_type } ' return self . command ( cmd )","title":"set_custom_demod_reference()"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA","text":"Bases: BaseModelVSA89600 , TypeOMA Base class for Keysight OMAs based on VSA 89600 software: M8290A and N4392A Optical Modulation Analyzers","title":"BaseModelVSA89600_OMA"},{"location":"api/models/#pyinst.models.BaseModelVSA89600_OMA.smart_setup","text":"Perform smart setup of the OMA. Use parameter execute to choose whether to execute the changed settings or not. If a setting parameter is not explicitly given (default as None), the old setting will be kept. Parameters: Name Type Description Default execute bool Whether to execute smart setup with the new settings. If set to False, the settings of smart setup will be changed, but the OMA will not execute smart setup. True frequency Optional [ int | float ] The carrier frequency in THz. None symbol_rate Optional [ int | float ] The symbol rate in GHz. None fine_tune_symbol_rate Optional [ bool ] Whether the system should try to fine tune the symbol rate. None demodulation_format Optional [ str ] The selected digital demodulation format. Refer to DEMOD_FORMATS for options. None polarization Optional [ str ] The expected polarization or if auto detection should be used. options: \"Single\" | \"Dual\" | \"Auto\" . None pre_set_layout Optional [ bool ] Whether a preset of the trace layout should be performed. None compensate_cd Optional [ bool ] A value indicating whether CD should be compensated. None compensate_pmd Optional [ bool ] A value indicating whether PMD should be compensated. None Source code in pyinst\\models.py 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 def smart_setup ( self , execute : bool = True , frequency : Optional [ int | float ] = None , symbol_rate : Optional [ int | float ] = None , fine_tune_symbol_rate : Optional [ bool ] = None , demodulation_format : Optional [ str ] = None , polarization : Optional [ str ] = None , pre_set_layout : Optional [ bool ] = None , compensate_cd : Optional [ bool ] = None , compensate_pmd : Optional [ bool ] = None ): \"\"\"Perform smart setup of the OMA. Use parameter `execute` to choose whether to execute the changed settings or not. If a setting parameter is not explicitly given (default as None), the old setting will be kept. Args: execute: Whether to execute smart setup with the new settings. If set to False, the settings of smart setup will be changed, but the OMA will not execute smart setup. frequency: The carrier frequency in THz. symbol_rate: The symbol rate in GHz. fine_tune_symbol_rate: Whether the system should try to fine tune the symbol rate. demodulation_format: The selected digital demodulation format. Refer to `DEMOD_FORMATS` for options. polarization: The expected polarization or if auto detection should be used. options: `\"Single\"` | `\"Dual\"` | `\"Auto\"`. pre_set_layout: Whether a preset of the trace layout should be performed. compensate_cd: A value indicating whether CD should be compensated. compensate_pmd: A value indicating whether PMD should be compensated. \"\"\" if frequency is not None : self . command ( ':OMA:SMartSEtup:CarrierFrequency:FRErequency {value:d} ' . format ( value = round ( frequency * 10 ** 12 ))) if symbol_rate is not None : self . command ( ':OMA:SMartSEtup:SYMBRate {value:d} ' . format ( value = round ( symbol_rate * 10 ** 9 ))) if fine_tune_symbol_rate is not None : if not isinstance ( fine_tune_symbol_rate , bool ): raise TypeError ( f \"Parameter fine_tune_symbol_rate must be a bool, not ' { type ( fine_tune_symbol_rate ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:FINetuneSymbolRate {enable:d} ' . format ( enable = fine_tune_symbol_rate )) if demodulation_format is not None : if demodulation_format not in self . DEMOD_FORMATS : raise ValueError ( 'Invalid modulation demodulation format: {format!r} ' . format ( format = demodulation_format )) self . command ( ':OMA:SMartSEtup:FORMat \" {format} \"' . format ( format = demodulation_format )) if polarization is not None : if not polarization in self . POLARIZATIONS : raise ValueError ( 'Invalid polarization: {pol!r} ' . format ( pol = polarization )) self . command ( ':OMA:SMartSEtup:POLarization \" {pol} \"' . format ( pol = polarization )) if pre_set_layout is not None : if not isinstance ( pre_set_layout , bool ): raise TypeError ( f \"Parameter pre_set_layout must be a bool, not ' { type ( pre_set_layout ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:PREsetLAyout {enable:d} ' . format ( enable = pre_set_layout )) if compensate_cd is not None : if not isinstance ( compensate_cd , bool ): raise TypeError ( f \"Parameter compensate_cd must be a bool, not ' { type ( compensate_cd ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:COmpensateCD {:d} ' . format ( compensate_cd )) if compensate_pmd is not None : if not isinstance ( compensate_pmd , bool ): raise TypeError ( f \"Parameter compensate_pmd must be a bool, not ' { type ( compensate_pmd ) . __name__ } '.\" ) self . command ( ':OMA:SMartSEtup:COmpensatePMD {:d} ' . format ( compensate_pmd )) if execute : self . command ( ':OMA:SMartSEtup:PERformProposedActions' )","title":"smart_setup()"},{"location":"api/models/#pyinst.models.ModelN4392A","text":"Bases: BaseModelVSA89600_OMA N4392A Optical Modulation Analyzer. Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 2613 2614 2615 2616 2617 2618 2619 def __init__ ( self , resource_name , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelN4392A , self ) . __init__ ( resource_name , ** kwargs )","title":"ModelN4392A"},{"location":"api/models/#pyinst.models.ModelM8292A","text":"Bases: BaseModelVSA89600_OMA M8290A Optical Modulation Analyzer Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 2650 2651 2652 2653 2654 2655 2656 def __init__ ( self , resource_name , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelM8292A , self ) . __init__ ( resource_name , ** kwargs )","title":"ModelM8292A"},{"location":"api/models/#pyinst.models.ModelAQ6370","text":"Bases: VisaInstrument , TypeOSA OSA Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 def __init__ ( self , resource_name , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelAQ6370 , self ) . __init__ ( resource_name , ** kwargs ) self . __analysis_cat = [ \"SWTHRESH\" , \"DFBLD\" , \"SMSR\" , \"OSNR\" , \"WDM\" , ] self . command ( ':FORMat:DATA ASCii' ) # set data format to ascii","title":"ModelAQ6370"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_x_unit","text":"Queries the units for the X axis. Returns: Type Description str \"WAV\" = Wavelength, str \"FREQ\" = Frequency Source code in pyinst\\models.py 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 def get_x_unit ( self ) -> str : \"\"\"Queries the units for the X axis. Returns: `\"WAV\"` = Wavelength, `\"FREQ\"` = Frequency \"\"\" cmd = \":UNIT:X?\" options = [ \"WAV\" , \"FREQ\" ] unit = options [ int ( self . query ( cmd ))] return unit","title":"get_x_unit()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_x_unit","text":"Sets the units for the X axis. Parameters: Name Type Description Default unit str \"WAV\" | \"FREQ\" . \"WAV\" = Wavelength, \"FREQ\" = Frequency required Source code in pyinst\\models.py 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 def set_x_unit ( self , unit : str ): \"\"\"Sets the units for the X axis. Args: unit: `\"WAV\"` | `\"FREQ\"`. `\"WAV\"` = Wavelength, `\"FREQ\"` = Frequency \"\"\" cmd = \":UNIT:X {unit} \" . format ( unit ) self . command ( cmd )","title":"set_x_unit()"},{"location":"api/models/#pyinst.models.ModelAQ6370.sweep","text":"Sets the sweep mode and makes a sweep. For information about the sweep modes, please refer to documentation of the instrument. Parameters: Name Type Description Default mode str Sweep mode. \"AUTO\" | \"REPEAT\" | \"SINGLE\" | \"STOP\" . 'REPEAT' Source code in pyinst\\models.py 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 def sweep ( self , mode : str = \"REPEAT\" ) -> None : \"\"\"Sets the sweep mode and makes a sweep. For information about the sweep modes, please refer to documentation of the instrument. Args: mode: Sweep mode. `\"AUTO\"` | `\"REPEAT\"` | `\"SINGLE\"` | `\"STOP\"`. \"\"\" options = [ \"AUTO\" , \"REPEAT\" , \"SINGLE\" , \"STOP\" ] if mode not in options : raise ValueError ( \"Invalid value for param mode: {value} \" . format ( value = mode )) if mode == \"STOP\" : self . command ( ':ABOR' ) else : self . command ( ':INIT:SMOD {mode} ;:INIT' . format ( mode = mode ))","title":"sweep()"},{"location":"api/models/#pyinst.models.ModelAQ6370.run","text":"Makes a REPEAT sweep. Refer to sweep for more information. Source code in pyinst\\models.py 2757 2758 2759 def run ( self ) -> None : \"\"\"Makes a REPEAT sweep. Refer to `sweep` for more information.\"\"\" self . command ( ':INIT:SMOD REPEAT;:INIT' )","title":"run()"},{"location":"api/models/#pyinst.models.ModelAQ6370.stop","text":"Stops sweep. Source code in pyinst\\models.py 2761 2762 2763 def stop ( self ) -> None : \"\"\"Stops sweep.\"\"\" self . command ( ':ABOR' )","title":"stop()"},{"location":"api/models/#pyinst.models.ModelAQ6370.single","text":"Makes a SINGLE sweep. Refer to sweep for more information. Source code in pyinst\\models.py 2765 2766 2767 def single ( self ) -> None : \"\"\"Makes a SINGLE sweep. Refer to `sweep` for more information.\"\"\" self . command ( ':INIT:SMOD SINGLE;:INIT' )","title":"single()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_auto_zero","text":"Sets whether to enable the auto offset function of the level. Source code in pyinst\\models.py 2769 2770 2771 2772 2773 2774 def set_auto_zero ( self , status : bool ) -> None : \"\"\"Sets whether to enable the auto offset function of the level.\"\"\" if not isinstance ( status , bool ): raise TypeError ( f \"Parameter status must be a bool, not ' { type ( status ) . __name__ } '.\" ) cmd = \":CALibration:ZERO {status:d} \" . format ( status = status ) self . command ( cmd )","title":"set_auto_zero()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_auto_zero","text":"Queries whether to enable the auto offset function of the level. Source code in pyinst\\models.py 2776 2777 2778 2779 2780 def get_auto_zero ( self ) -> bool : \"\"\"Queries whether to enable the auto offset function of the level.\"\"\" cmd = \":CALibration:ZERO?\" status = bool ( int ( self . query ( cmd ))) return status","title":"get_auto_zero()"},{"location":"api/models/#pyinst.models.ModelAQ6370.zero_once","text":"Perform offset adjustment once and wait until adjustment complete. TODO: should stopped? Source code in pyinst\\models.py 2782 2783 2784 2785 2786 2787 2788 def zero_once ( self ): \"\"\"Perform offset adjustment once and wait until adjustment complete. TODO: should stopped?\"\"\" self . command ( \":CALibration:ZERO ONCE\" ) while True : being_executed = int ( self . query ( \":CALibration:ZERO:STATus?\" )) if not being_executed : break","title":"zero_once()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_auto_analysis","text":"Sets the automatic analysis function. Source code in pyinst\\models.py 2790 2791 2792 2793 2794 2795 def set_auto_analysis ( self , enable ): \"\"\"Sets the automatic analysis function.\"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = \":CALCulate:AUTO {enable:d} \" . format ( enable = enable ) self . command ( cmd )","title":"set_auto_analysis()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_auto_analysis","text":"Queries the automatic analysis function. Source code in pyinst\\models.py 2797 2798 2799 2800 2801 def get_auto_analysis ( self ): \"\"\"Queries the automatic analysis function.\"\"\" cmd = \":CALCulate:AUTO?\" enabled = bool ( int ( self . query ( cmd ))) return enabled","title":"get_auto_analysis()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_analysis_category","text":"Sets the type of analysis. Parameters: Name Type Description Default category str The type of analysis. Options: required - `SWTHRESH` Spectrum width analysis (THRESH) required - `DFBLD` DFB-LD parameter analysis required - `SMSR` SMSR analysis required - `OSNR`|`WDM` OSNR(WDM), WDM analysis required Source code in pyinst\\models.py 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 def set_analysis_category ( self , category : str ): \"\"\"Sets the type of analysis. Args: category: The type of analysis. Options: - `SWTHRESH`: Spectrum width analysis (THRESH) - `DFBLD`: DFB-LD parameter analysis - `SMSR`: SMSR analysis - `OSNR`|`WDM`: OSNR(WDM), WDM analysis \"\"\" if category not in self . ANALYSIS_CATEGORIES : raise ValueError ( 'Invalid option of category: %r ' % category ) cmd = \":CALCulate:CATegory {cat} \" . format ( cat = category ) self . command ( cmd )","title":"set_analysis_category()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_analysis_category","text":"Queries the type of analysis. Returns: Type Description str The type of analysis. SWTHRESH | DFBLD | SMSR | WDM . str Please refer to set_analysis_category for detail. Source code in pyinst\\models.py 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 def get_analysis_category ( self ) -> str : \"\"\"Queries the type of analysis. Returns: The type of analysis. `SWTHRESH`|`DFBLD`|`SMSR`|`WDM`. Please refer to `set_analysis_category` for detail. \"\"\" cat_dict = { 0 : \"SWTHRESH\" , 5 : \"DFBLD\" , 8 : \"SMSR\" , 11 : \"WDM\" } cmd = \":CALCulate:CATegory?\" cat = cat_dict [ int ( self . query ( cmd ))] return cat","title":"get_analysis_category()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_wdm_analysis_threshold","text":"Set the threshold level of channel detection for the WDM analysis function. Parameters: Name Type Description Default threshold int | float The threshold level value in dB. required Source code in pyinst\\models.py 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 def set_wdm_analysis_threshold ( self , threshold : int | float ) -> None : \"\"\" Set the threshold level of channel detection for the WDM analysis function. Args: threshold: The threshold level value in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:TH {th:.2f} DB\" . format ( th = threshold ) self . command ( cmd )","title":"set_wdm_analysis_threshold()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_wdm_analysis_threshold","text":"Queries the threshold level of channel detection for the WDM analysis function. Returns: Type Description float The threshold level value in dB. Source code in pyinst\\models.py 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 def get_wdm_analysis_threshold ( self ) -> float : \"\"\" Queries the threshold level of channel detection for the WDM analysis function. Returns: The threshold level value in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:TH?\" th = float ( self . query ( cmd )) return th","title":"get_wdm_analysis_threshold()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_wdm_analysis_mdiff","text":"Sets the peak bottom difference of channel detection for the WDM analysis function. Parameters: Name Type Description Default mdiff int | float The peak-bottom difference in dB. required Source code in pyinst\\models.py 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 def set_wdm_analysis_mdiff ( self , mdiff : int | float ) -> None : \"\"\" Sets the peak bottom difference of channel detection for the WDM analysis function. Args: mdiff: The peak-bottom difference in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:MDIFf {mdiff:.2f} DB\" . format ( mdiff = mdiff ) self . command ( cmd )","title":"set_wdm_analysis_mdiff()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_wdm_analysis_mdiff","text":"Queries the peak bottom difference of channel detection for the WDM analysis function. Returns: Type Description float The peak-bottom difference in dB. Source code in pyinst\\models.py 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 def get_wdm_analysis_mdiff ( self ) -> float : \"\"\" Queries the peak bottom difference of channel detection for the WDM analysis function. Returns: The peak-bottom difference in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:MDIFf?\" mdiff = float ( self . query ( cmd )) return mdiff","title":"get_wdm_analysis_mdiff()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_wdm_analysis_dmask","text":"Sets the channel mask threshold level for the WDM analysis function. Parameters: Name Type Description Default dmask int | float The channel mask threshold level in dB. required Source code in pyinst\\models.py 2876 2877 2878 2879 2880 2881 2882 2883 2884 def set_wdm_analysis_dmask ( self , dmask : int | float ) -> None : \"\"\" Sets the channel mask threshold level for the WDM analysis function. Args: dmask: The channel mask threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:DMASk {dmask:.2f} DB\" . format ( dmask = dmask ) self . command ( cmd )","title":"set_wdm_analysis_dmask()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_wdm_analysis_dmask","text":"Queries the channel mask threshold level for the WDM analysis function. Returns: Type Description float The channel mask threshold level in dB. Source code in pyinst\\models.py 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 def get_wdm_analysis_dmask ( self ) -> float : \"\"\" Queries the channel mask threshold level for the WDM analysis function. Returns: The channel mask threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:WDM:DMASk?\" dmask = float ( self . query ( cmd )) return dmask","title":"get_wdm_analysis_dmask()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_wdm_analysis_nalgo","text":"Sets the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: AFIX = AUTO FIX MFIX = MANUAL FIX ACEN = AUTO CENTER MCEN = MANUAL CENTER PIT = PIT Parameters: Name Type Description Default algo str The name of algorithm. Refer to options above. required Source code in pyinst\\models.py 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 def set_wdm_analysis_nalgo ( self , algo : str ) -> None : \"\"\" Sets the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `AFIX` = AUTO FIX - `MFIX` = MANUAL FIX - `ACEN` = AUTO CENTER - `MCEN` = MANUAL CENTER - `PIT` = PIT Args: algo: The name of algorithm. Refer to options above. \"\"\" algo_options = [ \"AFIX\" , \"MFIX\" , \"ACEN\" , \"MCEN\" , \"PIT\" ] if algo . upper () not in algo_options : raise ValueError ( \"Invalid value for algo: {value!r} \" . format ( value = algo )) cmd = \":CALCulate:PARameter:WDM:NALGo {algo} \" . format ( algo = algo ) self . command ( cmd )","title":"set_wdm_analysis_nalgo()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_wdm_analysis_nalgo","text":"Queries the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: AFIX = AUTO FIX MFIX = MANUAL FIX ACEN = AUTO CENTER MCEN = MANUAL CENTER PIT = PIT Returns: Type Description str The name of algorithm. Refer to options above. Source code in pyinst\\models.py 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 def get_wdm_analysis_nalgo ( self ) -> str : \"\"\" Queries the measurement algorithm applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `AFIX` = AUTO FIX - `MFIX` = MANUAL FIX - `ACEN` = AUTO CENTER - `MCEN` = MANUAL CENTER - `PIT` = PIT Returns: The name of algorithm. Refer to options above. \"\"\" algo_options = [ \"AFIX\" , \"MFIX\" , \"ACEN\" , \"MCEN\" , \"PIT\" ] cmd = \":CALCulate:PARameter:WDM:NALGo?\" algo = algo_options [ int ( self . query ( cmd ))] return algo","title":"get_wdm_analysis_nalgo()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_wdm_analysis_narea","text":"Sets the measuring range applied to noise level measurements made by the WDM analysis function. Parameters: Name Type Description Default narea int | float The range in nm. required Source code in pyinst\\models.py 2940 2941 2942 2943 2944 2945 2946 2947 2948 def set_wdm_analysis_narea ( self , narea : int | float ) -> None : \"\"\"Sets the measuring range applied to noise level measurements made by the WDM analysis function. Args: narea: The range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NARea {narea:.2f} NM\" . format ( narea = narea ) self . command ( cmd )","title":"set_wdm_analysis_narea()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_wdm_analysis_narea","text":"Quereis the measuring range applied to noise level measurements made by the WDM analysis function. Returns: Type Description float The range in nm. Source code in pyinst\\models.py 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 def get_wdm_analysis_narea ( self ) -> float : \"\"\"Quereis the measuring range applied to noise level measurements made by the WDM analysis function. Returns: The range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NARea?\" narea = float ( self . query ( cmd )) * 10 ** 9 return narea","title":"get_wdm_analysis_narea()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_wdm_analysis_marea","text":"Sets the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Parameters: Name Type Description Default marea int | float The mask range in nm. required Source code in pyinst\\models.py 2961 2962 2963 2964 2965 2966 2967 2968 2969 def set_wdm_analysis_marea ( self , marea : int | float ) -> None : \"\"\"Sets the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Args: marea: The mask range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:MARea {marea:.2f} NM\" . format ( marea = marea ) self . command ( cmd )","title":"set_wdm_analysis_marea()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_wdm_analysis_marea","text":"Queries the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Returns: Type Description float The mask range in nm. Source code in pyinst\\models.py 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 def get_wdm_analysis_marea ( self ) -> float : \"\"\"Queries the mask range during level measurement applied to noise level measurements made by the WDM analysis function. Returns: The mask range in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:MARea?\" marea = float ( self . query ( cmd )) * 10 ** 9 return marea","title":"get_wdm_analysis_marea()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_wdm_analysis_falgo","text":"Sets the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: LIN = LINEAR GAUS = GAUSS LOR = LORENZ 3RD = 3RD POLY 4TH = 4YH POLY 5TH = 5TH POLY Parameters: Name Type Description Default algo str The name of the algorithm. Refer to options above. required Source code in pyinst\\models.py 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 def set_wdm_analysis_falgo ( self , algo : str ) -> None : \"\"\"Sets the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `LIN` = LINEAR - `GAUS` = GAUSS - `LOR` = LORENZ - `3RD` = 3RD POLY - `4TH` = 4YH POLY - `5TH` = 5TH POLY Args: algo: The name of the algorithm. Refer to options above. \"\"\" algo_options = [ \"LIN\" , \"GAUS\" , \"LOR\" , \"3RD\" , \"4TH\" , \"5TH\" ] if algo . upper () not in algo_options : raise ValueError ( \"Invalid value for algo: {value!r} \" . format ( value = algo )) cmd = \":CALCulate:PARameter:WDM:FALGo {algo} \" . format ( algo = algo ) self . command ( cmd )","title":"set_wdm_analysis_falgo()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_wdm_analysis_falgo","text":"Queries the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: LIN = LINEAR GAUS = GAUSS LOR = LORENZ 3RD = 3RD POLY 4TH = 4YH POLY 5TH = 5TH POLY Returns: Type Description str The name of the algorithm. Refer to options above. Source code in pyinst\\models.py 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 def get_wdm_analysis_falgo ( self ) -> str : \"\"\"Queries the fitting function during level measurement applied to noise level measurements made by the WDM analysis function. Options of algorithms: - `LIN` = LINEAR - `GAUS` = GAUSS - `LOR` = LORENZ - `3RD` = 3RD POLY - `4TH` = 4YH POLY - `5TH` = 5TH POLY Returns: The name of the algorithm. Refer to options above. \"\"\" algo_options = [ \"LIN\" , \"GAUS\" , \"LOR\" , \"3RD\" , \"4TH\" , \"5TH\" ] cmd = \":CALCulate:PARameter:WDM:FALGo?\" algo = algo_options [ int ( self . query ( cmd ))] return algo","title":"get_wdm_analysis_falgo()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_wdm_analysis_parameter_nbw","text":"Sets the noise bandwidth for the WDM analysis function. Parameters: Name Type Description Default nbw int | float The noise bandwidth in nm. required Source code in pyinst\\models.py 3025 3026 3027 3028 3029 3030 3031 3032 def set_wdm_analysis_parameter_nbw ( self , nbw : int | float ) -> None : \"\"\"Sets the noise bandwidth for the WDM analysis function. Args: nbw: The noise bandwidth in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NBW {nbw:.2f} NM\" . format ( nbw = nbw ) self . command ( cmd )","title":"set_wdm_analysis_parameter_nbw()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_wdm_analysis_parameter_nbw","text":"Queries the noise bandwidth for the WDM analysis function. Returns: Type Description float The noise bandwidth in nm. Source code in pyinst\\models.py 3034 3035 3036 3037 3038 3039 3040 3041 3042 def get_wdm_analysis_parameter_nbw ( self ) -> float : \"\"\"Queries the noise bandwidth for the WDM analysis function. Returns: The noise bandwidth in nm. \"\"\" cmd = \":CALCulate:PARameter:WDM:NBW?\" nbw = float ( self . query ( cmd )) * 10 ** 9 return nbw","title":"get_wdm_analysis_parameter_nbw()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_smsr_analysis_mask","text":"Set the mask value for the SMSR analysis function. Parameters: Name Type Description Default mask int | float The mask value in nm. required Source code in pyinst\\models.py 3044 3045 3046 3047 3048 3049 3050 3051 def set_smsr_analysis_mask ( self , mask : int | float ) -> None : \"\"\"Set the mask value for the SMSR analysis function. Args: mask: The mask value in nm. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MASK {mask:.2f} NM\" . format ( mask = mask ) self . command ( cmd )","title":"set_smsr_analysis_mask()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_smsr_analysis_mask","text":"Quereis the mask value for the SMSR analysis function. Returns: Type Description None The mask value in nm. Source code in pyinst\\models.py 3053 3054 3055 3056 3057 3058 3059 3060 3061 def get_smsr_analysis_mask ( self , mask : int | float ) -> None : \"\"\"Quereis the mask value for the SMSR analysis function. Returns: The mask value in nm. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MASK?\" mask = float ( self . query ( cmd )) * 10 ** 9 return mask","title":"get_smsr_analysis_mask()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_smsr_analysis_mode","text":"Sets the analysis mode for the SMSR analysis function. Parameters: Name Type Description Default mode str The analysis mode, SMSR1 | SMSR2 | SMSR3 | SMSR4 . required Source code in pyinst\\models.py 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 def set_smsr_analysis_mode ( self , mode : str ) -> None : \"\"\"Sets the analysis mode for the SMSR analysis function. Args: mode: The analysis mode, `SMSR1`|`SMSR2`|`SMSR3`|`SMSR4`. \"\"\" options = [ \"SMSR1\" , \"SMSR2\" , \"SMSR3\" , \"SMSR4\" ] if mode not in options : raise ValueError ( \"Invalid option for mode: {mode!r} \" . format ( mode = mode )) cmd = \":CALCulate:PARameter:SMSR:MODE {mode} \" . format ( mode = mode ) self . command ( cmd )","title":"set_smsr_analysis_mode()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_smsr_analysis_mode","text":"Sets the analysis mode for the SMSR analysis function. Returns: Type Description str The analysis mode, SMSR1 | SMSR2 | SMSR3 | SMSR4 . Source code in pyinst\\models.py 3075 3076 3077 3078 3079 3080 3081 3082 3083 def get_smsr_analysis_mode ( self ) -> str : \"\"\"Sets the analysis mode for the SMSR analysis function. Returns: The analysis mode, `SMSR1`|`SMSR2`|`SMSR3`|`SMSR4`. \"\"\" cmd = \":CALCulate:PARameter:SMSR:MODE?\" mode = self . query ( cmd ) . strip () return mode","title":"get_smsr_analysis_mode()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_dfbld_analysis_parameter","text":"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Parameters: Name Type Description Default item str Analytical item that sets parameter(s). required parameter str Parameter to be set. required data str Setting data. required <item> <parameter> <data> SWIDth ALGO ENVelope|THResh|RMS|PKRMs TH <NRf>[DB] TH2 <NRf>[DB] K <NRf> MFIT OFF|ON|0|1 MDIFf <NRf>[DB] SMSR SMODe SMSR1|SMSR2|SMSR3|SMSR4 SMASk <NRf>[M] MDIFf <NRf>[DB] RMS ALGO RMS|PKRMs TH <NRf>[DB] K <NRf> MDIFf <NRf>[DB] POWer SPAN <NRf>[M] OSNR MDIFf <NRf>[DB] NALGo AFIX|MFIX|ACENter|MCENter|PIT|0|1|2|3|4 NARea <NRf>[M] MARea <NRf>[M] FALGo LINear|GAUSs|LORenz|3RD|4TH|5TH|0|1|2|3|4|5 NBW <NRf>[M] SPOWer PEAK|INTegral|0|1 IRANge <NRf> Source code in pyinst\\models.py 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 def set_dfbld_analysis_parameter ( self , item : str , parameter : str , data : str ) -> None : \"\"\"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Args: item: Analytical item that sets parameter(s). parameter: Parameter to be set. data: Setting data. |`<item>`|`<parameter>`|`<data>`| |--------|-------------|--------| |SWIDth |ALGO |`ENVelope|THResh|RMS|PKRMs`| | |TH |`<NRf>[DB]`| | |TH2 |`<NRf>[DB]`| | |K |`<NRf>`| | |MFIT |`OFF|ON|0|1`| | |MDIFf |`<NRf>[DB]`| |SMSR |SMODe |`SMSR1|SMSR2|SMSR3|SMSR4`| | |SMASk |`<NRf>[M]`| | |MDIFf |`<NRf>[DB]`| |RMS |ALGO |`RMS|PKRMs`| | |TH |`<NRf>[DB]`| | |K |`<NRf>`| | |MDIFf |`<NRf>[DB]`| |POWer |SPAN |`<NRf>[M]`| |OSNR |MDIFf |`<NRf>[DB]`| | |NALGo |`AFIX|MFIX|ACENter|MCENter|PIT|0|1|2|3|4`| | |NARea |`<NRf>[M]`| | |MARea |`<NRf>[M]`| | |FALGo |`LINear|GAUSs|LORenz|3RD|4TH|5TH|0|1|2|3|4|5`| | |NBW |`<NRf>[M]`| | |SPOWer |`PEAK|INTegral|0|1`| | |IRANge |`<NRf>`| \"\"\" cmd = \":CALCulate:PARameter:DFBLd {item} , {paramater} , {data} \" . format ( item = item , parameter = parameter , data = data ) self . command ( cmd )","title":"set_dfbld_analysis_parameter()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_dfbld_analysis_parameter","text":"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Parameters: Name Type Description Default item str Analytical item that sets parameter(s). required parameter str Parameter to be set. required Returns: Type Description str A string of the value of parameter. Please refer to str set_dfbld_analysis_parameter for detail. Source code in pyinst\\models.py 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 def get_dfbld_analysis_parameter ( self , item : str , parameter : str ) -> str : \"\"\"Sets parameters for the DFB-LD analysis function. For more information, please refer to the documents provided by instument vendor. Args: item: Analytical item that sets parameter(s). parameter: Parameter to be set. Returns: A string of the value of parameter. Please refer to `set_dfbld_analysis_parameter` for detail. \"\"\" cmd = \":CALCulate:PARameter:DFBLd? {item} , {paramater} \" . format ( item = item , parameter = parameter ) return self . query ( cmd )","title":"get_dfbld_analysis_parameter()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_swthresh_analysis_k","text":"Sets the magnification of the THRESH method-based spectrum width analysis function. Parameters: Name Type Description Default k int | float The magnification. required Source code in pyinst\\models.py 3140 3141 3142 3143 3144 3145 3146 3147 3148 def set_swthresh_analysis_k ( self , k : int | float ) -> None : \"\"\"Sets the magnification of the THRESH method-based spectrum width analysis function. Args: k: The magnification. \"\"\" cmd = \":CALCulate:PARameter:SWTHResh:K {k:.2f} \" . format ( k = k ) self . command ( cmd )","title":"set_swthresh_analysis_k()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_swthresh_analysis_k","text":"Sets the magnification of the THRESH method-based spectrum width analysis function. Returns: Type Description float The magnification. Source code in pyinst\\models.py 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 def get_swthresh_analysis_k ( self ) -> float : \"\"\"Sets the magnification of the THRESH method-based spectrum width analysis function. Returns: The magnification. \"\"\" cmd = \":CALCulate:PARameter:SWTHResh:K?\" k = float ( self . query ( cmd )) return k","title":"get_swthresh_analysis_k()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_swthresh_analysis_mfit","text":"Sets whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Parameters: Name Type Description Default en bool Whether to enable the mode fit. required Source code in pyinst\\models.py 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 def set_swthresh_analysis_mfit ( self , en : bool ) -> None : \"\"\"Sets whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Args: en: Whether to enable the mode fit. \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = \":CALCulate:PARameter:SWTHresh:MFIT {en:d} \" . format ( en = en ) self . command ( cmd )","title":"set_swthresh_analysis_mfit()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_swthresh_analysis_mfit","text":"Queries whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Returns: Type Description bool Whether to enable the mode fit. Source code in pyinst\\models.py 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 def get_swthresh_analysis_mfit ( self ) -> bool : \"\"\"Queries whether to enable the mode fit of the THRESH method-based spectrum width analysis function. Returns: Whether to enable the mode fit. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:MFIT?\" en = bool ( int ( self . query ( cmd ))) return en","title":"get_swthresh_analysis_mfit()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_swthresh_analysis_th","text":"Sets the threshold level of the THRESH method-based spectrum width analysis function. Parameters: Name Type Description Default th int | float The threshold level in dB. required Source code in pyinst\\models.py 3184 3185 3186 3187 3188 3189 3190 3191 3192 def set_swthresh_analysis_th ( self , th : int | float ) -> None : \"\"\"Sets the threshold level of the THRESH method-based spectrum width analysis function. Args: th: The threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:TH {th:.2f} DB\" . format ( th = th ) self . command ( cmd )","title":"set_swthresh_analysis_th()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_swthresh_analysis_th","text":"Queries the threshold level of the THRESH method-based spectrum width analysis function. Returns: Type Description float The threshold level in dB. Source code in pyinst\\models.py 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 def get_swthresh_analysis_th ( self ) -> float : \"\"\"Queries the threshold level of the THRESH method-based spectrum width analysis function. Returns: The threshold level in dB. \"\"\" cmd = \":CALCulate:PARameter:SWTHresh:TH?\" th = float ( self . query ( cmd )) return th","title":"get_swthresh_analysis_th()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_analysis_data","text":"Queries the analysis results from the last time analysis was executed. For the output formats of analysis results, please refer to documents from the instrument vendor. Source code in pyinst\\models.py 3205 3206 3207 3208 3209 3210 3211 3212 def get_analysis_data ( self ) -> str : \"\"\"Queries the analysis results from the last time analysis was executed. For the output formats of analysis results, please refer to documents from the instrument vendor. \"\"\" return self . query ( ':CALC:DATA?' )","title":"get_analysis_data()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_center","text":"Sets the measurement condition center wavelength/frequency. Parameters: Name Type Description Default value int | float The center frequency in THz or wavelength in nm. required unit str \"NM\" or \"THZ\" . required Source code in pyinst\\models.py 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 def set_center ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the measurement condition center wavelength/frequency. Args: value: The center frequency in THz or wavelength in nm. unit: `\"NM\"` or `\"THZ\"`. \"\"\" if unit . upper () not in self . WL_UNITS : raise ValueError ( 'Invalid option for unit: {unit!r} .' . format ( unit = unit )) cmd = \":SENSe:WAVelength:CENTer {value:.4f}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd )","title":"set_center()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_center","text":"Queries the measurement condition center wavelength/frequency. Returns: Type Description float The value of center frequency/wavelength value. If x unit is float \"WAV\", returns the center wavelength in nm. If x unit is \"FREQ\", float returns the center frequency in THz. float Please refer to get_x_unit for more information. Source code in pyinst\\models.py 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 def get_center ( self ) -> float : \"\"\" Queries the measurement condition center wavelength/frequency. Returns: The value of center frequency/wavelength value. If x unit is \"WAV\", returns the center wavelength in nm. If x unit is \"FREQ\", returns the center frequency in THz. Please refer to `get_x_unit` for more information. \"\"\" cmd = \":SENSe:WAVelength:CENTer?\" if \"WAV\" == self . get_x_unit (): center = float ( self . query ( cmd )) * 10 ** 9 else : center = float ( self . query ( cmd )) / 10 ** 12 return center","title":"get_center()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_span","text":"Sets the measurement condition measurement span. Parameters: Name Type Description Default value int | float The value of measurement span. required unit str \"NM\" or \"GHZ\" . required Source code in pyinst\\models.py 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 def set_span ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the measurement condition measurement span. Args: value: The value of measurement span. unit: `\"NM\"` or `\"GHZ\"`. \"\"\" if unit not in self . WL_SPAN_UNITS : raise ValueError ( \"Invalid option for unit: {unit!r} \" . format ( unit = unit )) cmd = \":SENSe:WAVelengthSPAN {value:.2f}{unit} \" . format ( value = value , unit = unit ) return self . command ( cmd )","title":"set_span()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_span","text":"Queries the measurement condition measurement span and unit. Returns: Type Description float The value of measurement span value. If x unit is \"WAV\", returns float the span in nm. If x unit is \"FREQ\", returns the span in GHz. float Please refer to get_x_unit for more information. Source code in pyinst\\models.py 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 def get_span ( self ) -> float : \"\"\"Queries the measurement condition measurement span and unit. Returns: The value of measurement span value. If x unit is \"WAV\", returns the span in nm. If x unit is \"FREQ\", returns the span in GHz. Please refer to `get_x_unit` for more information. \"\"\" cmd = \":SENSe:WAVelengthSPAN?\" if \"WAV\" == self . get_x_unit (): span = float ( self . query ( cmd )) * 10 ** 9 else : span = float ( self . query ( cmd )) / 10 ** 9 return span","title":"get_span()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_start_wavelength","text":"Queries the measurement condition measurement start wavelength in nm. Returns: Type Description float The start wavelength in nm. Source code in pyinst\\models.py 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 def get_start_wavelength ( self ) -> float : \"\"\"Queries the measurement condition measurement start wavelength in nm. Returns: The start wavelength in nm. \"\"\" cmd = \":SENSe:WAVelength:STARt?\" if \"WAV\" == self . get_x_unit (): wl = float ( self . query ( cmd )) * 10 ** 9 else : wl = LIGHTSPEED / ( float ( self . query ( cmd )) / 10 ** 12 ) return wl","title":"get_start_wavelength()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_start_wavelength","text":"Sets the measurement condition measurement start wavelength in nm. Parameters: Name Type Description Default wavelength int | float The start wavelength in nm. required Source code in pyinst\\models.py 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 def set_start_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Sets the measurement condition measurement start wavelength in nm. Args: wavelength: The start wavelength in nm. \"\"\" if \"WAV\" == self . get_x_unit (): cmd = \":SENSe:WAVelength:STARt {wl:.6f} NM\" . format ( wl = wavelength ) self . command ( cmd ) else : self . set_stop_frequency ( LIGHTSPEED / wavelength )","title":"set_start_wavelength()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_stop_wavelength","text":"Queries the measurement condition measurement stop wavelength in nm. Returns: Type Description float The stop wavelength in nm. Source code in pyinst\\models.py 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 def get_stop_wavelength ( self ) -> float : \"\"\"Queries the measurement condition measurement stop wavelength in nm. Returns: The stop wavelength in nm. \"\"\" cmd = \":SENSe:WAVelength:STOP?\" if \"WAV\" == self . get_x_unit (): wl = float ( self . query ( cmd )) * 10 ** 9 else : wl = LIGHTSPEED / ( float ( self . query ( cmd )) / 10 ** 12 ) return wl","title":"get_stop_wavelength()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_stop_wavelength","text":"Sets the measurement condition measurement stop wavelength in nm. Parameters: Name Type Description Default wavelength int | float The stop wavelength in nm. required Source code in pyinst\\models.py 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 def set_stop_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Sets the measurement condition measurement stop wavelength in nm. Args: wavelength: The stop wavelength in nm. \"\"\" if \"WAV\" == self . get_x_unit (): cmd = \":SENSe:WAVelength:STOP {wl:.6f} NM\" . format ( wl = wavelength ) self . command ( cmd ) else : self . set_start_frequency ( LIGHTSPEED / wavelength )","title":"set_stop_wavelength()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_start_frequency","text":"Queries the measurement condition measurement start frequency in THz. Returns: Type Description float The start frequency in THz. Source code in pyinst\\models.py 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 def get_start_frequency ( self ) -> float : \"\"\"Queries the measurement condition measurement start frequency in THz. Returns: The start frequency in THz. \"\"\" cmd = \":SENSe:WAVelength:STOP?\" if \"FREQ\" == self . get_x_unit (): f = float ( self . query ( cmd )) / 10 ** 12 else : f = LIGHTSPEED / ( float ( self . query ( cmd )) * 10 ** 9 ) return f","title":"get_start_frequency()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_start_frequency","text":"Queries the measurement condition measurement start frequency in THz. Parameters: Name Type Description Default frequency int | float The start frequency in THz. required Source code in pyinst\\models.py 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 def set_start_frequency ( self , frequency : int | float ) -> None : \"\"\"Queries the measurement condition measurement start frequency in THz. Args: frequency: The start frequency in THz. \"\"\" if \"FREQ\" == self . get_x_unit (): cmd = \":SENSe:WAVelength:STOP {freq:.6f} THZ\" . format ( freq = frequency ) self . command ( cmd ) else : self . set_stop_wavelength ( LIGHTSPEED / frequency )","title":"set_start_frequency()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_stop_frequency","text":"Queries the measurement condition measurement stop frequency in THz. Returns: Type Description float The stop frequency in THz. Source code in pyinst\\models.py 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 def get_stop_frequency ( self ) -> float : \"\"\"Queries the measurement condition measurement stop frequency in THz. Returns: The stop frequency in THz. \"\"\" cmd = \":SENSe:WAVelength:STARt?\" if \"FREQ\" == self . get_x_unit (): f = float ( self . query ( cmd )) / 10 ** 12 else : f = LIGHTSPEED / ( float ( self . query ( cmd )) * 10 ** 9 ) return f","title":"get_stop_frequency()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_stop_frequency","text":"Queries the measurement condition measurement stop frequency in THz. Parameters: Name Type Description Default frequency int | float The stop frequency in THz. required Source code in pyinst\\models.py 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 def set_stop_frequency ( self , frequency : int | float ) -> None : \"\"\"Queries the measurement condition measurement stop frequency in THz. Args: frequency: The stop frequency in THz. \"\"\" if \"FREQ\" == self . get_x_unit (): cmd = \":SENSe:WAVelength:STARt {freq:.6f} THZ\" . format ( freq = frequency ) self . command ( cmd ) else : self . set_start_wavelength ( LIGHTSPEED / frequency )","title":"set_stop_frequency()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_marker_active_state","text":"Set the active state of a specified marker. A marker should be set into active state before further operations. Parameters: Name Type Description Default marker int Marker number. 1 | 2 | 3 | 4 . required state bool True = active, False = inactive. required Source code in pyinst\\models.py 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 def set_marker_active_state ( self , marker : int , state : bool ) -> None : \"\"\"Set the active state of a specified marker. A marker should be set into active state before further operations. Args: marker: Marker number. `1` | `2` | `3` | `4`. state: `True` = active, `False` = inactive. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) if not isinstance ( state , bool ): raise TypeError ( f \"Parameter state must be a bool, not ' { type ( state ) . __name__ } '.\" ) cmd = \":CALCULATE:MARKER:STATE {marker:d} , {state:d} \" self . command ( cmd )","title":"set_marker_active_state()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_marker_active_state","text":"Queries the active state of a specified marker. A marker should be set into active state before further operations. Parameters: Name Type Description Default marker int Marker number. 1 | 2 | 3 | 4 . required Returns: Type Description bool True = active, False = inactive. Source code in pyinst\\models.py 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 def get_marker_active_state ( self , marker : int ) -> bool : \"\"\"Queries the active state of a specified marker. A marker should be set into active state before further operations. Args: marker: Marker number. `1` | `2` | `3` | `4`. Returns: `True` = active, `False` = inactive. \"\"\" cmd = \":CALCulate:MARKer:STATe? {marker:d} \" . format ( marker = marker ) state = bool ( int ( self . query ( cmd ))) return state","title":"get_marker_active_state()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_marker_x_unit","text":"Queries the units of display for the marker values. Returns: Type Description str The unit of marker X. \"WAV\" | \"FREQ\" . Source code in pyinst\\models.py 3423 3424 3425 3426 3427 3428 3429 3430 3431 def get_marker_x_unit ( self ) -> str : \"\"\"Queries the units of display for the marker values. Returns: The unit of marker X. `\"WAV\"` | `\"FREQ\"`. \"\"\" cmd = \":CALCulate:MARKer:UNIT?\" unit = [ \"WAV\" , \"FREQ\" ][ int ( self . query ( cmd ))] return unit","title":"get_marker_x_unit()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_marker_x_unit","text":"Sets the units of display for the marker values. Parameters: Name Type Description Default unit str The unit of marker X. \"WAV\" | \"FREQ\" . required Source code in pyinst\\models.py 3433 3434 3435 3436 3437 3438 3439 3440 def set_marker_x_unit ( self , unit : str ) -> None : \"\"\"Sets the units of display for the marker values. Args: unit: The unit of marker X. `\"WAV\"` | `\"FREQ\"`. \"\"\" cmd = \":CALCulate:MARKer:UNIT {unit} \" . format ( unit = unit ) self . command ( cmd )","title":"set_marker_x_unit()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_marker_x","text":"Places a specified marker in a specified position. Parameters: Name Type Description Default marker int Marker number. 1 | 2 | 3 | 4 . required x int | float The x value to put the marker. required unit str The unit of x value. \"THZ\" or \"NM\" . required Source code in pyinst\\models.py 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 def set_marker_x ( self , marker : int , x : int | float , unit : str ): \"\"\"Places a specified marker in a specified position. Args: marker: Marker number. `1` | `2` | `3` | `4`. x: The x value to put the marker. unit: The unit of x value. `\"THZ\"` or `\"NM\"`. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) if unit not in [ 'NM' , 'THZ' ]: raise ValueError ( \"Invalid unit: {u!r} \" . format ( u = unit )) cmd = \":CALCulate:MARKer:X {marker:d} , {x:.6f}{unit} \" . format ( marker = marker , x = x , unit = unit ) self . command ( cmd )","title":"set_marker_x()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_marker_x","text":"Queries the X value of the specified marker. Parameters: Name Type Description Default marker int Marker number. 1 | 2 | 3 | 4 required Returns: Type Description float The X value of the specified marker. If marker x unit is float \"WAV\", returns the x value in nm. If x unit is \"FREQ\", float returns the x value in THz. float Please refer to get_marker_x_unit for information. Source code in pyinst\\models.py 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 def get_marker_x ( self , marker : int ) -> float : \"\"\"Queries the X value of the specified marker. Args: marker: Marker number. `1` | `2` | `3` | `4` Returns: The X value of the specified marker. If marker x unit is \"WAV\", returns the x value in nm. If x unit is \"FREQ\", returns the x value in THz. Please refer to `get_marker_x_unit` for information. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:X? {marker:d} \" . format ( marker = marker ) x_unit = self . get_marker_x_unit () if \"WAV\" == x_unit : x = float ( self . query ( cmd )) * 10 ** 9 else : x = float ( self . query ( cmd )) / 10 ** 12 return x","title":"get_marker_x()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_marker_y","text":"Queries the Y value of the specified marker. This unit of the marker level to be queried is dependent on the Y-axis unit of the active trace. Source code in pyinst\\models.py 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 def get_marker_y ( self , marker : int ) -> str : \"\"\"Queries the Y value of the specified marker. This unit of the marker level to be queried is dependent on the Y-axis unit of the active trace. \"\"\" if marker not in self . MARKER_NUMBERS : raise ValueError ( \"Invalid marker: {marker!r} \" . format ( marker = marker )) cmd = \":CALCulate:MARKer:Y? {marker:d} \" . format ( marker = marker ) y = float ( self . query ( cmd )) return y","title":"get_marker_y()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_y_scale_mode","text":"Sets the scale mode of the main scale of the level axis. Parameters: Name Type Description Default mode str The scale mode of level axis. \"LOG\" = Logarighmic, \"LIN\" = Linear. required Source code in pyinst\\models.py 3492 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 def set_y_scale_mode ( self , mode : str ) -> None : \"\"\"Sets the scale mode of the main scale of the level axis. Args: mode: The scale mode of level axis. `\"LOG\"` = Logarighmic, `\"LIN\"` = Linear. \"\"\" if mode not in ( \"LOG\" , \"LIN\" ): raise ValueError ( \"Invalid mode: {mode!r} \" . format ( mode = mode )) cmd = \":DISPlay:TRACe:Y1:SPACing {mode} \" . format ( mode = mode ) self . command ( cmd )","title":"set_y_scale_mode()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_y_scale_mode","text":"Queries the scale mode of the main scale of the level axis. Returns: Name Type Description mode str The scale mode of level axis. \"LOG\" = Logarighmic, \"LIN\" = Linear. Source code in pyinst\\models.py 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 def get_y_scale_mode ( self ) -> str : \"\"\"Queries the scale mode of the main scale of the level axis. Returns: mode: The scale mode of level axis. `\"LOG\"` = Logarighmic, `\"LIN\"` = Linear. \"\"\" cmd = \":DISPlay:TRACe:Y1:SPACing?\" mode = [ \"LOG\" , \"LIN\" ][ int ( self . query ( cmd ))] return mode","title":"get_y_scale_mode()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_peak_to_center","text":"Detects the peak wavelength and sets it as the measurement center waveform. Source code in pyinst\\models.py 3515 3516 3517 3518 3519 3520 def set_peak_to_center ( self ) -> None : \"\"\"Detects the peak wavelength and sets it as the measurement center waveform. \"\"\" cmd = \":CALCulate:MARKer:MAXimum:SCENter\" self . command ( cmd )","title":"set_peak_to_center()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_ref_level","text":"Sets the reference level of the main scale of the level axis. Parameters: Name Type Description Default value int | float The value of the ref level. required unit str The unit of the ref level. \"DBM\" | \"W\" | \"MW\" . required Source code in pyinst\\models.py 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 def set_ref_level ( self , value : int | float , unit : str ) -> None : \"\"\"Sets the reference level of the main scale of the level axis. Args: value: The value of the ref level. unit: The unit of the ref level. `\"DBM\"` | `\"W\"` | `\"MW\"`. \"\"\" if unit not in [ 'DBM' , 'W' , 'MW' ]: raise ValueError ( 'Invalid unit: {unit!r} ' . format ( unit = unit )) cmd = \":DISPlay:TRACe:Y1:RLEVel {value:.6E}{unit} \" . format ( value = value , unit = unit ) self . command ( cmd )","title":"set_ref_level()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_ref_level","text":"Sets/queries the reference level of the main scale of the level axis. Returns: Type Description float The value of the ref level in unit dBm or W depends on the Y scale str mode. Please refer to get_y_scale_mode for information. Source code in pyinst\\models.py 3534 3535 3536 3537 3538 3539 3540 3541 3542 3543 3544 def get_ref_level ( self ) -> Tuple [ float , str ]: \"\"\"Sets/queries the reference level of the main scale of the level axis. Returns: The value of the ref level in unit dBm or W depends on the Y scale mode. Please refer to `get_y_scale_mode` for information. \"\"\" cmd = \":DISPlay:TRACe:Y1:RLEVel?\" level = float ( self . query ( cmd )) return level","title":"get_ref_level()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_peak_to_ref","text":"Detects the peak level and sets it for the reference level. Source code in pyinst\\models.py 3546 3547 3548 3549 def set_peak_to_ref ( self ) -> None : \"\"\"Detects the peak level and sets it for the reference level.\"\"\" cmd = \":CALCulate:MARKer:MAXimum:SRLevel\" self . command ( cmd )","title":"set_peak_to_ref()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_auto_ref_level","text":"Sets ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Parameters: Name Type Description Default enable bool Whether to enable auto ref level. required Source code in pyinst\\models.py 3551 3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 def set_auto_ref_level ( self , enable : bool ) -> None : \"\"\"Sets ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Args: enable: Whether to enable auto ref level. \"\"\" if not isinstance ( enable , bool ): raise TypeError ( f \"Parameter enable must be a bool, not ' { type ( enable ) . __name__ } '.\" ) cmd = \":CALCulate:MARKer:MAXimum:SRLevel:AUTO {enable:d} \" . format ( enable = enable ) self . command ( cmd )","title":"set_auto_ref_level()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_auto_ref_level","text":"Queries ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Returns: Type Description bool If this function is enabled. Source code in pyinst\\models.py 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 def get_auto_ref_level ( self ) -> bool : \"\"\"Queries ON/OFF of the function to automatically detect the peak level and sets it as the reference level. Returns: If this function is enabled. \"\"\" cmd = \":CALCulate:MARKer:MAXimum:SRLevel:AUTO?\" enabled = bool ( int ( self . query ( cmd ))) return enabled","title":"get_auto_ref_level()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_resolution_bandwidth","text":"Queries the measurment resolution. Returns: Type Description float The resolution bandwidth. If x unit is \"WAV\", returns the float resolution in nm. If x unit is \"FREQ\", returns the resolution float in GHz. float Please refer to get_x_unit for more information. Source code in pyinst\\models.py 3574 3575 3576 3577 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 3588 3589 def get_resolution_bandwidth ( self ) -> float : \"\"\"Queries the measurment resolution. Returns: The resolution bandwidth. If x unit is \"WAV\", returns the resolution in nm. If x unit is \"FREQ\", returns the resolution in GHz. Please refer to `get_x_unit` for more information. \"\"\" cmd = \":SENSe:BANDwidth?\" if \"WAV\" == self . get_x_unit (): res = float ( self . query ( cmd )) * 10 ** 9 else : res = float ( self . query ( cmd )) / 10 ** 9 return res","title":"get_resolution_bandwidth()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_resolution_bandwidth","text":"Sets the measurment resolution. Parameters: Name Type Description Default bandwidth int | float The resolution bandwidth. required unit str \"NM\" or \"GHZ\" . required Source code in pyinst\\models.py 3591 3592 3593 3594 3595 3596 3597 3598 3599 3600 3601 3602 def set_resolution_bandwidth ( self , bandwidth : int | float , unit : str ) -> None : # TODO: verify if only particular values can be set. \"\"\"Sets the measurment resolution. Args: bandwidth: The resolution bandwidth. unit: `\"NM\"` or `\"GHZ\"`. \"\"\" if unit not in [ \"NM\" , \"GHZ\" ]: raise ValueError ( \"Invalid unit: {unit!r} \" . format ( unit = unit )) cmd = \":SENSe:BANDwidth {bandwidth:.6f}{unit} \" . format ( bandwidth = bandwidth , unit = unit ) self . command ( cmd )","title":"set_resolution_bandwidth()"},{"location":"api/models/#pyinst.models.ModelAQ6370.clear_all_markers","text":"Clears all markers. Source code in pyinst\\models.py 3604 3605 3606 def clear_all_markers ( self ) -> None : \"\"\"Clears all markers.\"\"\" self . command ( ':CALCulate:MARKer:AOFF' )","title":"clear_all_markers()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_active_trace","text":"Sets the active trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Source code in pyinst\\models.py 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 def set_active_trace ( self , trace_name : str ) -> None : \"\"\"Sets the active trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:ACTive {trace_name} ' . format ( trace_name = trace_name ) self . command ( cmd )","title":"set_active_trace()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_active_trace","text":"Queries the active trace. Returns: Type Description str The trace name, TRA | TRB | TRC | TRD | TRE | TRF | TRG . Source code in pyinst\\models.py 3619 3620 3621 3622 3623 3624 3625 3626 3627 def get_active_trace ( self ) -> str : \"\"\"Queries the active trace. Returns: The trace name, `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG`. \"\"\" cmd = ':TRACe:ACTive?' trace_name = self . query ( cmd ) . strip () return trace_name","title":"get_active_trace()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_trace_attribute","text":"Sets the attributes of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required attribute str WRIT | FIX | MAX | MIN | RAVG | CALC required Source code in pyinst\\models.py 3629 3630 3631 3632 3633 3634 3635 3636 3637 3638 3639 3640 3641 def set_trace_attribute ( self , trace_name : str , attribute : str ) -> None : \"\"\"Sets the attributes of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` attribute: `WRIT` | `FIX` | `MAX` | `MIN` | `RAVG` | `CALC` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) if attribute not in [ 'WRIT' , 'FIX' , 'MAX' , 'MIN' , 'RAVG' , 'CALC' ]: raise ValueError ( 'Invalid attribute: {attr!r} ' . format ( attr = attribute )) cmd = ':TRACe:ATTRibute: {trace} {attribute} ' . format ( trace = trace_name , attribute = attribute ) self . command ( cmd )","title":"set_trace_attribute()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_trace_attribute","text":"Queries the attributes of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Name Type Description attribute str WRIT | FIX | MAX | MIN | RAVG | CALC Source code in pyinst\\models.py 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 3653 3654 def get_trace_attribute ( self , trace_name : str ) -> str : \"\"\"Queries the attributes of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: attribute: `WRIT` | `FIX` | `MAX` | `MIN` | `RAVG` | `CALC` \"\"\" cmd = ':TRACe:ATTRibute: {trace} ?' . format ( trace = trace_name ) ATTRS = [ 'WRIT' , 'FIX' , 'MAX' , 'MIN' , 'RAVG' , 'CALC' ] attr = ATTRS [ int ( self . query ( cmd ))] return attr","title":"get_trace_attribute()"},{"location":"api/models/#pyinst.models.ModelAQ6370.set_trace_display_status","text":"Sets the display status of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required display bool Whether to display the trace. required Source code in pyinst\\models.py 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 def set_trace_display_status ( self , trace_name : str , display : bool ) -> None : \"\"\"Sets the display status of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` display: Whether to display the trace. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) if not isinstance ( display , bool ): raise TypeError ( f \"Parameter display must be a bool, not ' { type ( display ) . __name__ } '.\" ) cmd = ':TRACe:STATe: {trace_name} {display:d} ' . format ( trace_name = trace_name , display = display ) self . command ( cmd )","title":"set_trace_display_status()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_trace_display_status","text":"Queries the display status of the specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description bool Whether the trace is displayed. Source code in pyinst\\models.py 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 def get_trace_display_status ( self , trace_name : str ) -> bool : \"\"\"Queries the display status of the specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: Whether the trace is displayed. \"\"\" cmd = ':TRACe:STATe: {trace_name} ?' . format ( trace_name = trace_name ) displayed = bool ( int ( self . query ( cmd ))) return displayed","title":"get_trace_display_status()"},{"location":"api/models/#pyinst.models.ModelAQ6370.clear_trace","text":"Deletes the data of a specified trace. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Source code in pyinst\\models.py 3683 3684 3685 3686 3687 3688 3689 3690 3691 3692 def clear_trace ( self , trace_name : str ) -> None : \"\"\"Deletes the data of a specified trace. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:DELete {trace_name} ' . format ( trace_name = trace_name ) self . command ( cmd )","title":"clear_trace()"},{"location":"api/models/#pyinst.models.ModelAQ6370.clear_all_traces","text":"Clears the data for all traces. Source code in pyinst\\models.py 3694 3695 3696 def clear_all_traces ( self ) -> None : \"\"\"Clears the data for all traces. \"\"\" self . command ( ':TRACe:DELete:ALL' )","title":"clear_all_traces()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_trace_data_x","text":"Queries the wavelength axis data of the specified trace. Data is output in the unit of wavelength value (nm), regardless of whether this unit is in the wavelength mode or in the frequency mode. Parameters: Name Type Description Default trace_name str TRA | TRB | TRC | TRD | TRE | TRF | TRG required Returns: Type Description List [ float ] A list of the wavelength axis data in nm. Source code in pyinst\\models.py 3698 3699 3700 3701 3702 3703 3704 3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 def get_trace_data_x ( self , trace_name : str ) -> List [ float ]: \"\"\"Queries the wavelength axis data of the specified trace. Data is output in the unit of wavelength value (nm), regardless of whether this unit is in the wavelength mode or in the frequency mode. Args: trace_name: `TRA` | `TRB` | `TRC` | `TRD` | `TRE` | `TRF` | `TRG` Returns: A list of the wavelength axis data in nm. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:DATA:X? {trace_name} ' . format ( trace_name ) result = [ float ( i ) * 10 ** 9 for i in self . query ( cmd ) . split ( ',' )] return result","title":"get_trace_data_x()"},{"location":"api/models/#pyinst.models.ModelAQ6370.get_trace_data_y","text":"Queries the level axis data of specified trace. The data is output in order of its wavelength from the shortest level to the longest, irrespective of the wavelength/frequency mode. When the level scale is LOG, data is output in LOG values. When the level scale is Linear, data is output in linear values. Source code in pyinst\\models.py 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 def get_trace_data_y ( self , trace_name : str ) -> List [ float ]: \"\"\"Queries the level axis data of specified trace. The data is output in order of its wavelength from the shortest level to the longest, irrespective of the wavelength/frequency mode. When the level scale is LOG, data is output in LOG values. When the level scale is Linear, data is output in linear values. \"\"\" if trace_name not in [ 'TRA' , 'TRB' , 'TRC' , 'TRD' , 'TRE' , 'TRF' , 'TRG' ]: raise ValueError ( 'Invalid trace_name: {name!r} ' . format ( name = trace_name )) cmd = ':TRACe:DATA:Y? {trace_name} ' . format ( trace_name ) result = [ float ( i ) for i in self . query ( cmd ) . split ( ',' )] return result","title":"get_trace_data_y()"},{"location":"api/models/#pyinst.models.ModelAQ6370.capture_screen","text":"Capture the screen in BMP format and returns the iamge data as bytes. Returns: Type Description bytes The image data of the screen capture. Source code in pyinst\\models.py 3732 3733 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 def capture_screen ( self ) -> bytes : \"\"\"Capture the screen in BMP format and returns the iamge data as bytes. Returns: The image data of the screen capture. \"\"\" # create a unique name with nearly no chance to conflict temp_filename = 'tmp- {timestamp:X} ' . format ( timestamp = int ( time . time () * 10 ** 6 )) # save image to internal memory self . command ( ':MMEMORY:STORE:GRAPHICS COLOR,BMP,\" {filename} \",INTERNAL' . format ( filename = temp_filename )) self . opc # save data to PC bin_data = self . query ( ':MMEMORY:DATA? \" {filename} .BMP\",internal' . format ( filename = temp_filename ), bin = True ) bytes_data = bytes ( bin_data ) # delete temp file from internal memory self . command ( ':MMEMORY:DELETE \" {filename} .BMP\",internal' . format ( filename = temp_filename )) return bytes_data","title":"capture_screen()"},{"location":"api/models/#pyinst.models.ModelAQ6370.save_screen","text":"Capture the screen and save as a .bmp file. Parameters: Name Type Description Default file_path The file path to save the screen capture. required Source code in pyinst\\models.py 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 def save_screen ( self , file_path ): \"\"\"Capture the screen and save as a .bmp file. Args: file_path: The file path to save the screen capture. \"\"\" data = self . capture_screen () if os . path . exists ( file_path ): raise PermissionError ( 'The file path {path} already exists.' . format ( path = file_path )) with open ( file_path , 'wb' ) as f : f . write ( data )","title":"save_screen()"},{"location":"api/models/#pyinst.models.ModelAQ6150","text":"Bases: VisaInstrument , TypeWM Source code in pyinst\\models.py 3773 3774 def __init__ ( self , resource_name , ** kwargs ): super ( ModelAQ6150 , self ) . __init__ ( resource_name , ** kwargs )","title":"ModelAQ6150"},{"location":"api/models/#pyinst.models.ModelAQ6150.run","text":"Executes (stops) repeat measurement. Parameters: Name Type Description Default state bool True = Execute, False = Stop. True Source code in pyinst\\models.py 3776 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 def run ( self , state : bool = True ) -> None : \"\"\" Executes (stops) repeat measurement. Args: state: `True` = Execute, `False` = Stop. \"\"\" if not isinstance ( state , bool ): raise TypeError ( f \"Parameter state must be a bool, not ' { type ( state ) . __name__ } '.\" ) cmd = ':INITiate:CONTinuous {state:d} ' . format ( state = state ) self . command ( cmd )","title":"run()"},{"location":"api/models/#pyinst.models.ModelAQ6150.stop","text":"Stops repeat measurement. Source code in pyinst\\models.py 3788 3789 3790 3791 3792 def stop ( self ): \"\"\" Stops repeat measurement. \"\"\" self . run ( False )","title":"stop()"},{"location":"api/models/#pyinst.models.ModelAQ6150.is_running","text":"Queries the repeat measurement state. Returns: Type Description bool True = Execute, False = Stop. Source code in pyinst\\models.py 3794 3795 3796 3797 3798 3799 3800 3801 3802 3803 def is_running ( self ) -> bool : \"\"\" Queries the repeat measurement state. Returns: `True` = Execute, `False` = Stop. \"\"\" cmd = ':INITiate:CONTinuous?' state = bool ( int ( self . query ( cmd ))) return state","title":"is_running()"},{"location":"api/models/#pyinst.models.ModelAQ6150.get_frequency","text":"Queries the peak frequency in single view mode for single measurement. Returns: Type Description float The peak frequency in THz. Source code in pyinst\\models.py 3805 3806 3807 3808 3809 3810 3811 3812 3813 3814 3815 def get_frequency ( self ) -> float : \"\"\"Queries the peak frequency in single view mode for single measurement. Returns: The peak frequency in THz. \"\"\" cmd = \":MEASure:POWer:FREQuency?\" freq = float ( self . query ( cmd )) / 10 ** 12 if freq == 0 : raise ValueError ( 'No optical input signal.' ) return freq","title":"get_frequency()"},{"location":"api/models/#pyinst.models.ModelAQ6150.get_wavelength","text":"Queries the peak wavelength in single view mode for single measurement. Returns: Type Description The peak wavelength in nm. Source code in pyinst\\models.py 3817 3818 3819 3820 3821 3822 3823 3824 3825 3826 3827 def get_wavelength ( self ): \"\"\"Queries the peak wavelength in single view mode for single measurement. Returns: The peak wavelength in nm. \"\"\" cmd = \":MEASure:POWer:WAVelength?\" wl = float ( self . query ( cmd )) * 10 ** 9 if wl == 0 : raise ValueError ( 'No optical input signal.' ) return wl","title":"get_wavelength()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld","text":"Bases: BaseInstrument , TypeTS The base class for old chamber models by Espec MC-711 MT3065 Note Before communication, some configuration must be performed on the chamber: - Device ID: Correspond with the dev_id in the __init__ method. Defaults to 0. Parameters: Name Type Description Default resource_name str Serial port name. required dev_id int The device ID of the chamber. 0 baudrate Baud rate such as 9600 or 115200 etc.. required read_timeout int | float Timeout in milliseconds for read operations. 0.5 **kwargs Directly passed to serial.Serial() . {} Source code in pyinst\\models.py 3852 3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 def __init__ ( self , resource_name : str , dev_id : int = 0 , baud_rate : int = 19200 , read_timeout : int | float = 0.5 , ** kwargs ): \"\"\" Args: resource_name: Serial port name. dev_id: The device ID of the chamber. baudrate: Baud rate such as 9600 or 115200 etc.. read_timeout: Timeout in milliseconds for read operations. **kwargs: Directly passed to `serial.Serial()`. \"\"\" super ( BaseModelEspecOld , self ) . __init__ () if dev_id not in range ( 16 ): raise ValueError ( 'Device ID must be between 0 and 15' ) self . __dev_id = dev_id self . __serial = serial . Serial ( port = resource_name , baudrate = baud_rate , timeout = read_timeout , ** kwargs ) self . __serial . setRTS () self . __serial . setDTR () self . __serial . reset_input_buffer () self . __resource_name = resource_name","title":"BaseModelEspecOld"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.run","text":"TODO Source code in pyinst\\models.py 3904 3905 def run ( self , en : bool = True ) -> None : \"\"\"TODO\"\"\"","title":"run()"},{"location":"api/models/#pyinst.models.BaseModelEspecOld.is_running","text":"TODO Source code in pyinst\\models.py 3910 3911 def is_running ( self ) -> bool : \"\"\"TODO\"\"\"","title":"is_running()"},{"location":"api/models/#pyinst.models.ModelMC711","text":"Bases: BaseModelEspecOld See base class: [ BaseModelEspecOld ][pyinst.instrument_models.BaseModelEspecOld","title":"ModelMC711"},{"location":"api/models/#pyinst.models.ModelMT3065","text":"Bases: BaseModelEspecOld See base class: BaseModelEspecOld","title":"ModelMT3065"},{"location":"api/models/#pyinst.models.ModelMC811","text":"Bases: RawSerialInstrument , TypeTS MC-811 is a chamber model by GWS. Note Before communication, some configuration should be performed on the chamber. Communication: Serial Protocol: STEN Baudrate/Parity/Bytesize/Stopbits/Termination: Correspond with the settings in the __init__ method. Default values: baudrate = 19200 parity = NONE Bytesize = 8 bits Stopbits: 1 bit Termination: <CR><LF> Device ID: None Parameters: Name Type Description Default resource_name Serial port name. required baudrate Baud rate such as 9600 or 115200 etc.. 19200 bytesize SerialByteSize = SerialByteSize.EIGHTBITS, SerialByteSize.EIGHTBITS parity SerialParity = SerialParity.NONE, SerialParity.NONE stopbits SerialStopBits = SerialStopBits.ONE, SerialStopBits.ONE termination The write and read termination character. '\\r\\n' **kwargs Directly passed to RawSerialInstrument.__init__ . {} Source code in pyinst\\models.py 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 3999 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 def __init__ ( self , resource_name , baudrate = 19200 , bytesize = SerialByteSize . EIGHTBITS , parity = SerialParity . NONE , stopbits = SerialStopBits . ONE , termination = ' \\r\\n ' , ** kwargs ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. bytesize: SerialByteSize = SerialByteSize.EIGHTBITS, parity: SerialParity = SerialParity.NONE, stopbits: SerialStopBits = SerialStopBits.ONE, termination: The write and read termination character. **kwargs: Directly passed to `RawSerialInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , baudrate = baudrate , bytesize = bytesize , parity = parity , stopbits = stopbits , write_termination = termination , read_termination = termination , ** kwargs )","title":"ModelMC811"},{"location":"api/models/#pyinst.models.ModelMC811.run","text":"TODO Source code in pyinst\\models.py 4027 4028 def run ( self , en : bool = True ) -> None : \"\"\"TODO\"\"\"","title":"run()"},{"location":"api/models/#pyinst.models.ModelMC811.is_running","text":"TODO Source code in pyinst\\models.py 4033 4034 def is_running ( self ) -> bool : \"\"\"TODO\"\"\"","title":"is_running()"},{"location":"api/models/#pyinst.models.ModelATS535","text":"Bases: VisaInstrument , TypeTS ATS-535 is a thermo-stream model by Temptronic. Note that before operating with temperature directly (means not in Cycle mode), you should set the thermo-stream to the Operator screen, and make sure the test head is lower down, and the air flow is on. Examples: ts = ModelATS535 ( '<resource-name>' ) ts . reset_operator () # check the test head is down if not ts . is_head_down (): raise OperationalError ( 'The thermo-stream test head is up.' ) # turn on the air flow ts . flow () # operate with the temperature directly ts . set_target_temp ( 35 ) t = ts . get_current_temp () Parameters: Name Type Description Default resource_name Resource name or alias of the VISA resource to open. required **kwargs directly passed to VisaInstrument.__init__ {} Source code in pyinst\\models.py 4083 4084 4085 4086 4087 4088 4089 def __init__ ( self , resource_name , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. **kwargs: directly passed to `VisaInstrument.__init__` \"\"\" super ( ModelATS535 , self ) . __init__ ( resource_name , ** kwargs )","title":"ModelATS535"},{"location":"api/models/#pyinst.models.ModelATS535.head_up","text":"Raise up the test head. Source code in pyinst\\models.py 4095 4096 4097 def head_up ( self ) -> None : \"\"\"Raise up the test head.\"\"\" self . command ( 'HEAD 0' )","title":"head_up()"},{"location":"api/models/#pyinst.models.ModelATS535.head_down","text":"Lower down the test head. Source code in pyinst\\models.py 4099 4100 4101 def head_down ( self ) -> None : \"\"\"Lower down the test head.\"\"\" self . command ( 'HEAD 1' )","title":"head_down()"},{"location":"api/models/#pyinst.models.ModelATS535.is_head_down","text":"Queries if the test head is lowered down. Returns: Type Description bool If the test head is lowered down. Source code in pyinst\\models.py 4103 4104 4105 4106 4107 4108 4109 4110 def is_head_down ( self ) -> bool : \"\"\"Queries if the test head is lowered down. Returns: If the test head is lowered down. \"\"\" is_down = bool ( int ( self . query ( 'HEAD?' ))) return is_down","title":"is_head_down()"},{"location":"api/models/#pyinst.models.ModelATS535.flow","text":"Turn the main nozzle air flow on or off. Parameters: Name Type Description Default on bool True = turn on, False = turn off. True Source code in pyinst\\models.py 4112 4113 4114 4115 4116 4117 4118 4119 def flow ( self , on : bool = True ) -> None : \"\"\"Turn the main nozzle air flow on or off. Args: on: `True` = turn on, `False` = turn off. \"\"\" cmd = 'FLOW {:d} ' . format ( on ) self . command ( cmd )","title":"flow()"},{"location":"api/models/#pyinst.models.ModelATS535.enable_dut_mode","text":"Enable (disable) DUT mode. Parameters: Name Type Description Default en bool True = DUT mode on (DUT control); False = DUT mode off (air control). True Source code in pyinst\\models.py 4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 def enable_dut_mode ( self , en : bool = True ) -> None : \"\"\"Enable (disable) DUT mode. Args: en: True = DUT mode on (DUT control); False = DUT mode off (air control). \"\"\" if not isinstance ( en , bool ): raise TypeError ( f \"Parameter en must be a bool, not ' { type ( en ) . __name__ } '.\" ) cmd = 'DUTM {en:d} ' . format ( en = en ) self . command ( cmd )","title":"enable_dut_mode()"},{"location":"api/models/#pyinst.models.ModelATS535.is_dut_mode","text":"Queries if DUT mode is on. Returns: Type Description bool True = DUT mode on (DUT control); False = DUT mode off (air control). Source code in pyinst\\models.py 4132 4133 4134 4135 4136 4137 4138 4139 def is_dut_mode ( self ) -> bool : \"\"\"Queries if DUT mode is on. Returns: True = DUT mode on (DUT control); False = DUT mode off (air control). \"\"\" state = bool ( int ( self . query ( 'DUTM?' ))) return state","title":"is_dut_mode()"},{"location":"api/models/#pyinst.models.ModelATS535.disable_dut_mode","text":"Disable DUT mode. Source code in pyinst\\models.py 4141 4142 4143 def disable_dut_mode ( self ) -> None : \"\"\"Disable DUT mode.\"\"\" self . enable_dut_mode ( False )","title":"disable_dut_mode()"},{"location":"api/models/#pyinst.models.ModelATS535.reset_operator","text":"Reset (force) the System to the Operator screen. Source code in pyinst\\models.py 4145 4146 4147 4148 def reset_operator ( self ) -> None : \"\"\"Reset (force) the System to the Operator screen.\"\"\" self . command ( 'RSTO' ) time . sleep ( 0.3 )","title":"reset_operator()"},{"location":"api/models/#pyinst.models.ModelATS535.set_n","text":"Select a setpoint to be the current setpoint. Parameters: Name Type Description Default n int n is 0 - 17 when on the Cycle screen. n is 0 to 2 when on the Operator screen (0=hot, 1=ambient, 2=cold). required Source code in pyinst\\models.py 4154 4155 4156 4157 4158 4159 4160 4161 4162 def set_n ( self , n : int ) -> None : \"\"\"Select a setpoint to be the current setpoint. Args: n: - n is 0 - 17 when on the Cycle screen. - n is 0 to 2 when on the Operator screen (0=hot, 1=ambient, 2=cold). \"\"\" return self . command ( 'SETN %d ' % n )","title":"set_n()"},{"location":"api/models/#pyinst.models.ModelATS535.set_p","text":"Set the currently selected setpoint's temperature. Source code in pyinst\\models.py 4164 4165 4166 def set_p ( self , p : int | float ) -> None : \"\"\"Set the currently selected setpoint's temperature.\"\"\" return self . command ( 'SETP %.1f ' % p )","title":"set_p()"},{"location":"api/models/#pyinst.models.ModelATS535.get_p_setting","text":"Read the current temperature setpoint. Source code in pyinst\\models.py 4168 4169 4170 4171 def get_p_setting ( self ) -> float : \"\"\"Read the current temperature setpoint.\"\"\" p = float ( self . query ( 'SETP?' )) return p","title":"get_p_setting()"},{"location":"api/models/#pyinst.models.ModelATS535.set_ramp","text":"Set the ramp rate for the currently selected setpoint, in \u00b0C per minute. Parameters: Name Type Description Default ramp int | float The ramp rate in \u00b0C per minute. required Source code in pyinst\\models.py 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 def set_ramp ( self , ramp : int | float ) -> None : \"\"\"Set the ramp rate for the currently selected setpoint, in \u00b0C per minute. Args: ramp: The ramp rate in \u00b0C per minute. \"\"\" if 0 <= ramp <= 99.9 : t = ' {:.1f} ' . format ( ramp ) elif 99.9 < ramp <= 9999 : t = ' {:d} ' . format ( ramp ) else : raise ValueError ( 'Parameter ramp out of range.' ) return self . command ( 'RAMP {} ' . format ( t ))","title":"set_ramp()"},{"location":"api/models/#pyinst.models.ModelATS535.get_ramp","text":"Read the setting of RAMP. Returns: Type Description float The ramp rate in \u00b0C per minute. Source code in pyinst\\models.py 4188 4189 4190 4191 4192 4193 4194 4195 4196 def get_ramp ( self ) -> float : \"\"\"Read the setting of RAMP. Returns: The ramp rate in \u00b0C per minute. \"\"\" cmd = 'RAMP?' ramp = float ( self . query ( cmd )) return ramp","title":"get_ramp()"},{"location":"api/models/#pyinst.models.ModelTC3625","text":"Bases: RawSerialInstrument , TypeTS TC-36-25 is a TEC model by TE Technology. You may have to configure some parameters via the GUI provided by the vendor before your first use, this class will only perform the temperature control. Parameters: Name Type Description Default resource_name Serial port name. required baudrate Baud rate such as 9600 or 115200 etc.. 9600 read_termination Read termination character. '^' write_termination Write termination character. '\\r' Source code in pyinst\\models.py 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 4250 def __init__ ( self , resource_name , baudrate = 9600 , read_termination = '^' , write_termination = ' \\r ' , ** kwargs ): \"\"\" Args: resource_name: Serial port name. baudrate: Baud rate such as 9600 or 115200 etc.. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super ( ModelTC3625 , self ) . __init__ ( resource_name , baudrate = baudrate , read_termination = read_termination , write_termination = write_termination , ** kwargs )","title":"ModelTC3625"},{"location":"api/models/#pyinst.models.ModelTC3625.formatted_query","text":"Send a formated command to the TEC and return the result value. Parameters: Name Type Description Default cmd_code int Comand code is an int between 0 and 0xFF. required value int An int value sent with the command. Defaults to 0 if it is not needed. Between -0x80000000 and 0x7FFFFFFF. 0 Returns: Type Description int The Source code in pyinst\\models.py 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 def formatted_query ( self , cmd_code : int , value : int = 0 ) -> int : \"\"\" Send a formated command to the TEC and return the result value. Args: cmd_code: Comand code is an int between 0 and 0xFF. value: An int value sent with the command. Defaults to 0 if it is not needed. Between -0x80000000 and 0x7FFFFFFF. Returns: The \"\"\" if not 0 <= value <= 0xFF : raise ValueError ( 'Parameter cmd_code out of range: {!r} ' . format ( cmd_code )) if not - 0x80000000 <= value <= 0x7FFFFFFF : raise ValueError ( 'Parameter value out of range: {!r} ' . format ( value )) STX = '*' # Start of text character that always prepend to the cmd. ADDR = 0 # The address of this device is fixed to 0 cmd_body = ' {addr:02x}{cmd_code:02x}{val:08x} ' . format ( addr = ADDR , cmd_code = cmd_code , val = signed_to_unsigned ( value , byte_count = 4 )) check_sum = calc_check_sum ( cmd_body . encode ()) cmd = ' {pre}{cmd_body}{check_sum:02x} ' . format ( pre = STX , cmd_body = cmd_body , check_sum = check_sum ) result = self . query ( cmd )[ 1 :] result_content = result [ 0 : - 2 ] result_check_sum = int ( result [ - 2 :], base = 16 ) calculated_check_sum = calc_check_sum ( result_content . encode ()) if result_check_sum != calculated_check_sum : raise ValueError ( \"Mismatched checksum of the reply.\" ) if result_content == \"X\" * 8 : raise ValueError ( \"Mismatched checksum of the command.\" ) result_value = unsigned_to_signed ( int ( result_content , base = 16 ), 4 ) return result_value","title":"formatted_query()"},{"location":"api/models/#pyinst.models.BaseModelSantecBandwidthTunableFilter","text":"Bases: VisaInstrument , TypeOTF Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' Source code in pyinst\\models.py 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super () . __init__ ( resource_name , read_termination = read_termination , write_termination = write_termination , ** kwargs )","title":"BaseModelSantecBandwidthTunableFilter"},{"location":"api/models/#pyinst.models.ModelOTF930","text":"Bases: VisaInstrument , TypeOTF Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required read_termination str Read termination character. '\\r\\n' write_termination str Write termination character. '\\r\\n' Source code in pyinst\\models.py 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. read_termination: Read termination character. write_termination: Write termination character. \"\"\" super () . __init__ ( resource_name , read_termination = read_termination , write_termination = write_termination , ** kwargs )","title":"ModelOTF930"},{"location":"api/models/#pyinst.models.ModelNSW","text":"Bases: BaseInstrument , TypeSW The Smart Optical Switch produced by NeoPhotonics. Parameters: Name Type Description Default resource_name str The USB S/N of the device. You can use get_usb_devices() method to list all the available devices. required slot_or_type int | str For optical switch with 1x2/2x2/1x4 optical switch slots, this parameter is the slot in the frame. For 1x8 and 1x16 optical switch, this parameter defines the type of the optical switch. - 1 | 2 | 3 : The slot in the frame. - '1 8': This optical switch is 1x8 type. - '1 16': This optical switch is 1x16 type. required Source code in pyinst\\models.py 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 4669 4670 4671 4672 4673 4674 4675 4676 4677 4678 4679 4680 4681 4682 def __init__ ( self , resource_name : str , slot_or_type : int | str ) -> None : \"\"\" Args: resource_name: The USB S/N of the device. You can use get_usb_devices() method to list all the available devices. slot_or_type: For optical switch with 1x2/2x2/1x4 optical switch slots, this parameter is the slot in the frame. For 1x8 and 1x16 optical switch, this parameter defines the type of the optical switch. - `1`|`2`|`3`: The slot in the frame. - '1*8': This optical switch is 1x8 type. - '1*16': This optical switch is 1x16 type. \"\"\" super ( ModelNSW , self ) . __init__ () if isinstance ( slot_or_type , int ): self . __index = slot_or_type - 1 else : index_map = { '1' : 0 , '2' : 1 , '3' : 2 , '1*8' : 3 , '1*16' : 4 , } try : self . __index = index_map [ slot_or_type ] except KeyError : raise KeyError ( 'Invalid value for slot_or_type: %r ' % slot_or_type ) self . __usb_dev = NeoUsbDevice ( resource_name ) self . __reg_ch_sel = 16 * self . __index + 130","title":"ModelNSW"},{"location":"api/models/#pyinst.models.ModelNSW.resource_name","text":"The USB S/N of the device. Source code in pyinst\\models.py 4684 4685 4686 4687 @property def resource_name ( self ) -> str : \"\"\"The USB S/N of the device.\"\"\" return super () . resource_name","title":"resource_name()"},{"location":"api/models/#pyinst.models.ModelNSW.get_usb_devices","text":"The USB S/N of all the available devices. Source code in pyinst\\models.py 4689 4690 4691 4692 @classmethod def get_usb_devices ( cls ) -> List [ str ]: \"\"\"The USB S/N of all the available devices.\"\"\" return [ i [ \"Serial Number\" ] . upper () for i in NeoUsbDevice . get_devices_information ()]","title":"get_usb_devices()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1","text":"Bases: VisaInstrument , TypeMSW mOSX-C1 is a optical matrix switch by VIAVI. Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required slot int The slot number in the frame. required kwargs: directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 4761 4762 4763 4764 4765 4766 4767 4768 4769 def __init__ ( self , resource_name : str , slot : int , ** kwargs ) -> None : \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. slot: The slot number in the frame. :kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super ( ModelMAP_mOSX_C1 , self ) . __init__ ( resource_name , ** kwargs ) self . __device = ' {slot:d} , {device} ' . format ( slot = slot , device = 1 )","title":"ModelMAP_mOSX_C1"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.get_switch_topology","text":"Returns the configured switch topology Returns: Name Type Description M int number of input ports N int number of output ports Notes For common connection mode, M = total number of ports, N = 0. Source code in pyinst\\models.py 4771 4772 4773 4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 def get_switch_topology ( self ) -> Tuple [ int , int ]: \"\"\" Returns the configured switch topology Returns: M: number of input ports N: number of output ports Notes: For common connection mode, M = total number of ports, N = 0. \"\"\" cmd = ':MODUle:TYPE? {device} ' . format ( device = self . __device ) rpl = self . query ( cmd ) config = tuple ( int ( i ) for i in rpl . split ( ',' )) return config","title":"get_switch_topology()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.set_switch_topology","text":"Sets the switch topology to emulate an MxN switch or common connection. All the channels will be cleared after topology changed. Parameters: Name Type Description Default n_in int Number of input ports (0 for common connection mode). required n_out int Number of output ports (0 for common connection mode). required Source code in pyinst\\models.py 4787 4788 4789 4790 4791 4792 4793 4794 4795 4796 4797 4798 4799 4800 4801 def set_switch_topology ( self , n_in : int , n_out : int ) -> None : \"\"\" Sets the switch topology to emulate an MxN switch or common connection. All the channels will be cleared after topology changed. Args: n_in: Number of input ports (0 for common connection mode). n_out: Number of output ports (0 for common connection mode). \"\"\" cmd = ':MODUle:TYPe {device} , {n_in} , {n_out} ' . format ( device = self . __device , n_in = n_in , n_out = n_out ) self . command ( cmd )","title":"set_switch_topology()"},{"location":"api/models/#pyinst.models.ModelMAP_mOSX_C1.list_channels","text":"Returns a list of all configured connections and their status. Returns: Type Description List [ Tuple [ int , int , bool ]] All configured connections and their status. [(port1, port2, state), ...]. List [ Tuple [ int , int , bool ]] For state, False = Disabled, True = Enabled. Source code in pyinst\\models.py 4803 4804 4805 4806 4807 4808 4809 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 def list_channels ( self ) -> List [ Tuple [ int , int , bool ]]: \"\"\" Returns a list of all configured connections and their status. Returns: All configured connections and their status. [(port1, port2, state), ...]. For state, False = Disabled, True = Enabled. \"\"\" cmd = ':ROUTe:LIST? {device} ' . format ( device = self . __device ) rpl = self . query ( cmd ) channels = [] for s in rpl . split ( ',' ): spl = s . split () port1 , port2 = ( int ( i ) for i in spl [ 0 ] . split ( '-' )) state = bool ( int ( spl [ 1 ])) channels . append (( port1 , port2 , state )) return channels","title":"list_channels()"},{"location":"api/models/#pyinst.models.ModelE3631A","text":"Bases: VisaInstrument , TypePS Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required port int The port number among three output ports. - 1 : +6V - 2 : +25V - 3 : -25V required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899 4900 4901 4902 4903 def __init__ ( self , resource_name : str , port : int , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. port: The port number among three output ports. - `1`: +6V - `2`: +25V - `3`: -25V kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , ** kwargs ) if port not in { 1 , 2 , 3 }: raise ValueError ( f \"Invalid parameter port: { port !r} \" ) self . __port = port","title":"ModelE3631A"},{"location":"api/models/#pyinst.models.ModelE3631A.port","text":"The selected port number among three output ports. Source code in pyinst\\models.py 4913 4914 4915 4916 @property def port ( self ): \"\"\"The selected port number among three output ports.\"\"\" return self . __port","title":"port()"},{"location":"api/models/#pyinst.models.ModelE3633A","text":"Bases: VisaInstrument , TypePSwithOvpOcpFunctions Parameters: Name Type Description Default resource_name str Resource name or alias of the VISA resource to open. required kwargs directly passed to VisaInstrument.__init__ . required Source code in pyinst\\models.py 5011 5012 5013 5014 5015 5016 5017 def __init__ ( self , resource_name : str , ** kwargs ): \"\"\" Args: resource_name: Resource name or alias of the VISA resource to open. kwargs: directly passed to `VisaInstrument.__init__`. \"\"\" super () . __init__ ( resource_name , ** kwargs )","title":"ModelE3633A"},{"location":"api/models/#pyinst.models.ModelE3633A.set_output_range","text":"Selects an output range to be programmed. Note For model E3633A, the programming ranges are: LOW: 0 V to 8.24 V, 0 A to 20.60 A HIGH: 0 V to 20.60 V, 0 A to 10.30 A Parameters: Name Type Description Default option str \"LOW\" | \"HIGH\" required Source code in pyinst\\models.py 5019 5020 5021 5022 5023 5024 5025 5026 5027 5028 5029 5030 5031 5032 def set_output_range ( self , option : str ) -> None : \"\"\"Selects an output range to be programmed. Note: For model E3633A, the programming ranges are: - LOW: 0 V to 8.24 V, 0 A to 20.60 A - HIGH: 0 V to 20.60 V, 0 A to 10.30 A Args: option: `\"LOW\"` | `\"HIGH\"` \"\"\" cmd = f \":VOLTage:RANGe { option } \" self . command ( cmd )","title":"set_output_range()"},{"location":"api/models/#pyinst.models.ModelE3633A.get_output_range","text":"Queries current selected output range. Please refer to set_output_range() for more information. Returns: Type Description str \"LOW\" | \"HIGH\" Source code in pyinst\\models.py 5034 5035 5036 5037 5038 5039 5040 5041 def get_output_range ( self ) -> str : \"\"\"Queries current selected output range. Please refer to `set_output_range()` for more information. Returns: `\"LOW\"` | `\"HIGH\"` \"\"\"","title":"get_output_range()"},{"location":"api/models/#pyinst.models.ModelPSY201","text":"Bases: VisaInstrument , TypePOLC Source code in pyinst\\models.py 5268 5269 5270 5271 def __init__ ( self , resource_name : str , write_termination : str = ' \\r\\n ' , read_termination : str = ' \\r\\n ' , ** kwargs ): super ( ModelPSY201 , self ) . __init__ ( resource_name , write_termination = write_termination , read_termination = read_termination , ** kwargs )","title":"ModelPSY201"},{"location":"api/models/#pyinst.models.ModelPSY201.set_wavelength","text":"Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Parameters: Name Type Description Default wavelength int | float The optical wavelength in nm. required Source code in pyinst\\models.py 5300 5301 5302 5303 5304 5305 5306 5307 5308 5309 5310 def set_wavelength ( self , wavelength : int | float ) -> None : \"\"\"Set optical wavelength value. Wavelength setting rounds to the nearest multiple of 5. Args: wavelength: The optical wavelength in nm. \"\"\" if not self . min_wavelength <= wavelength <= self . max_wavelength : raise ValueError ( f \"Parameter wavelength is out of range: { wavelength !r} \" ) cmd = f \":CONFigure:WLENgth { wavelength : d } \" self . command ( cmd )","title":"set_wavelength()"},{"location":"api/models/#pyinst.models.ModelPSY201.get_sop","text":"Query measured SOP (Stokes parameters) S1, S2, S3. Returns: Type Description Tuple [ float , float , float ] The stokes parameters S1, S2, S3. Source code in pyinst\\models.py 5366 5367 5368 5369 5370 5371 5372 5373 5374 def get_sop ( self ) -> Tuple [ float , float , float ]: \"\"\"Query measured SOP (Stokes parameters) S1, S2, S3. Returns: The stokes parameters S1, S2, S3. \"\"\" cmd = \":MEASure:SOP? \" s1 , s2 , s3 = ( float ( i ) for i in self . query ( cmd ) . split ( ',' )) return s1 , s2 , s3","title":"get_sop()"},{"location":"api/models/#pyinst.models.ModelPSY201.get_dop","text":"Query measured degree of polarization. Returns: Type Description float The degree of polarization. Source code in pyinst\\models.py 5376 5377 5378 5379 5380 5381 5382 5383 5384 def get_dop ( self ) -> float : \"\"\"Query measured degree of polarization. Returns: The degree of polarization. \"\"\" cmd = ':MEASure:DOP?' dop = float ( self . query ( cmd )) return dop","title":"get_dop()"},{"location":"api/models/#pyinst.models.ModelPSY201.set_sop","text":"Set SOP by Stokes parameters and enable tracking. Parameters: Name Type Description Default s1 int | float 1st dimention of the Stokes parameters. required s2 int | float 2nd dimention of the Stokes parameters. required s3 int | float 3rd dimention of the Stokes parameters. required Tips Stokes parameters are auto-normalized to unit vector before tracking: SOP will be set to (s1/A, s2/A, s3/A) where A = sqrt(s1*s1, s2*s2, s3*s3) Note s1=s2=s3=0 is not allowed. Source code in pyinst\\models.py 5386 5387 5388 5389 5390 5391 5392 5393 5394 5395 5396 5397 5398 5399 5400 5401 5402 5403 5404 5405 5406 5407 5408 def set_sop ( self , s1 : int | float , s2 : int | float , s3 : int | float ) -> None : \"\"\"Set SOP by Stokes parameters and enable tracking. Args: s1: 1st dimention of the Stokes parameters. s2: 2nd dimention of the Stokes parameters. s3: 3rd dimention of the Stokes parameters. Tips: Stokes parameters are auto-normalized to unit vector before tracking: SOP will be set to `(s1/A, s2/A, s3/A)` where `A = sqrt(s1*s1, s2*s2, s3*s3)` Note: `s1=s2=s3=0` is not allowed. \"\"\" if s1 == s2 == s3 == 0 : raise ValueError ( \"s1=s2=s3=0 is not allowed.\" ) cmd = f \":CONTrol:SOP { s1 : .2f } , { s2 : .2f } , { s3 : .2f } \" self . command ( cmd )","title":"set_sop()"},{"location":"api/models/#pyinst.models.ModelPSY201.set_sop_in_spherical","text":"Set SOP in spherical coordinates and enable tracking. Parameters: Name Type Description Default theta int | float 1st dimension in degree of the spherical coordinates. 0 to 360 (degrees). required phi int | float 2nd dimention in degree of the spherical cordinates. 0 to 180 (degrees). required Source code in pyinst\\models.py 5410 5411 5412 5413 5414 5415 5416 5417 5418 5419 5420 5421 5422 def set_sop_in_spherical ( self , theta : int | float , phi : int | float ) -> None : \"\"\" Set SOP in spherical coordinates and enable tracking. Args: theta: 1st dimension in degree of the spherical coordinates. 0 to 360 (degrees). phi: 2nd dimention in degree of the spherical cordinates. 0 to 180 (degrees). \"\"\" if not 0 <= theta <= 360 : raise ValueError ( f \"Parameter theta is out of range: { theta !r} \" ) if not 0 <= phi <= 180 : raise ValueError ( f \"Parameter phi is out of range: { phi !r} \" ) cmd = f \":CONTrol:ANGLe { theta : .2f } , { phi : .2f } \" self . command ( cmd )","title":"set_sop_in_spherical()"},{"location":"api/models/#pyinst.models.ModelPSY201.start_scrambling","text":"Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. DISCrete : Discrete scrambling. TRIangle : Triangle scrambling. TORNado : Tornado scrambling. Additional scrambling parameter _type is required. required rate int | float Scrambling rate. Different mode may have different units. required params Additional scrambling params if any. _type (int) : For TORNado mode only. 0 = Fixed axis, 1 = Rotating axis. required Note Different mode has different unit for scrambling rate: Discrete: points/s Triangle: 2\u03c0 rad/s Tornado: rev/s Source code in pyinst\\models.py 5424 5425 5426 5427 5428 5429 5430 5431 5432 5433 5434 5435 5436 5437 5438 5439 5440 5441 5442 5443 5444 5445 5446 5447 5448 5449 5450 5451 5452 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `DISCrete`: Discrete scrambling. - `TRIangle`: Triangle scrambling. - `TORNado`: Tornado scrambling. Additional scrambling parameter `_type` is required. rate: Scrambling rate. Different mode may have different units. params: Additional scrambling params if any. * `_type (int)`: For `TORNado` mode only. `0` = Fixed axis, `1` = Rotating axis. Note: Different mode has different unit for scrambling rate: - Discrete: points/s - Triangle: 2\u03c0 rad/s - Tornado: rev/s \"\"\" if mode . upper () . startswith ( 'DISC' ): self . _discrete_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TRI' ): self . _triangle_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TORN' ): self . _tornado_scramble ( True , _type = params [ '_type' ], rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" )","title":"start_scrambling()"},{"location":"api/models/#pyinst.models.ModelPSY101","text":"Bases: VisaInstrument , TypePOLC Source code in pyinst\\models.py 5469 5470 def __init__ ( self , resource_name : str , read_termination : str = '#' , write_termination : str = '' , ** kwargs ): super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs )","title":"ModelPSY101"},{"location":"api/models/#pyinst.models.ModelPSY101.start_scrambling","text":"Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. RANdom : Random scrambling. SAW : Saw wave scrambling. required rate int | float Scrambling rate in Hz. required params Not used for PSY-101. required Source code in pyinst\\models.py 5550 5551 5552 5553 5554 5555 5556 5557 5558 5559 5560 5561 5562 5563 5564 5565 5566 5567 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `RANdom`: Random scrambling. - `SAW`: Saw wave scrambling. rate: Scrambling rate in Hz. params: Not used for PSY-101. \"\"\" if mode . upper () . startswith ( 'RAN' ): self . _random_scramble ( True , rate = rate ) if mode . upper () . startswith ( 'SAW' ): self . _saw_scramble ( True , rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" )","title":"start_scrambling()"},{"location":"api/models/#pyinst.models.ModelMPC202","text":"Bases: VisaInstrument , TypePOLC Source code in pyinst\\models.py 5588 5589 def __init__ ( self , resource_name : str , read_termination : str = ' \\r\\n ' , write_termination : str = ' \\r\\n ' , ** kwargs ): super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs )","title":"ModelMPC202"},{"location":"api/models/#pyinst.models.ModelMPC202.start_scrambling","text":"Start scrambling with specified mode and speed. Parameters: Name Type Description Default mode str Scrambling mode. DISCrete : Discrete scrambling. TRIangle : Triangle scrambling. RAYLeigh : Rayleigh scrambling. TORNado : Tornado scrambling. Additional scrambling parameter _type is required. required rate int | float Scrambling rate. Different mode may have different units. required params Additional scrambling params if any. _type (int) : For TORNado mode only. 0 = Fixed axis, 1 = Rotating axis. required Note Different mode has different unit for scrambling rate: Discrete: points/s Triangle: 2\u03c0 rad/s Rayleigh: rad/s Tornado: rev/s Source code in pyinst\\models.py 5694 5695 5696 5697 5698 5699 5700 5701 5702 5703 5704 5705 5706 5707 5708 5709 5710 5711 5712 5713 5714 5715 5716 5717 5718 5719 5720 5721 5722 5723 5724 5725 5726 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : \"\"\"Start scrambling with specified mode and speed. Args: mode: Scrambling mode. - `DISCrete`: Discrete scrambling. - `TRIangle`: Triangle scrambling. - `RAYLeigh`: Rayleigh scrambling. - `TORNado`: Tornado scrambling. Additional scrambling parameter `_type` is required. rate: Scrambling rate. Different mode may have different units. params: Additional scrambling params if any. * `_type (int)`: For `TORNado` mode only. `0` = Fixed axis, `1` = Rotating axis. Note: Different mode has different unit for scrambling rate: - Discrete: points/s - Triangle: 2\u03c0 rad/s - Rayleigh: rad/s - Tornado: rev/s \"\"\" if mode . upper () . startswith ( 'DISC' ): self . _discrete_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TRI' ): self . _triangle_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'RAYL' ): self . _rayleigh_scramble ( True , rate = rate ) elif mode . upper () . startswith ( 'TORN' ): self . _tornado_scramble ( True , _type = params [ '_type' ], rate = rate ) else : raise ValueError ( f \"Invalid mode: { mode !r} \" )","title":"start_scrambling()"},{"location":"api/models/#pyinst.models.ModelEPS1000","text":"Bases: BaseInstrument , TypePOLC Source code in pyinst\\models.py 5744 5745 5746 5747 5748 5749 5750 5751 5752 5753 5754 5755 5756 5757 5758 5759 5760 5761 5762 5763 5764 5765 5766 5767 def __init__ ( self , resource_name : str , timeout = 3 , ** kwargs ): super () . __init__ ( resource_name , ** kwargs ) baudrate = 230400 device_list = ftd . listDevices () for i in range ( len ( device_list )): desc = ftd . getDeviceInfoDetail ( i )[ \"description\" ] . decode () if desc . startswith ( 'EPS1000' ): sn = desc . split ()[ - 1 ] else : continue if resource_name . endswith ( sn ): self . __device_num = i break else : raise ValueError ( 'Device not found: {model} | S/N: {sn} ' . format ( model = self . model , sn = resource_name )) self . __device = ftd . open ( self . __device_num ) self . __device . setBaudRate ( baudrate ) self . __device . setDataCharacteristics ( 8 , 0 , 0 ) self . __device . setTimeouts ( round ( timeout * 1000 ), round ( timeout * 1000 )) self . __connected = True","title":"ModelEPS1000"},{"location":"api/models/#pyinst.models.ModelEPS1000.set_qwp","text":"qwp_n = 0, 1, 2, 3, 4, 5 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (rad/s) Source code in pyinst\\models.py 5830 5831 5832 5833 5834 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 5847 5848 5849 5850 5851 5852 5853 def set_qwp ( self , qwp_n , direction , speed ): \"\"\" qwp_n = 0, 1, 2, 3, 4, 5 direction = 0(Disabled), 1(Forward), -1(Backward) speed = (rad/s) \"\"\" control_reg_addr = qwp_n + 1 speed_reg_addr0 = qwp_n * 2 + 11 speed_reg_addr1 = qwp_n * 2 + 12 if direction == 0 : self . __write_register ( control_reg_addr , 0 ) elif direction == 1 : self . __write_register ( control_reg_addr , 1 ) elif direction == - 1 : self . __write_register ( control_reg_addr , 3 ) else : raise ValueError ( 'Invalid value for direction: {} . Options: 0(Disabled), 1(Forward), -1(Backward)' . format ( direction )) speed_msb = int (( speed * 100 ) / ( 2 ** 16 )) & 0xffff speed_lsb = int (( speed * 100 )) & 0xffff self . __write_register ( speed_reg_addr0 , speed_lsb ) self . __write_register ( speed_reg_addr1 , speed_msb )","title":"set_qwp()"},{"location":"api/models/#pyinst.models.ModelEPS1000.set_hwp","text":"direction = 0(Disabled), 1(Forward), -1(Backward) speed = (krad/s) Source code in pyinst\\models.py 5855 5856 5857 5858 5859 5860 5861 5862 5863 5864 5865 5866 5867 5868 5869 5870 5871 5872 5873 5874 5875 5876 5877 5878 5879 def set_hwp ( self , direction , speed ): \"\"\" direction = 0(Disabled), 1(Forward), -1(Backward) speed = (krad/s) \"\"\" control_reg_addr = 0 speed_reg_addr0 = 9 speed_reg_addr1 = 10 if direction == 0 : self . __write_register ( control_reg_addr , 0 ) elif direction == 1 : self . __write_register ( control_reg_addr , 1 ) elif direction == - 1 : self . __write_register ( control_reg_addr , 3 ) else : raise ValueError ( 'Invalid value for direction: {} . Options: 0(Disabled), 1(Forward), -1(Backward)' . format ( direction )) speed_msb = int (( speed * 100 ) / ( 2 ** 16 )) & 0xffff speed_lsb = int (( speed * 100 )) & 0xffff self . __write_register ( speed_reg_addr0 , speed_lsb ) self . __write_register ( speed_reg_addr1 , speed_msb )","title":"set_hwp()"},{"location":"api/models/#pyinst.models.ModelEPS1000.start_scrambling","text":"speed unit: rad/s when mode is 'Peaked', the max rate is 2000000rad/s when mode is 'Rayleigh', the max rate is 1000000rad/s when mode is 'Marvell', the unit is rad/s Source code in pyinst\\models.py 5897 5898 5899 5900 5901 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 5913 5914 5915 5916 5917 5918 5919 5920 5921 5922 5923 5924 5925 5926 5927 5928 5929 5930 5931 5932 5933 5934 5935 5936 5937 5938 5939 5940 5941 def start_scrambling ( self , mode : str , rate : int | float , ** params ) -> None : ''' speed unit: rad/s when mode is 'Peaked', the max rate is 2000000rad/s when mode is 'Rayleigh', the max rate is 1000000rad/s when mode is 'Marvell', the unit is rad/s ''' speed = rate if mode == 'Peaked' : if 0 <= speed <= 20000000 : speed_10 = round ( speed / 10 ) lsb = speed_10 & 0xFFFF msb = ( 2 << 14 ) | ( speed_10 >> 16 ) self . write_register ( addr = 23 , data = lsb ) self . write_register ( addr = 24 , data = msb ) else : raise ValueError ( \"Speed is out of range, the max speed of 'Peaked' mode is 2000000rad/s\" ) elif mode == 'Rayleigh' : if 0 <= speed <= 10000000 : speed_10 = round ( speed / 10 ) lsb = speed_10 & 0xFFFF msb = ( 3 << 14 ) | ( speed_10 >> 16 ) self . write_register ( addr = 23 , data = lsb ) self . write_register ( addr = 24 , data = msb ) else : raise ValueError ( \"Speed is out of range, the max speed of 'Rayleigh' mode is 1000000rad/s\" ) elif mode == 'Marvell' : self . stop_scrambling () self . write_register ( addr = 23 , data = 0 ) self . write_register ( addr = 24 , data = 0 ) time . sleep ( 0.1 ) qwp_speed = speed / 6 offset = 0.02 self . set_qwp ( qwp_n = 0 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_qwp ( qwp_n = 1 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) self . set_qwp ( qwp_n = 2 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_hwp ( direction =- 1 , speed = 0.01 ) # -1 is backward. 0.01 could be just rad/s self . set_qwp ( qwp_n = 3 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) self . set_qwp ( qwp_n = 4 , direction = 1 , speed = qwp_speed * ( 1.0 + offset )) self . set_qwp ( qwp_n = 5 , direction =- 1 , speed = qwp_speed * ( 1.0 - offset )) if qwp_speed < 10 : self . set_hwp ( direction = 0 , speed = 0 )","title":"start_scrambling()"},{"location":"api/models/#pyinst.models.ModelPMD1000","text":"Bases: VisaInstrument , TypePMDE Source code in pyinst\\models.py 5957 5958 def __init__ ( self , resource_name : str , read_termination : str = '' , write_termination : str = '#' , ** kwargs ): super () . __init__ ( resource_name , read_termination , write_termination , ** kwargs )","title":"ModelPMD1000"},{"location":"api/models/#pyinst.models.ModelPMD1000.set_frequency","text":"Set optical frequency value. Note The PMD-1000 can only set to several discrete values on the ITU C-band: frequency = 191.6 + n*0.05, 0 <= n <= 86 If the frequency is not on the ITU grid, it will be set to the nearest valid value, and no exception will be raised. Parameters: Name Type Description Default frequency int | float optical frequency in THz. required Source code in pyinst\\models.py 5987 5988 5989 5990 5991 5992 5993 5994 5995 5996 5997 5998 5999 6000 6001 6002 6003 6004 6005 def set_frequency ( self , frequency : int | float ) -> None : \"\"\"Set optical frequency value. Note: The PMD-1000 can only set to several discrete values on the ITU C-band: frequency = 191.6 + n*0.05, 0 <= n <= 86 If the frequency is not on the ITU grid, it will be set to the nearest valid value, and no exception will be raised. Args: frequency: optical frequency in THz. \"\"\" if not self . min_frequency <= frequency <= self . max_frequency : raise ValueError ( f 'frequency is out of range: { frequency !r} ' ) ch = round (( frequency - 191.6 ) / 0.05 ) + 1 self . command ( '*CHC %03d #' % ch )","title":"set_frequency()"},{"location":"api/models/#pyinst.models.ModelPMD1000.set_pmd_value","text":"Note The pmd and sopmd setting of the PMD-1000 is not continuous. The pmd and sopmd will be set to the nearest supported values, so the real value will not be exactly the same with the setting values. Source code in pyinst\\models.py 6019 6020 6021 6022 6023 6024 6025 6026 6027 6028 6029 6030 def set_pmd_value ( self , pmd : int | float , sopmd : int | float ) -> None : \"\"\" Note: The pmd and sopmd setting of the PMD-1000 is not continuous. The pmd and sopmd will be set to the nearest supported values, so the real value will not be exactly the same with the setting values. \"\"\" if not 0 <= pmd <= 182.4 : raise ValueError ( f 'pmd is out of range: { pmd } ' ) if not 0 <= sopmd <= 8319.9 : raise ValueError ( f 'sopmd is out of range: { sopmd } ' ) self . command ( '*PMD:CON %.2f , %.2f #' % ( pmd , sopmd ))","title":"set_pmd_value()"},{"location":"development/class-hierarchy/","text":"Class Hierarchy \u00a4 The main part of PyInst is a series of Instrument Model classes, which are used to communicate with corresponding instruments. pyinst.abc module is used to define interfaces for these classes. In addition, PyInst includes some constants, error types, and utility functions. This page describes the basic inheritance structure of these classes. Instrument model bases \u00a4 BaseInstrument is the base class of all the Instrument Model classes. It has 2 subclasses: VisaInstrument and RawSerialInstrument . VisaInstrument is the base class to communicate with VISA compatible instruments. RawSerialInstrument is used on instruments that communicate with serial but is not compatible with VISA standard. Every Instrument Model class should inherit the BaseInstrument class or its subclasses. The Instrument Model class should also inherit one or more Instrument Type classes in the abc module. These abstract classes in the abc module defines abstract interfaces for the Instrument Model classes. Here are some example class diagrams (not all properties and methods are listed): VISA compatible instrument classDiagram class BaseInstrument { model ins_type ... close() create() } class VisaInstrument { idn opc ... query() command() } class TypeVOA { min_att max_att ... get_att() set_att() } class BaseModelN77xx_VOA_with_OPM { min_frequency max_frequency ... get_att() set_att() } class ModelN7764A { } BaseInstrument <|-- VisaInstrument VisaInstrument <|-- BaseModelN77xx_VOA_with_OPM TypeVOA <|-- BaseModelN77xx_VOA_with_OPM BaseModelN77xx_VOA_with_OPM <|-- ModelN7764A Raw serial instrument classDiagram class BaseInstrument { model ins_type ... close() create() } class RawSerialInstrument { command() query() } class TypeTS { get_current_temp() get_target_temp() } class ModelMC811 { ts_type run() is_running() } BaseInstrument <|-- RawSerialInstrument RawSerialInstrument <|-- ModelMC811 TypeTS <|-- ModelMC811","title":"Class Hierarchy"},{"location":"development/class-hierarchy/#class-hierarchy","text":"The main part of PyInst is a series of Instrument Model classes, which are used to communicate with corresponding instruments. pyinst.abc module is used to define interfaces for these classes. In addition, PyInst includes some constants, error types, and utility functions. This page describes the basic inheritance structure of these classes.","title":"Class Hierarchy"},{"location":"development/class-hierarchy/#instrument-model-bases","text":"BaseInstrument is the base class of all the Instrument Model classes. It has 2 subclasses: VisaInstrument and RawSerialInstrument . VisaInstrument is the base class to communicate with VISA compatible instruments. RawSerialInstrument is used on instruments that communicate with serial but is not compatible with VISA standard. Every Instrument Model class should inherit the BaseInstrument class or its subclasses. The Instrument Model class should also inherit one or more Instrument Type classes in the abc module. These abstract classes in the abc module defines abstract interfaces for the Instrument Model classes. Here are some example class diagrams (not all properties and methods are listed): VISA compatible instrument classDiagram class BaseInstrument { model ins_type ... close() create() } class VisaInstrument { idn opc ... query() command() } class TypeVOA { min_att max_att ... get_att() set_att() } class BaseModelN77xx_VOA_with_OPM { min_frequency max_frequency ... get_att() set_att() } class ModelN7764A { } BaseInstrument <|-- VisaInstrument VisaInstrument <|-- BaseModelN77xx_VOA_with_OPM TypeVOA <|-- BaseModelN77xx_VOA_with_OPM BaseModelN77xx_VOA_with_OPM <|-- ModelN7764A Raw serial instrument classDiagram class BaseInstrument { model ins_type ... close() create() } class RawSerialInstrument { command() query() } class TypeTS { get_current_temp() get_target_temp() } class ModelMC811 { ts_type run() is_running() } BaseInstrument <|-- RawSerialInstrument RawSerialInstrument <|-- ModelMC811 TypeTS <|-- ModelMC811","title":"Instrument model bases"},{"location":"development/extension/","text":"Extension \u00a4 Follow this instruction if you want to extend the package with your own Instrument Model classes: Inherit BaseInstrument or one of its subclasses. Inherit one or more Instrument Type classes Override the abstract methods inherited from these base classes. You can also define some particular properties or methods.","title":"Extension"},{"location":"development/extension/#extension","text":"Follow this instruction if you want to extend the package with your own Instrument Model classes: Inherit BaseInstrument or one of its subclasses. Inherit one or more Instrument Type classes Override the abstract methods inherited from these base classes. You can also define some particular properties or methods.","title":"Extension"},{"location":"getting-started/installation/","text":"Installation \u00a4 Install PyInst \u00a4 PyInst requires python version 3.8.10 or higher. PyInst is published as a python package and serves on the private pypi server at NeoPhotonics Wuhan site. It can be installed with pip by selecting the index-url : pip install --index-url http://10.20.22.13:50010/simple/ pyinst Note If it is the first time you use this pypi server, please add the server address to the trusted-host: pip config set install.trusted-host 10.20.22.13 Drivers \u00a4 VISA Backend \u00a4 PyInst communicates with VISA compatible instruments via PyVISA . In order for PyVISA to work, you need to have a suitable backend. PyVISA includes a backend that wraps the National Instruments\u2019s VISA library (NI-VISA). However, you need to download and install the library yourself. There are multiple VISA implementations from different vendors. PyVISA is tested against National Instruments\u2019s VISA and Keysight IO Library Suite which can both be downloaded for free (you do not need a development environment only the driver library). It is suggested to install NI-VISA as the VISA backend. Instrument Drivers \u00a4 If an instrument is connected via USB, usually you need to install the corresponding driver. But if you do not need to use this particular instrument, it is not necessary. Please install the driver under the guidance of the instrument manufacturer. Tools \u00a4 It is suggested to install one of the VISA tools such as NI Measurement & Automation Explorer (MAX) or Keysight Connection Expert . This is not required for PyInst to work, but can be used to scan for VISA instruments and get their resource names. NI MAX will automatically be installed when you install the NI-VISA driver as the visa backend. Keysight Connection Expert is included in the IO Libraries Suite .","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#install-pyinst","text":"PyInst requires python version 3.8.10 or higher. PyInst is published as a python package and serves on the private pypi server at NeoPhotonics Wuhan site. It can be installed with pip by selecting the index-url : pip install --index-url http://10.20.22.13:50010/simple/ pyinst Note If it is the first time you use this pypi server, please add the server address to the trusted-host: pip config set install.trusted-host 10.20.22.13","title":"Install PyInst"},{"location":"getting-started/installation/#drivers","text":"","title":"Drivers"},{"location":"getting-started/installation/#visa-backend","text":"PyInst communicates with VISA compatible instruments via PyVISA . In order for PyVISA to work, you need to have a suitable backend. PyVISA includes a backend that wraps the National Instruments\u2019s VISA library (NI-VISA). However, you need to download and install the library yourself. There are multiple VISA implementations from different vendors. PyVISA is tested against National Instruments\u2019s VISA and Keysight IO Library Suite which can both be downloaded for free (you do not need a development environment only the driver library). It is suggested to install NI-VISA as the VISA backend.","title":"VISA Backend"},{"location":"getting-started/installation/#instrument-drivers","text":"If an instrument is connected via USB, usually you need to install the corresponding driver. But if you do not need to use this particular instrument, it is not necessary. Please install the driver under the guidance of the instrument manufacturer.","title":"Instrument Drivers"},{"location":"getting-started/installation/#tools","text":"It is suggested to install one of the VISA tools such as NI Measurement & Automation Explorer (MAX) or Keysight Connection Expert . This is not required for PyInst to work, but can be used to scan for VISA instruments and get their resource names. NI MAX will automatically be installed when you install the NI-VISA driver as the visa backend. Keysight Connection Expert is included in the IO Libraries Suite .","title":"Tools"},{"location":"getting-started/philosophy/","text":"Philosophy \u00a4 Design Principles \u00a4 Unified interfaces for the same type of instruments \u00a4 The Instrument Model class of the same type has unified interfaces, so as to minimize the code modification when replacing the instrument model. Besides, the Instrument Model class may also define its particular methods. Unified interfaces for the similar functions of different instrument types \u00a4 For example, for all instruments with optical frequency setting function, the methods set_frequency() and set_wavelength() should always be implemented. The unified method name will make things easy. If you want to set all the instruments to the same frequency, you can simply use a for statement, since the interface is unified: voa = ModelN7752A ( ... ) opm = ModelN7744A ( ... ) osa = ModelAQ6370 ( ... ) otf = ModelOTF980 ( ... ) for instr in voa , opm , osa , otf : instr . set_frequency ( 193.7 ) Unified units \u00a4 The units of the same/similar physical quantity are unified. For example: Optical frequency: THz Optical wavelength: nm Optical frequency bandwidth: GHz Optical wavelength bandwidth: nm Optical power: dBm/W Nomalized operating logic \u00a4 Some times, instruments from different manufacturers might have different operating logic. For example, an OPM unit usually has a function called power calibration (or maybe it has a different name like \"offset\"). But the definitions of calibration quantities may be reversed in sign. Some instruments defines: Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) The other defines: Measured value (dBm) = the actual measured value (dBm) - power calibration (dB) But PyInst unifies the definition of calibration so that they all conform to the first formula.","title":"Philosophy"},{"location":"getting-started/philosophy/#philosophy","text":"","title":"Philosophy"},{"location":"getting-started/philosophy/#design-principles","text":"","title":"Design Principles"},{"location":"getting-started/philosophy/#unified-interfaces-for-the-same-type-of-instruments","text":"The Instrument Model class of the same type has unified interfaces, so as to minimize the code modification when replacing the instrument model. Besides, the Instrument Model class may also define its particular methods.","title":"Unified interfaces for the same type of instruments"},{"location":"getting-started/philosophy/#unified-interfaces-for-the-similar-functions-of-different-instrument-types","text":"For example, for all instruments with optical frequency setting function, the methods set_frequency() and set_wavelength() should always be implemented. The unified method name will make things easy. If you want to set all the instruments to the same frequency, you can simply use a for statement, since the interface is unified: voa = ModelN7752A ( ... ) opm = ModelN7744A ( ... ) osa = ModelAQ6370 ( ... ) otf = ModelOTF980 ( ... ) for instr in voa , opm , osa , otf : instr . set_frequency ( 193.7 )","title":"Unified interfaces for the similar functions of different instrument types"},{"location":"getting-started/philosophy/#unified-units","text":"The units of the same/similar physical quantity are unified. For example: Optical frequency: THz Optical wavelength: nm Optical frequency bandwidth: GHz Optical wavelength bandwidth: nm Optical power: dBm/W","title":"Unified units"},{"location":"getting-started/philosophy/#nomalized-operating-logic","text":"Some times, instruments from different manufacturers might have different operating logic. For example, an OPM unit usually has a function called power calibration (or maybe it has a different name like \"offset\"). But the definitions of calibration quantities may be reversed in sign. Some instruments defines: Measured value (dBm) = the actual measured value (dBm) + power calibration (dB) The other defines: Measured value (dBm) = the actual measured value (dBm) - power calibration (dB) But PyInst unifies the definition of calibration so that they all conform to the first formula.","title":"Nomalized operating logic"},{"location":"getting-started/references/","text":"References \u00a4 Basic Knowledge \u00a4 What is VISA A brief history of VISA NI-VISA Overview What is SCPI SCPI 1999.0 IVI Specifications Manuals \u00a4 Manuals from instrument manufacturers","title":"References"},{"location":"getting-started/references/#references","text":"","title":"References"},{"location":"getting-started/references/#basic-knowledge","text":"What is VISA A brief history of VISA NI-VISA Overview What is SCPI SCPI 1999.0 IVI Specifications","title":"Basic Knowledge"},{"location":"getting-started/references/#manuals","text":"Manuals from instrument manufacturers","title":"Manuals"},{"location":"getting-started/tutorial/","text":"Tutorial \u00a4 Background knowledge \u00a4 If you don't understand the concepts of VISA and SCPI, please refer to the References page. But a deep understanding of these concepts is not required to use this package. Take it easy. In addition, you also need to have a common sense understanding of communication interfaces such as RS-232, Ethernet, GPIB, and USB. These are outside the scope of this document. Communicating with your instrument \u00a4 In the PyInst package, specific instrument models are abstracted as Instrument Model classes. An Instrument Model class always starts with a prefix Model , for example: ModelAQ6370 , ModelOTF980 . All Instrument Model classes can be directly imported from the pyinst namespace. Here is a example to show how to communicate with your instrument: >>> from pyinst import ModelN7744A >>> opm = ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) >>> opm . get_power_value () - 10.85 >>> opm . close () # release the instrument resource The Instrument Model is immediately opened on object creation. The first parameter of the __init__ function is always resource_name . For VISA compatible instruments, it is the VISA resource name or alias. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument/USB chip. Note An Instrument Model object is a logical functional unit rather than corresponding to the physical form of the instrument. For example, for the optical power meter N7744A, it has 4 independent OPM functional units. Each of them can be regarded as an ModelN7744A object. Instrument Model classes also support context management, so you can use the \"with\" statement to ensure that the instrument resource is closed after usage. with ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) as opm : opm . get_power_value () If you do not want exception be raised when the Instrument Model class failed to init, use the create method instead. If the object creation failed, None will be returned. opm = ModelN7744A . create ( 'GPIB1::1::INSTR' , slot = 2 ) if opm : print ( f 'Optical power is { opm . get_power_value () : .2f } { opm . get_power_unit () } ' ) else : print ( f 'The instrument failed to connect.' ) Use the standard interfaces of an instrument type for unify \u00a4 One of the principles of PyInst is to unify the common interfaces of the same type of instrument, so as to minimize the code modification when replacing the instrument model. Different instrument types are abstracted as Instrument Type classes. An Instrument Model class will inherit one or more of these classes. If you want to improve the generality of your code, a good practice is to try to use the properties or methods defined by the Instrument Type class. So it can be replaced by any instrument model of the same type. Find these Instrument Type classes in the API document: Abstract Method Classes . To get the type of the instrument, use ins_type property of an Instrument Model class: >>> from pyinst import ModelN7752A >>> ModelN7752A.ins_type <InstrumentType.VOA|OPM: 3> A member of pyinst.costants.InstrumentType will be returned. Use *OPC? query to synchronize (VISA compatible instruments) \u00a4 Standard Commands for Programmable Instruments (SCPI) is the specification used by VISA compatible instruments. SCPI defined 2 types of commands: the overlapped and sequential commands. A sequential command is one which finishes executing before the next command starts executing. An overlapped command is one which does not finish executing before the next command starts executing. In other words, if you call a method based on a sequential command, it is expected that the executing is done when the method returns. It's a synchronous method. But for a method based on an overlapped command, maybe the executing is not finished when the method returns. In other words, it's asynchronous. The method does only trigger the command execution. SCPI implemented *OPC query to synchronize. This query will return after all pending executions done. Use opc property of the VisaInstrument class. For example: from pyinst import ModelAQ6370 osa = ModelAQ6370 ( 'GPIB1::1::INSTR' ) osa . single () osa . opc osa . get_data () The single sweep is an overlapped command for AQ6370. If we do not query *OPC?, the sweep may not be finish when we get data, and we will not get the correct data we expected. To know if a command is sequential or overlapped, please refer to the documents of the instrument manufacturer. What next \u00a4 Learn basic knowledge about VISA and SCPI on the References page. API Reference Refer to the documents from the instrument manufacturers .","title":"Tutorial"},{"location":"getting-started/tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"getting-started/tutorial/#background-knowledge","text":"If you don't understand the concepts of VISA and SCPI, please refer to the References page. But a deep understanding of these concepts is not required to use this package. Take it easy. In addition, you also need to have a common sense understanding of communication interfaces such as RS-232, Ethernet, GPIB, and USB. These are outside the scope of this document.","title":"Background knowledge"},{"location":"getting-started/tutorial/#communicating-with-your-instrument","text":"In the PyInst package, specific instrument models are abstracted as Instrument Model classes. An Instrument Model class always starts with a prefix Model , for example: ModelAQ6370 , ModelOTF980 . All Instrument Model classes can be directly imported from the pyinst namespace. Here is a example to show how to communicate with your instrument: >>> from pyinst import ModelN7744A >>> opm = ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) >>> opm . get_power_value () - 10.85 >>> opm . close () # release the instrument resource The Instrument Model is immediately opened on object creation. The first parameter of the __init__ function is always resource_name . For VISA compatible instruments, it is the VISA resource name or alias. For other instruments connected with serial port, it is the port name. For other instruments connected with USB, it is the S/N of the instrument/USB chip. Note An Instrument Model object is a logical functional unit rather than corresponding to the physical form of the instrument. For example, for the optical power meter N7744A, it has 4 independent OPM functional units. Each of them can be regarded as an ModelN7744A object. Instrument Model classes also support context management, so you can use the \"with\" statement to ensure that the instrument resource is closed after usage. with ModelN7744A ( 'GPIB1::1::INSTR' , slot = 2 ) as opm : opm . get_power_value () If you do not want exception be raised when the Instrument Model class failed to init, use the create method instead. If the object creation failed, None will be returned. opm = ModelN7744A . create ( 'GPIB1::1::INSTR' , slot = 2 ) if opm : print ( f 'Optical power is { opm . get_power_value () : .2f } { opm . get_power_unit () } ' ) else : print ( f 'The instrument failed to connect.' )","title":"Communicating with your instrument"},{"location":"getting-started/tutorial/#use-the-standard-interfaces-of-an-instrument-type-for-unify","text":"One of the principles of PyInst is to unify the common interfaces of the same type of instrument, so as to minimize the code modification when replacing the instrument model. Different instrument types are abstracted as Instrument Type classes. An Instrument Model class will inherit one or more of these classes. If you want to improve the generality of your code, a good practice is to try to use the properties or methods defined by the Instrument Type class. So it can be replaced by any instrument model of the same type. Find these Instrument Type classes in the API document: Abstract Method Classes . To get the type of the instrument, use ins_type property of an Instrument Model class: >>> from pyinst import ModelN7752A >>> ModelN7752A.ins_type <InstrumentType.VOA|OPM: 3> A member of pyinst.costants.InstrumentType will be returned.","title":"Use the standard interfaces of an instrument type for unify"},{"location":"getting-started/tutorial/#use-opc-query-to-synchronize-visa-compatible-instruments","text":"Standard Commands for Programmable Instruments (SCPI) is the specification used by VISA compatible instruments. SCPI defined 2 types of commands: the overlapped and sequential commands. A sequential command is one which finishes executing before the next command starts executing. An overlapped command is one which does not finish executing before the next command starts executing. In other words, if you call a method based on a sequential command, it is expected that the executing is done when the method returns. It's a synchronous method. But for a method based on an overlapped command, maybe the executing is not finished when the method returns. In other words, it's asynchronous. The method does only trigger the command execution. SCPI implemented *OPC query to synchronize. This query will return after all pending executions done. Use opc property of the VisaInstrument class. For example: from pyinst import ModelAQ6370 osa = ModelAQ6370 ( 'GPIB1::1::INSTR' ) osa . single () osa . opc osa . get_data () The single sweep is an overlapped command for AQ6370. If we do not query *OPC?, the sweep may not be finish when we get data, and we will not get the correct data we expected. To know if a command is sequential or overlapped, please refer to the documents of the instrument manufacturer.","title":"Use *OPC? query to synchronize (VISA compatible instruments)"},{"location":"getting-started/tutorial/#what-next","text":"Learn basic knowledge about VISA and SCPI on the References page. API Reference Refer to the documents from the instrument manufacturers .","title":"What next"}]}
